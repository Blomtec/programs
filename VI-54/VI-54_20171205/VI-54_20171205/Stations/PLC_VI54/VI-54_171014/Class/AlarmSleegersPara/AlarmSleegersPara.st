//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "AlarmSleegersPara"
	Revision           = "0.0"
	GUID               = "{40EA7F1E-8B32-445D-BCD2-B2B4DFF8B755}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(540,240)">
	<Channels>
		<Client Name="NextClass" Required="false" Internal="false"/>
	</Channels>
	<Network Name="AlarmSleegersPara">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{4CDE399C-4F13-42FC-8D1A-36717B479C24}"
				Class      = "_AlarmX0Para"
				Position   = "(218,120)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="ClassSvr"/>
					<Client Name="Acknow"/>
					<Client Name="Config" Value="0"/>
					<Client Name="Group"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.ClassSvr" Destination="_base.ClassSvr" Vertices="(690,210),(518,210),"/>
			<Connection Source="_base.Config" Destination="this.Config" Vertices="(218,210),(38,210),"/>
			<Connection Source="_base.Acknow" Destination="this.Acknow" Vertices="(218,270),(38,270),"/>
			<Connection Source="_base.Group" Destination="this.Group" Vertices="(218,330),(38,330),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using _AlarmX0Para

AlarmSleegersPara : CLASS
: _AlarmX0Para
  //Servers:
  //Clients:
	NextClass 	: CltChCmd_AlarmSleegersPara;
  //Variables:
		MachineNbr 	: DINT;
  //Functions:
	
	FUNCTION GLOBAL MyInit
		VAR_INPUT
			iStationNbr 	: DINT;
			iMachineNbr 	: DINT;
		END_VAR;
	
	FUNCTION GLOBAL AlarmState
		VAR_INPUT
			AlarmStr 	: tAlarm;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB AlarmSleegersPara::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_ALARMSLEEGERSPARA
0$UINT, 0$UINT, (SIZEOF(::AlarmSleegersPara))$UINT, 
0$UINT, 1$UINT, 0$UINT, 
TO_UDINT(2519434872), "AlarmSleegersPara", //Class
TO_UDINT(800276940), "_AlarmX0Para", 0$UINT, 9$UINT, //Baseclass
//Servers:
//Clients:
(::AlarmSleegersPara.NextClass.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(3392979377), "NextClass", TO_UDINT(2519434872), "AlarmSleegersPara", 0$UINT, 0$UINT, 
END_FUNCTION


#define USER_CNT_AlarmSleegersPara 4

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_AlarmSleegersPara] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION AlarmSleegersPara::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= _AlarmX0Para::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= _AlarmX0Para::ClassSvr.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, _AlarmX0Para::ClassSvr.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_AlarmSleegersPara;
	_AlarmX0Para::ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF _AlarmX0Para::ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION GLOBAL AlarmSleegersPara::MyInit
	VAR_INPUT
		iStationNbr 	: DINT;
		iMachineNbr 	: DINT;
	END_VAR

  // Set station number
  Config := (MachineNbr + iStationNbr);
  MachineNbr := iMachineNbr;

  if IsClientConnected(#NextClass) then
    NextClass.MyInit(iStationNbr:= (iStationNbr + 1), iMachineNbr:= MachineNbr);
  end_if;

END_FUNCTION

FUNCTION GLOBAL AlarmSleegersPara::AlarmState
	VAR_INPUT
		AlarmStr 	: tAlarm;
	END_VAR
  
  ClassSvr.Write(input:= AlarmStr[(Config - MachineNbr)]);
  
  
  if IsClientConnected(#NextClass) then
    NextClass.AlarmState(AlarmStr:= AlarmStr);
  end_if;

END_FUNCTION

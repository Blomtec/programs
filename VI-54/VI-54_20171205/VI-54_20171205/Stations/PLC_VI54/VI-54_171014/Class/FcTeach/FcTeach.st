//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "FcTeach"
	Revision           = "0.0"
	GUID               = "{E2036E72-361C-4EC5-8882-E9685B69EFB3}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	DefCyclictime      = "cCT"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(570,240)">
	<Channels>
		<Server Name="Comm" GUID="{EC1E8BEB-5528-4389-A525-0218DC0BA6A7}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="FcState" GUID="{17F88919-B8AC-4102-AD65-0868A2C0E135}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="TeachState" GUID="{F63646E6-F6BA-43D0-A7D2-C08F70C586ED}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Client Name="iState" Required="true" Internal="false"/>
		<Client Name="oTeach" Required="true" Internal="false"/>
	</Channels>
</Class>
*)
FcTeach : CLASS
  //Servers:
	Comm 	: SvrChCmd_DINT;
	FcState 	: SvrCh_DINT;
	TeachState 	: SvrCh_TeachEnum;
  //Clients:
	iState 	: CltCh_DINT;
	oTeach 	: CltCh_DINT;
  //Variables:
		TmrTeach 	: UDINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB FcTeach::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_FCTEACH
0$UINT, 0$UINT, (SIZEOF(::FcTeach))$UINT, 
3$UINT, 2$UINT, 0$UINT, 
TO_UDINT(2150175848), "FcTeach", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::FcTeach.Comm.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(2660888151), "Comm", 
(::FcTeach.FcState.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2711486633), "FcState", 
(::FcTeach.TeachState.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(642435788), "TeachState", 
//Clients:
(::FcTeach.iState.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(191896913), "iState", 
(::FcTeach.oTeach.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(4238273165), "oTeach", 
END_FUNCTION


#define USER_CNT_FcTeach 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_FcTeach] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION FcTeach::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_FcTeach, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Write		:= #M_WR_DIRECT();
	vmt.CmdTable.CyWork		:= #CyWork();
	Comm.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF Comm.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL FcTeach::CyWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR

  iState := iState.Read();
  FcState := iState;

  case TeachState of
  TeachIdel:
    oTeach := 0;
    if Comm = 1 then
      TmrTeach := ops.tAbsolute;
      TeachState := Teaching;
    elsif Comm = 2 then
      TmrTeach := ops.tAbsolute;
      TeachState := TeachMode;
    end_if;  
  
  Teaching:
    oTeach := 1;
    if ops.tAbsolute - TmrTeach >= 1500 then  // switching to teach mode
      TmrTeach := ops.tAbsolute;
      TeachState := TeachingReady;
    end_if;  
  
  TeachMode:
    oTeach := 1;
    if ops.tAbsolute - TmrTeach >= 11000 then // switching teaching mode
      TmrTeach := ops.tAbsolute;
      TeachState := TeachingReady;
    end_if;  
  
  TeachingReady:
    oTeach := 0;
    if ops.tAbsolute - TmrTeach >= 1000 then
      TmrTeach := ops.tAbsolute;
      Comm := 0;
      TeachState := TeachIdel;
    end_if;  
  
  
  end_case;
  
  oTeach.Write (oTeach);


	state := READY;

END_FUNCTION

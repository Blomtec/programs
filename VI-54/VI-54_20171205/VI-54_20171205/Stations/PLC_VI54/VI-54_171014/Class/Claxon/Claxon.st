//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "Claxon"
	Revision           = "0.0"
	GUID               = "{B8641D76-9B49-46DC-B132-C774463E0E8F}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(480,120)">
	<Channels>
		<Server Name="ClaxonActief" GUID="{16C7067C-4FBE-478A-8AEA-86D41EEB5B2C}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false"/>
		<Server Name="Comm" GUID="{0A0881A9-1CEA-4E18-9AC5-F3388C61288E}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Client Name="oClaxon" Required="false" Internal="false"/>
	</Channels>
</Class>
*)
Claxon : CLASS
  //Servers:
	Comm 	: SvrChCmd_DINT;
	ClaxonActief 	: SvrCh_OptiesEnum;
  //Clients:
	oClaxon 	: CltCh_DINT;
  //Variables:
  //Functions:
	
	FUNCTION GLOBAL ClaxonState
		VAR_INPUT
			State 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB Claxon::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_CLAXON
0$UINT, 0$UINT, (SIZEOF(::Claxon))$UINT, 
2$UINT, 1$UINT, 0$UINT, 
TO_UDINT(42930980), "Claxon", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::Claxon.Comm.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(2660888151), "Comm", 
(::Claxon.ClaxonActief.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1321464797), "ClaxonActief", 
//Clients:
(::Claxon.oClaxon.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(2623694953), "oClaxon", 
END_FUNCTION


#define USER_CNT_Claxon 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_Claxon] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION Claxon::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_Claxon, pCmd := #vmt.CmdTable);
	Comm.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF Comm.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ClaxonActief.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF ClaxonActief.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION GLOBAL Claxon::ClaxonState
	VAR_INPUT
		State 	: DINT;
	END_VAR

  if ClaxonActief = Actief then
    oClaxon := State;
  else
    oClaxon := 0;
  end_if;
  
  
  oClaxon.Write(input:= oClaxon);

END_FUNCTION

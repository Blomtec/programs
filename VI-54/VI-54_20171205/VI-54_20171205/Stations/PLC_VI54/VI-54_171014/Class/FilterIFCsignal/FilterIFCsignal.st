//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "FilterIFCsignal"
	Revision           = "1.0"
	GUID               = "{886A26E0-28EF-454F-B1B7-6FD17BABB995}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(570,240)">
	<Channels>
		<Server Name="TriggerFilter" GUID="{9FE189A0-490A-4C87-8A77-B34A7F2C0113}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Client Name="iFilterTime" Required="false" Internal="false"/>
		<Client Name="iMaskTime" Required="false" Internal="false"/>
		<Client Name="iTrigger" Required="false" Internal="false"/>
		<Client Name="Saved_FilterTime" Required="true" Internal="true"/>
		<Client Name="Saved_LineSpeed" Required="true" Internal="true"/>
		<Client Name="Saved_MaskTime" Required="true" Internal="true"/>
		<Client Name="STD" Required="true" Internal="true"/>
	</Channels>
	<Network Name="FilterIFCsignal">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "Saved_FilterTime"
				GUID       = "{86A37EB1-80D7-4F2D-AD12-0B2C7850955A}"
				Class      = "Ram"
				Position   = "(270,540)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Data"/>
				</Channels>
			</Object>
			<Object
				Name       = "Saved_LineSpeed"
				GUID       = "{ED93D306-EEB8-468F-BC2A-9444EFAE4E65}"
				Class      = "Ram"
				Position   = "(270,390)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Data"/>
				</Channels>
			</Object>
			<Object
				Name       = "Saved_MaskTime"
				GUID       = "{E940D1C2-F838-49AB-8F7E-6A6B1C5A5278}"
				Class      = "Ram"
				Position   = "(270,690)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Data"/>
				</Channels>
			</Object>
			<Object
				Name           = "STD"
				GUID           = "{17701C2F-DBDA-4EB7-9E7F-0200304FE44F}"
				Class          = "Standard"
				Position       = "(270,240)"
				Visualized     = "false"
				BackgroundTime = "1000 ms">
				<Channels>
					<Server Name="ClassSvr"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.STD" Destination="STD.ClassSvr"/>
			<Connection Source="this.Saved_LineSpeed" Destination="Saved_LineSpeed.Data"/>
			<Connection Source="this.Saved_FilterTime" Destination="Saved_FilterTime.Data"/>
			<Connection Source="this.Saved_MaskTime" Destination="Saved_MaskTime.Data"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
FilterIFCsignal : CLASS
  //Servers:
	TriggerFilter 	: SvrChCmd_DINT;
  //Clients:
	iTrigger 	: CltCh_DINT;
	STD 	: CltChCmd_Standard;
	iMaskTime 	: CltCh_DINT;
	iFilterTime 	: CltCh_DINT;
	Saved_LineSpeed 	: CltChCmd_Ram;
	Saved_FilterTime 	: CltChCmd_Ram;
	Saved_MaskTime 	: CltChCmd_Ram;
  //Variables:
		udFilterTime 	: UDINT;
		MaskTime 	: DINT;
		LineSpeed 	: REAL;
		DistanceFilterTime 	: REAL;
		NewFilterTime 	: DINT;
		DistanceMaskTime 	: REAL;
		NewMaskTime 	: DINT;
  //Functions:
	
	FUNCTION GLOBAL SetLineSpeed
		VAR_INPUT
			Speed 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL TriggerFilter::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using Ram
#pragma using Standard


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB FilterIFCsignal::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_FILTERIFCSIGNAL
1$UINT, 0$UINT, (SIZEOF(::FilterIFCsignal))$UINT, 
1$UINT, 7$UINT, 0$UINT, 
TO_UDINT(262138912), "FilterIFCsignal", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::FilterIFCsignal.TriggerFilter.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(2522777508), "TriggerFilter", 
//Clients:
(::FilterIFCsignal.iTrigger.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(3954321558), "iTrigger", 
(::FilterIFCsignal.STD.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1054692386), "STD", TO_UDINT(3603188683), "Standard", 6$UINT, 1$UINT, 
(::FilterIFCsignal.iMaskTime.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(429961711), "iMaskTime", 
(::FilterIFCsignal.iFilterTime.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(3955024802), "iFilterTime", 
(::FilterIFCsignal.Saved_LineSpeed.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3223679930), "Saved_LineSpeed", TO_UDINT(1903583397), "Ram", 1$UINT, 3$UINT, 
(::FilterIFCsignal.Saved_FilterTime.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(4099728780), "Saved_FilterTime", TO_UDINT(1903583397), "Ram", 1$UINT, 3$UINT, 
(::FilterIFCsignal.Saved_MaskTime.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(699509902), "Saved_MaskTime", TO_UDINT(1903583397), "Ram", 1$UINT, 3$UINT, 
END_FUNCTION


#define USER_CNT_FilterIFCsignal 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_FilterIFCsignal] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION FilterIFCsignal::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_FilterIFCsignal, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Read		:= #Read();
	TriggerFilter.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF TriggerFilter.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

FUNCTION VIRTUAL GLOBAL FilterIFCsignal::TriggerFilter::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  // Read inputs
  iTrigger    := iTrigger.Read();
  iMaskTime   := iMaskTime.Read();
  iFilterTime := iFilterTime.Read();
  
  
  // Save changes
  if iFilterTime <> Saved_FilterTime.Read() then
    Saved_FilterTime.Write(input:= iFilterTime);
    Saved_LineSpeed.Write(input:= to_dint LineSpeed);
  elsif iMaskTime <> Saved_MaskTime.Read() then
    Saved_MaskTime.Write(input:= iMaskTime);
    Saved_LineSpeed.Write(input:= to_dint LineSpeed);
  elsif (LineSpeed <> Saved_LineSpeed.Read()) & (LineSpeed > 10) then // Change filter and mask time, only when speed is higher than 1.0 m/min  
    DistanceFilterTime := (to_real iFilterTime * Saved_LineSpeed.Read());
    NewFilterTime      := to_dint(DistanceFilterTime / to_real LineSpeed); 
    
    DistanceMaskTime   := (to_real iMaskTime * Saved_LineSpeed.Read());
    NewMaskTime        := to_dint(DistanceMaskTime / to_real LineSpeed); 
    
    Saved_FilterTime.Write(input:= NewFilterTime);
    iFilterTime.Write(input:= NewFilterTime);
    Saved_MaskTime.Write(input:= NewMaskTime);
    iMaskTime.Write(input:= NewMaskTime);
    Saved_LineSpeed.Write(input:= to_dint LineSpeed);
  end_if;
  
  
  // filtertijd
  // Het product moet een minimale tijdsduur hoog zijn voordat het pas echt een puls wordt
  // Anders is het vuil / afval 
  if iTrigger = 1 then
    if (ops.tAbsolute - udFilterTime) >= to_udint(iFilterTime) then
      TriggerFilter := 1;
    end_if; 
  else
    udFilterTime := ops.tAbsolute;
  end_if;

  // minimaal hooghouden van signaal
  if iMaskTime <= 100 then
    MaskTime := 100;
  else
    MaskTime := iMaskTime; 
  end_if;
  if STD.TON(IN:= TriggerFilter, PT:= MaskTime) then // hou 100ms hoog
    TriggerFilter := 0;
  end_if;

	output := TriggerFilter;

END_FUNCTION

FUNCTION GLOBAL FilterIFCsignal::SetLineSpeed
	VAR_INPUT
		Speed 	: DINT;
	END_VAR
  
  LineSpeed := (to_real Speed ToMperMin);

END_FUNCTION

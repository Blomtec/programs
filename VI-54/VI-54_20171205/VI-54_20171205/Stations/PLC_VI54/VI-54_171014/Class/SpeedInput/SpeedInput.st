//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "SpeedInput"
	Revision           = "0.0"
	GUID               = "{67822640-20C5-4207-942D-DDE4D9F4AB21}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(480,480)">
	<Channels>
		<Server Name="__________" GUID="{E1C27CD2-A833-4918-9EB6-398740C5E900}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="ActInfeedSpeed" GUID="{73DD27D4-FE87-4E42-AAA3-BF92142E1C77}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="ClassSvr" GUID="{CF5401F4-7CF9-4EAB-90CC-479662A51DEF}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="MaxAccDec" GUID="{8578596B-587B-4617-8064-E95F6BE5683F}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="File" Comment="Maximal acceleration at 100%"/>
		<Server Name="MaxAnalogInput" GUID="{96C1870E-37A6-407C-88A2-92C7F2EDC44C}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="File"/>
		<Server Name="MaxSpeed" GUID="{CEFD82CF-18E3-48D3-A8E7-4E440FA75116}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="File" Comment="Maximal velocity at 100%"/>
		<Server Name="PercentageOverride" GUID="{820DA24F-A74A-4911-9F26-F9095125E248}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="PulsenPerMM" GUID="{FE5F57EF-4833-4D0D-BCF1-73A8F1F04BD9}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="File" Comment="How many pulses do we get for 1 mm&#13;&#10;"/>
		<Client Name="iAnlogSpeed" Required="false" Internal="false"/>
		<Client Name="iEncoderPos" Required="false" Internal="false"/>
		<Client Name="Standard1" Required="true" Internal="true"/>
	</Channels>
	<Network Name="SpeedInput">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name           = "Standard1"
				GUID           = "{E505A258-8FCC-40FA-9079-8AC11C324C74}"
				Class          = "Standard"
				Position       = "(210,480)"
				Visualized     = "false"
				BackgroundTime = "1000 ms">
				<Channels>
					<Server Name="ClassSvr"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.Standard1" Destination="Standard1.ClassSvr"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
SpeedInput : CLASS
	TYPE
	  eInput :  //! <Type Public="true" Name="eInput"/>
	  (
	    eAnalog,
	    eEncoder
	  )$UDINT;
	END_TYPE
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	ActInfeedSpeed 	: SvrCh_DINT;
	PercentageOverride 	: SvrCh_DINT;
	__________ 	: SvrCh_DINT;
	MaxSpeed 	: SvrCh_DINT;
	MaxAccDec 	: SvrCh_DINT;
	MaxAnalogInput 	: SvrCh_DINT;
	PulsenPerMM 	: SvrCh_DINT;
  //Clients:
	iAnlogSpeed 	: CltCh_DINT;
	Standard1 	: CltChCmd_Standard;
	iEncoderPos 	: CltCh_DINT;
  //Variables:
		MaxPackageSpeed 	: DINT;
		MaxPackageAccDec 	: DINT;
		CalcSpeed 	: REAL;
		CalcSpeedIntUnits 	: DINT;
		OldEncoderPuls 	: DINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL ReadMaxSpeed
		VAR_OUTPUT
			Speed 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ReadPercentage
		VAR_OUTPUT
			Percentage 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ReadMaxAcceleration
		VAR_OUTPUT
			Acceleration 	: DINT;
		END_VAR;
	
	FUNCTION GLOBAL EncoderInput;
	
	FUNCTION GLOBAL AnalogInput;
	
	FUNCTION GLOBAL ResetEncoderInput;
	
	FUNCTION GLOBAL MyRtTask
		VAR_INPUT
			InputSetting 	: eInput;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using Standard


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB SpeedInput::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_SPEEDINPUT
0$UINT, 0$UINT, (SIZEOF(::SpeedInput))$UINT, 
8$UINT, 3$UINT, 0$UINT, 
TO_UDINT(3374501148), "SpeedInput", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::SpeedInput.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::SpeedInput.ActInfeedSpeed.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1864273108), "ActInfeedSpeed", 
(::SpeedInput.PercentageOverride.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2904107716), "PercentageOverride", 
(::SpeedInput.__________.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(705157791), "__________", 
(::SpeedInput.MaxSpeed.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(3947575129), "MaxSpeed", 
(::SpeedInput.MaxAccDec.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(2070353832), "MaxAccDec", 
(::SpeedInput.MaxAnalogInput.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(347771733), "MaxAnalogInput", 
(::SpeedInput.PulsenPerMM.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(976323919), "PulsenPerMM", 
//Clients:
(::SpeedInput.iAnlogSpeed.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1104544048), "iAnlogSpeed", 
(::SpeedInput.Standard1.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2411475140), "Standard1", TO_UDINT(3603188683), "Standard", 6$UINT, 1$UINT, 
(::SpeedInput.iEncoderPos.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(837904183), "iEncoderPos", 
END_FUNCTION


#define USER_CNT_SpeedInput 3

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_SpeedInput] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION SpeedInput::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_SpeedInput, pCmd := #vmt.CmdTable);
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #ReadMaxSpeed();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #ReadPercentage();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[2]		:= #ReadMaxAcceleration();

#pragma warning (default : 74)
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	MaxSpeed.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF MaxSpeed.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	MaxAccDec.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF MaxAccDec.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	MaxAnalogInput.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF MaxAnalogInput.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	PulsenPerMM.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF PulsenPerMM.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

FUNCTION GLOBAL SpeedInput::MyRtTask
	VAR_INPUT
		InputSetting 	: eInput;
	END_VAR

  if InputSetting = eAnalog then
    AnalogInput();
  elsif InputSetting = eEncoder then
    EncoderInput();
  end_if;
  
  // Calculate Max speed and Max acceleration
  MaxPackageSpeed  := to_dint(to_real MaxSpeed ToMMperSec);
  MaxPackageAccDec := to_dint(to_real MaxAccDec ToMMperSec2); 

END_FUNCTION

FUNCTION VIRTUAL GLOBAL SpeedInput::ReadMaxSpeed
	VAR_OUTPUT
		Speed 	: DINT;
	END_VAR

  Speed := MaxPackageSpeed;
  
END_FUNCTION

FUNCTION VIRTUAL GLOBAL SpeedInput::ReadPercentage
	VAR_OUTPUT
		Percentage 	: DINT;
	END_VAR

  Percentage := PercentageOverride;
  
END_FUNCTION

FUNCTION VIRTUAL GLOBAL SpeedInput::ReadMaxAcceleration
	VAR_OUTPUT
		Acceleration 	: DINT;
	END_VAR
  
  Acceleration := MaxPackageAccDec; 

END_FUNCTION

FUNCTION GLOBAL SpeedInput::AnalogInput

  iAnlogSpeed := iAnlogSpeed.Read();
  
  // Percentage override
  if iAnlogSpeed > 10 then
    PercentageOverride := to_dint(to_real iAnlogSpeed / 10.0);
  else
    PercentageOverride := 0;
  end_if;
  
  ActInfeedSpeed := to_dint(to_real MaxSpeed * (to_real iAnlogSpeed / MaxAnalogInput));

END_FUNCTION

FUNCTION GLOBAL SpeedInput::EncoderInput

  iEncoderPos := iEncoderPos.Read();  
  // We divide it by 4 because our cyclic time is 4ms (Calcspeed is in m/min in xxx.x)
  CalcSpeed         := (((to_real (iEncoderPos- OldEncoderPuls) / to_Real PulsenPerMM) / 4.0) * 600.0);
  CalcSpeedIntUnits := to_dint(to_real CalcSpeed ToMMperSec);
  OldEncoderPuls    := iEncoderPos; 
  
  PercentageOverride := to_dint((to_Real CalcSpeedIntUnits * 1000.0) / to_real MaxPackageSpeed);
  
END_FUNCTION

FUNCTION GLOBAL SpeedInput::ResetEncoderInput

  // Reset the encoder counter
  iEncoderPos.Write(input:= 0);

END_FUNCTION

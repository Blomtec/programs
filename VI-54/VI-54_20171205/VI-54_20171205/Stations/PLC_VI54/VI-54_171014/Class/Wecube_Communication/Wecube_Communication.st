//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "Wecube_Communication"
	Revision           = "2.0"
	GUID               = "{F0CCF4FC-85E0-4DDB-B983-840FC3AAC66C}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(780,120)">
	<Channels>
		<Server Name="_________" GUID="{AAA5BC26-BCD0-4C47-A35A-F064C9A62C85}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="__________" GUID="{3E6A1B23-59CB-4B96-9164-ED354726F6B8}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="___________" GUID="{B6B8FA44-7992-48A6-A76A-B56F8A30603E}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="DataComplete" GUID="{01FC546B-B16A-4212-88CC-1D9DA27E3B1C}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="DeviceType" GUID="{A13BCD98-502E-4B02-92ED-0C8AE737016B}" Visualized="true" Remotely="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="IsOnline" GUID="{5BB38491-8185-4E7E-BC0F-7E5B763EFC80}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="LastCommand" GUID="{FC457229-5225-4257-8884-C42AAB8E4A80}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="The last givin command&#13;&#10;"/>
		<Server Name="OffsetRposition" GUID="{C8B1F05D-D50E-4D08-A799-44413AC99AD3}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="File"/>
		<Server Name="OffsetXposition" GUID="{03358026-6D07-447D-8E58-34FA7F3BD3F3}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="File"/>
		<Server Name="OffsetYposition" GUID="{6F72ED6F-3263-4E9E-A59E-FF17357CD606}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="File"/>
		<Server Name="ProcessTime" GUID="{77CF650B-5380-40AF-95A2-5DCE71F3A3DE}" Visualized="true" Remotely="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="ProductionDate" GUID="{A2D7CCBA-105E-4B8B-A321-97476EFED9A4}" Visualized="true" Remotely="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="dd mm yyyy"/>
		<Server Name="ProductShapeOk" GUID="{FE2B25BA-693E-41DA-BD28-8152ED4CB058}" Visualized="true" Remotely="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="Rposition" GUID="{80238309-01A4-4634-AA16-B2B135C29F03}" Visualized="true" Remotely="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Rotation of each product"/>
		<Server Name="SerialNumber" GUID="{761670A9-7925-4B4B-80F8-11D6859333CF}" Visualized="true" Remotely="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="use this channel to access the string functions"/>
		<Server Name="TwistXandY" GUID="{61473F71-7E7D-412E-867E-63B8B7E6117C}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="File" Comment="When this parameter is set to &apos;1&apos;,&#13;&#10;the value X will be Y and the value Y will be X&#13;&#10;"/>
		<Server Name="Xposition" GUID="{3A3CD132-CE87-473E-B7D3-92A63439E867}" Visualized="true" Remotely="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="Yposition" GUID="{1AA3BD0E-FF6F-4FFD-A525-0BD18A592CDD}" Visualized="true" Remotely="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Client Name="_TCPIP_CLIENT2" Required="true" Internal="false"/>
		<Client Name="IpAdresMetalDetector" Required="true" Internal="true"/>
		<Client Name="iTrigger" Required="true" Internal="false" Comment="When this input becomes high, the camera makes a image"/>
		<Client Name="oTrigger" Required="false" Internal="false"/>
		<Client Name="Shape" Required="false" Internal="false"/>
		<Client Name="StringBase1" Required="true" Internal="true"/>
	</Channels>
	<Network Name="Wecube_Communication">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{2E0E0A09-4AB8-46B0-B325-FACC9D2D38E3}"
				Class      = "MachineBase"
				Position   = "(398,120)"
				Visualized = "true">
				<Channels>
					<Server Name="ObjectServer"/>
					<Server Name="RunningMode"/>
					<Server Name="Stepper"/>
				</Channels>
			</Object>
			<Object
				Name       = "IpAdresMetalDetector"
				GUID       = "{8C72F622-92BD-437F-90D1-21ED01A85AD6}"
				Class      = "StringRAM"
				Position   = "(270,780)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Data" Value="&quot;10.10.150.26&quot;"/>
					<Client Name="SingleRealloc" Value="1"/>
					<Client Name="UseFile"/>
				</Channels>
			</Object>
			<Object
				Name       = "StringBase1"
				GUID       = "{BC774177-33CD-4F98-9B34-C608FB7E9E03}"
				Class      = "StringBase"
				Position   = "(270,990)"
				Visualized = "true">
				<Channels>
					<Server Name="Command"/>
					<Server Name="ErrCntr"/>
					<Client Name="ToMsg"/>
					<Client Name="ToOsKernal"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.ObjectServer" Destination="_base.ObjectServer" Vertices="(1186,210),(1014,210),"/>
			<Connection Source="this.Stepper" Destination="_base.Stepper" Vertices="(1186,270),(1014,270),"/>
			<Connection Source="this.RunningMode" Destination="_base.RunningMode" Vertices="(1186,330),(1014,330),"/>
			<Connection Source="this.IpAdresMetalDetector" Destination="IpAdresMetalDetector.Data"/>
			<Connection Source="this.StringBase1" Destination="StringBase1.Command"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using MachineBase

Wecube_Communication : CLASS
: MachineBase
	TYPE
	  CMD_Command_Str : ARRAY [0..255] OF CHAR;  //! <Type Public="true" Name="CMD_Command_Str"/>
	  DIR_Command_Str : ARRAY [0..255] OF CHAR;  //! <Type Public="true" Name="DIR_Command_Str"/>
	  eMode :  //! <Type Public="true" Name="eMode"/>
	  (
	    eConfiguration,  //! <Type Comment="Adjustable by user&#13;&#10;" Name="eMode.eConfiguration"/>
	    eIdentification  //! <Type Comment="Not adjustable by user&#13;&#10;" Name="eMode.eIdentification"/>
	  )$UDINT;
	  ePositions :  //! <Type Public="true" Name="ePositions"/>
	  (
	    X_pos,
	    Y_pos,
	    R_pos
	  )$UDINT;
	  IpAdrStr : ARRAY [0..15] OF CHAR;  //! <Type Public="true" Name="IpAdrStr"/>
	  NAME_Command_Str : ARRAY [0..255] OF CHAR;
	  PATH_Command_Str : ARRAY [0..255] OF CHAR;
	  ReceiveArray : ARRAY [0..255] OF CHAR;  //! <Type Public="true" Name="ReceiveArray"/>
	  SendArray : ARRAY [0..40] OF CHAR;  //! <Type Public="true" Name="SendArray"/>
	  SendCommand :  //! <Type Public="true" Name="SendCommand"/>
	  (
	    No_Command:=0,
	    Give_Trigger,
	    Read_SerialNumber:=2,
	    Read_ProductionDate:=3,
	    Read_DeviceType:=4,
	    Check_State:=5,
	    Read_ProcessTime,
	    Read_Xpos,
	    Read_Ypos,
	    Read_XposArc,
	    Read_YposArc
	  )$UDINT;
	  StringArray : ARRAY [0..200] OF CHAR;  //! <Type Public="true" Name="StringArray"/>
	END_TYPE
  //Servers:
	__________ 	: SvrCh_DINT;
	IsOnline 	: SvrCh_DINT;
	LastCommand 	: SvrCh_SendCommand_PTofCls_Wecube_Communication;
	SerialNumber 	: SvrCh_DINT;
	DeviceType 	: SvrCh_DINT;
	ProductionDate 	: SvrCh_DINT;
	ProcessTime 	: SvrCh_DINT;
	_________ 	: SvrCh_DINT;
	DataComplete 	: SvrCh_DINT;
	Rposition 	: SvrCh_REAL;
	Xposition 	: SvrCh_REAL;
	Yposition 	: SvrCh_REAL;
	ProductShapeOk 	: SvrCh_DINT;
	___________ 	: SvrCh_DINT;
	TwistXandY 	: SvrCh_DINT;
	OffsetRposition 	: SvrCh_DINT;
	OffsetXposition 	: SvrCh_DINT;
	OffsetYposition 	: SvrCh_DINT;
  //Clients:
	IpAdresMetalDetector 	: CltChCmd_StringRAM;
	StringBase1 	: CltChCmd_StringBase;
	_TCPIP_CLIENT2 	: CltChCmd__TCPIP_CLIENT;
	iTrigger 	: CltCh_DINT;
	oTrigger 	: CltCh_DINT;
	Shape 	: CltCh_DINT;
  //Variables:
		IpAdres 	: IpAdrStr;
		Handle 	: DINT;
		DataArray : ARRAY [0..255] OF CHAR;

		StartConverting 	: DINT;
		SendingData : ARRAY [0..500] OF CHAR;

		ReceivingData 	: ReceiveArray;
		OldReceivingData 	: ReceiveArray;
		TmrCheckState 	: UDINT;
		InlogCommand 	: SendCommand;
		StringLenght 	: UDINT;
		CMD_DataStr 	: CMD_Command_Str;
		DIR_DataStr 	: DIR_Command_Str;
		NAME_DataStr 	: NAME_Command_Str;
		PATH_DataStr 	: PATH_Command_Str;
		SearchChar 	: CHAR;
		ReadXpos 	: REAL;
		ReadYpos 	: REAL;
		ProductAngleRAD 	: REAL;
		ReadXposArc 	: REAL;
		ReadYposArc 	: REAL;
		LenghtDiargonalLine 	: REAL;
		PixelTomm 	: REAL;
		WecubeBits : BDINT
		[
		  1 New_Receive,
		  2 Wait_For_New_Data,
		];

		Command 	: SendCommand;
		TmrCheckNewData 	: UDINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL MyInit;
	
	FUNCTION VIRTUAL GLOBAL MyCyTask;
	
	FUNCTION GLOBAL SendData
		VAR_INPUT
			Command 	: SendCommand;
		END_VAR
		VAR_OUTPUT
			Retcode 	: DINT;
		END_VAR;
	
	FUNCTION GLOBAL ReadData
		VAR_INPUT
			ReceivingDataStr 	: ReceiveArray;
			Command 	: SendCommand;
		END_VAR;
	
	FUNCTION GLOBAL MyCallBack
		VAR_INPUT
			pData 	: ^void;
			udSize 	: UDINT;
		END_VAR;
	
	FUNCTION MakeCommand
		VAR_INPUT
			Mode 	: eMode;
			DIR_Command 	: DIR_Command_Str;
			CMD_Command 	: CMD_Command_Str;
			NAME_Command 	: NAME_Command_Str;
			PATH_Command 	: PATH_Command_Str;
		END_VAR
		VAR_OUTPUT
			StrArray 	: StringArray;
		END_VAR;
	
	FUNCTION GLOBAL GetPositions
		VAR_OUTPUT
			Position 	: CameraScanStr;
		END_VAR;
	
	FUNCTION GLOBAL ReadTrigger
		VAR_OUTPUT
			State 	: DINT;
		END_VAR;
	
	FUNCTION GLOBAL ResetData;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using StringBase
#pragma using StringRAM
#pragma usingLtd _TCPIP_CLIENT


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB Wecube_Communication::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_WECUBE_COMMUNICATION
2$UINT, 0$UINT, (SIZEOF(::Wecube_Communication))$UINT, 
18$UINT, 6$UINT, 0$UINT, 
TO_UDINT(1463120432), "Wecube_Communication", //Class
TO_UDINT(3119722310), "MachineBase", 0$UINT, 0$UINT, //Baseclass
//Servers:
(::Wecube_Communication.__________.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(705157791), "__________", 
(::Wecube_Communication.IsOnline.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2663722314), "IsOnline", 
(::Wecube_Communication.LastCommand.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1895636325), "LastCommand", 
(::Wecube_Communication.SerialNumber.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3922312216), "SerialNumber", 
(::Wecube_Communication.DeviceType.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(550799733), "DeviceType", 
(::Wecube_Communication.ProductionDate.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2808059543), "ProductionDate", 
(::Wecube_Communication.ProcessTime.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2470317076), "ProcessTime", 
(::Wecube_Communication._________.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1738242946), "_________", 
(::Wecube_Communication.DataComplete.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3340119743), "DataComplete", 
(::Wecube_Communication.Rposition.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1603328654), "Rposition", 
(::Wecube_Communication.Xposition.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3401469968), "Xposition", 
(::Wecube_Communication.Yposition.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3720692819), "Yposition", 
(::Wecube_Communication.ProductShapeOk.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1834515703), "ProductShapeOk", 
(::Wecube_Communication.___________.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1229728487), "___________", 
(::Wecube_Communication.TwistXandY.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(568031807), "TwistXandY", 
(::Wecube_Communication.OffsetRposition.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(137337973), "OffsetRposition", 
(::Wecube_Communication.OffsetXposition.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(2634094315), "OffsetXposition", 
(::Wecube_Communication.OffsetYposition.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(2323251880), "OffsetYposition", 
//Clients:
(::Wecube_Communication.IpAdresMetalDetector.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1963284962), "IpAdresMetalDetector", TO_UDINT(2408581120), "StringRAM", 1$UINT, 10$UINT, 
(::Wecube_Communication.StringBase1.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3851073503), "StringBase1", TO_UDINT(1348707034), "StringBase", 1$UINT, 14$UINT, 
(::Wecube_Communication._TCPIP_CLIENT2.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1392193991), "_TCPIP_CLIENT2", TO_UDINT(2629403047), "_TCPIP_CLIENT", 1$UINT, 15$UINT, 
(::Wecube_Communication.iTrigger.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(3954321558), "iTrigger", 
(::Wecube_Communication.oTrigger.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(769466641), "oTrigger", 
(::Wecube_Communication.Shape.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(711212392), "Shape", 
END_FUNCTION


#define USER_CNT_Wecube_Communication 5

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_Wecube_Communication] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION Wecube_Communication::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= MachineBase::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= MachineBase::ObjectServer.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, MachineBase::ObjectServer.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_Wecube_Communication;
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #MyInit();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[2]		:= #MyCyTask();

#pragma warning (default : 74)
	MachineBase::ObjectServer.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF MachineBase::ObjectServer.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	IsOnline.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF IsOnline.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	TwistXandY.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF TwistXandY.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	OffsetRposition.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF OffsetRposition.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	OffsetXposition.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF OffsetXposition.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	OffsetYposition.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF OffsetYposition.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL Wecube_Communication::MyInit

  // Build a communication
  if _FirstScan = 1 then
    PixelTomm    := 3.19; // convert pixels to mm
    InlogCommand := No_Command; 
    IpAdresMetalDetector.ReadDataOff(udOff:= 0, pData:= #IpAdres$Usint, udMax := sizeof(IpAdrStr));
    IpAdres[15] := cNul;
    Handle := _TCPIP_CLIENT2.AddConnection( pIPAddress    := #IpAdres$Usint
                                          , pCallbackThis := this
                                          , pCallbackMeth := #MyCallBack()
                                          , udTimeout     := 0);
  end_if; 

END_FUNCTION

FUNCTION VIRTUAL GLOBAL Wecube_Communication::MyCyTask

  // Check if is online
  _TCPIP_CLIENT2.CyWork(0);
  IsOnline := _TCPIP_CLIENT2.IsConnected(dHandle:= Handle);

  // Read inputs
  iTrigger  := iTrigger.Read();
  shape     := Shape.Read();
  oTrigger.Write(input:= iTrigger);


  // When connection is established -> send commands
  if IsOnline = 1 then
    
    // Check for statussen
    if Command = No_Command then
      if WecubeBits.Wait_For_New_Data = 0 then // Wait for new data
        if SerialNumber = 0 then
          Command := Read_SerialNumber;
        elsif DeviceType = 0 then
          Command := Read_DeviceType;
        elsif ProductionDate = 0 then
          Command := Read_ProductionDate;
        elsif Standaard.R_TRIG(CLK:= iTrigger) then
          ProductShapeOk := 0;
          Command := Give_Trigger;
        elsif ReadXpos = 0 & (LastCommand = Give_Trigger) then
          Command := Read_Xpos;
        elsif ReadYpos = 0 & ReadXpos <> 0 & (LastCommand = Read_Xpos) then  
          Command := Read_Ypos;
        elsif ReadYpos <> 0 then
          ProductShapeOk   := (Shape = 1);
          DataComplete := 1;
          ReadXpos := ReadYpos := 0;
          Command  := Read_ProcessTime;
        end_if;
      end_if;
    else // Send command, and check if sending went OK
      if SendData(Command:= Command) = 0 then 
        Command := No_Command;
        WecubeBits.Wait_For_New_Data := 1;
      end_if;
    end_if;
  end_if;
  
  
  // if there is no new data for 2 seconds.. reset bit
  if WecubeBits.Wait_For_New_Data = 1 then
    if (ops.tAbsolute - TmrCheckNewData) >= 2000 then
      WecubeBits.Wait_For_New_Data := 0;
    end_if;
  else
    TmrCheckNewData := ops.tAbsolute;
  end_if;
  
  

  // When command is send, check what we receive
  if WecubeBits.New_Receive = 1 then
    ReadData(ReceivingDataStr := ReceivingData, Command:= LastCommand);
    WecubeBits.New_Receive := 0;
    WecubeBits.Wait_For_New_Data := 0;
  end_if;

END_FUNCTION

FUNCTION GLOBAL Wecube_Communication::MyCallBack
	VAR_INPUT
		pData 	: ^void;
		udSize 	: UDINT;
	END_VAR

  // Check array
  if udSize > sizeof(ReceivingData) then
    udSize := sizeof(ReceivingData);
  end_if;
   
  // Data received 
  _memset(dest:= #ReceivingData[0], usByte:= 0, cntr:= sizeof(ReceiveArray));
  _memcpy(ptr1:= #ReceivingData[0], ptr2:= pData, cntr:= udSize);  

  WecubeBits.New_Receive := 1;
    
END_FUNCTION

FUNCTION GLOBAL Wecube_Communication::SendData
	VAR_INPUT
		Command 	: SendCommand;
	END_VAR
	VAR_OUTPUT
		Retcode 	: DINT;
	END_VAR
  VAR
//    SizeOfTextArray   : Dint;
  END_VAR

  // Set ini
  Retcode := -1;

  // First reset array's 
  _memset(#CMD_DataStr, 0, sizeof(CMD_DataStr)); // Set array to '0'
  _memset(#DIR_DataStr, 0, sizeof(DIR_DataStr)); // Set array to '0'
  _memset(#SendingData, 0, sizeof(SendingData)); // Set array to '0'
  _memset(#NAME_DataStr, 0, sizeof(NAME_DataStr)); // Set array to '0'
  _memset(#PATH_DataStr, 0, sizeof(PATH_DataStr)); // Set array to '0'

  LastCommand := Command; 
  
  // Make Sendcommand
  case Command of  
    Give_Trigger:
      // <LIMA DIR="Request" CMD="Device_Trigger"/>
    
    Read_SerialNumber:
      // <LIMA DIR="Request" CMD="Identification_Get" NAME="SerialNumber"/>
      _strcat(dest:= #DIR_DataStr[0], src:= "Request");
      _strcat(dest:= #CMD_DataStr[0], src:= "Identification_Get");
      _strcat(dest:= #NAME_DataStr[0], src:= "SerialNumber");
      SendingData$StringArray := MakeCommand(Mode:= eMode::eIdentification, DIR_Command:= DIR_DataStr, CMD_Command:= CMD_DataStr , NAME_Command:= NAME_DataStr, PATH_Command:= PATH_DataStr);
    
    Read_ProductionDate:
      // <LIMA DIR="Request" CMD="Identification_Get" NAME="ProductionDate"/>
      _strcat(dest:= #DIR_DataStr[0], src:= "Request");
      _strcat(dest:= #CMD_DataStr[0], src:= "Identification_Get");
      _strcat(dest:= #NAME_DataStr[0], src:= "ProductionDate");
      SendingData$StringArray := MakeCommand(Mode:= eMode::eIdentification, DIR_Command:= DIR_DataStr, CMD_Command:= CMD_DataStr , NAME_Command:= NAME_DataStr, PATH_Command:= PATH_DataStr);
    
    Read_DeviceType:
      // <LIMA DIR="Request" CMD="Identification_Get" NAME="ProductionDate"/>
      _strcat(dest:= #DIR_DataStr[0], src:= "Request");
      _strcat(dest:= #CMD_DataStr[0], src:= "Identification_Get");
      _strcat(dest:= #NAME_DataStr[0], src:= "DeviceType");      
      SendingData$StringArray := MakeCommand(Mode:= eMode::eIdentification, DIR_Command:= DIR_DataStr, CMD_Command:= CMD_DataStr , NAME_Command:= NAME_DataStr, PATH_Command:= PATH_DataStr);
 
    Check_State:
      // <LIMA DIR="Request" CMD="Device_GetState"/>
      _strcat(dest:= #DIR_DataStr[0], src:= "Request");
      _strcat(dest:= #CMD_DataStr[0], src:= "Device_GetState");
      SendingData$StringArray := MakeCommand(Mode:= eMode::eIdentification, DIR_Command:= DIR_DataStr, CMD_Command:= CMD_DataStr , NAME_Command:= NAME_DataStr, PATH_Command:= PATH_DataStr);
    
    Read_Xpos:
      // <LIMA CMD="Project_GetNode" DIR="Request" PATH="Module Application.Module Coordinate System.Construction Method.Algorithm Point 2.Segment on Circle.Search Ray.Center.X [px]"/>
      _strcat(dest:= #CMD_DataStr[0], src:= "Project_GetNode");
      _strcat(dest:= #DIR_DataStr[0], src:= "Request");
      _strcat(dest:= #PATH_DataStr[0], src:= "Module Application.Module Cluster.Cluster List.Cluster #1.Center of Gravity.X [px]");
      SendingData$StringArray := MakeCommand(Mode:= eMode::eConfiguration, DIR_Command:= DIR_DataStr, CMD_Command:= CMD_DataStr , NAME_Command:= NAME_DataStr, PATH_Command:= PATH_DataStr);

    Read_Ypos:
      // <LIMA CMD="Project_GetNode" DIR="Request" PATH="Module Application.Module Coordinate System.Construction Method.Algorithm Point 2.Segment on Circle.Search Ray.Center.Y [px]/>
      _strcat(dest:= #CMD_DataStr[0], src:= "Project_GetNode");
      _strcat(dest:= #DIR_DataStr[0], src:= "Request");
      _strcat(dest:= #PATH_DataStr[0], src:= "Module Application.Module Cluster.Cluster List.Cluster #1.Center of Gravity.Y [px]");
      SendingData$StringArray := MakeCommand(Mode:= eMode::eConfiguration, DIR_Command:= DIR_DataStr, CMD_Command:= CMD_DataStr , NAME_Command:= NAME_DataStr, PATH_Command:= PATH_DataStr);
  
    Read_XposArc:
      // <LIMA CMD="Project_GetNode" DIR="Request" PATH="Module Application.Module Coordinate System.Construction Method.Algorithm Point 2.Segment on Circle.Segment List.Segment #1.Middle of Arc.X [px]/>
      _strcat(dest:= #CMD_DataStr[0], src:= "Project_GetNode");
      _strcat(dest:= #DIR_DataStr[0], src:= "Request");
      _strcat(dest:= #PATH_DataStr[0], src:= "Module Application.Module Coordinate System.Construction Method.Algorithm Point 2.Segment on Circle.Segment List.Segment #2.Middle of Arc.X [px]");
      SendingData$StringArray := MakeCommand(Mode:= eMode::eConfiguration, DIR_Command:= DIR_DataStr, CMD_Command:= CMD_DataStr , NAME_Command:= NAME_DataStr, PATH_Command:= PATH_DataStr);

    Read_YposArc:
      // <LIMA CMD="Project_GetNode" DIR="Request" PATH="Module Application.Module Coordinate System.Construction Method.Algorithm Point 2.Segment on Circle.Segment List.Segment #1.Middle of Arc.Y [px]/>
      _strcat(dest:= #CMD_DataStr[0], src:= "Project_GetNode");
      _strcat(dest:= #DIR_DataStr[0], src:= "Request");
      _strcat(dest:= #PATH_DataStr[0], src:= "Module Application.Module Coordinate System.Construction Method.Algorithm Point 2.Segment on Circle.Segment List.Segment #2.Middle of Arc.Y [px]");
      SendingData$StringArray := MakeCommand(Mode:= eMode::eConfiguration, DIR_Command:= DIR_DataStr, CMD_Command:= CMD_DataStr , NAME_Command:= NAME_DataStr, PATH_Command:= PATH_DataStr);

    Read_ProcessTime:
      // <LIMA CMD="Project_GetNode" DIR="Request" PATH="Module application.Process Time [ms]"/>
      _strcat(dest:= #CMD_DataStr[0], src:= "Project_GetNode");
      _strcat(dest:= #DIR_DataStr[0], src:= "Request");
      _strcat(dest:= #PATH_DataStr[0], src:= "Module Application.Process Time [ms]");
      SendingData$StringArray := MakeCommand(Mode:= eMode::eConfiguration, DIR_Command:= DIR_DataStr, CMD_Command:= CMD_DataStr , NAME_Command:= NAME_DataStr, PATH_Command:= PATH_DataStr);
  end_case;

  StringLenght  := _strlen(#sendingData[0]);
  Retcode       := _TCPIP_CLIENT2.SendData(pData:= #SendingData[0], udSize:= StringLenght, dHandle:= Handle, bDirect:= 0);  

END_FUNCTION	

FUNCTION GLOBAL Wecube_Communication::ReadData
	VAR_INPUT
		ReceivingDataStr 	: ReceiveArray;
		Command 	: SendCommand;
	END_VAR
  VAR
    i                 : Dint;  
    xx                : Dint;
//    DataLength        : uDint;
    ConvData          : Real;
  END_VAR
  
  
  // Reading the data
  SearchChar := '"';
  for i := to_dint(StringLenght) to (sizeof(ReceiveArray) - 1) do
    if (ReceivingDataStr[i] = SearchChar) & StartConverting = 0 then // First character is " " "
      StartConverting := 1;
      xx := 0;
    elsif ReceivingDataStr[i] = SearchChar then // Last character is "Space"
      ConvData := to_real(StringBase1.ConvAscii2Value(pSource:= #DataArray[0], Digit:= 0));
      _memset(#DataArray, 0, sizeof(DataArray)); // Set array to '0'
      i := sizeof(ReceiveArray);
      xx := 0;
      StartConverting := 0;
    elsif StartConverting = 1 then
      DataArray[xx] := ReceivingDataStr[i];
      if xx < 10 then
        xx += 1; 
      end_if; 
    end_if;
  end_for;
  
  // Read command
  case Command of     
    Read_SerialNumber:
      SerialNumber      := to_dint(ConvData);

    Read_DeviceType:
      DeviceType        := to_dint(ConvData);
      
    Read_ProductionDate:
      ProductionDate    := to_dint(ConvData);
      
    Read_ProcessTime:
      ProcessTime       := to_dint(ConvData);
      
    Read_Xpos: 
      Yposition       := ((ConvData /1000000) / PixelTomm); // in wenglor is dit dit x possition
      ReadXpos        := 1;
   
    Read_Ypos:
      Xposition       := ((ConvData /1000000) / PixelTomm); // in wenglor is dit dit y possition
      ReadYpos        := 1;

  end_case;
    
END_FUNCTION

FUNCTION Wecube_Communication::MakeCommand
	VAR_INPUT
		Mode 	: eMode;
		DIR_Command 	: DIR_Command_Str;
		CMD_Command 	: CMD_Command_Str;
		NAME_Command 	: NAME_Command_Str;
		PATH_Command 	: PATH_Command_Str;
	END_VAR
	VAR_OUTPUT
		StrArray 	: StringArray;
	END_VAR
  VAR
    ZeroArray         : ARRAY[0..200] OF CHAR;
  END_VAR

  // Set strArray to zero
  _memset(#StrArray, 0, sizeof(StrArray)); // Set array to '0'
  _memset(#ZeroArray, 0, sizeof(ZeroArray)); // Set array to '0'
  
  // Not adjustable by user
  if Mode = eMode::eIdentification then
    _strcat(dest:= #StrArray[0], src:= "<LIMA DIR=");
    _strcat(dest:= #StrArray[0], src:= #SearchChar);
    _strcat(dest:= #StrArray[0], src:= #DIR_Command[0]);
    _strcat(dest:= #StrArray[0], src:= #SearchChar);
    _strcat(dest:= #StrArray[0], src:= " CMD=");
    _strcat(dest:= #StrArray[0], src:= #SearchChar);
    _strcat(dest:= #StrArray[0], src:= #CMD_Command[0]);
    _strcat(dest:= #StrArray[0], src:= #SearchChar);
    
    if _memcmp(ptr1:= #NAME_Command, ptr2:= #ZeroArray, cntr:= sizeof(_ASCII)) = 0 then
      _strcat(dest:= #StrArray[0], src:= "/>");
    else
      _strcat(dest:= #StrArray[0], src:= " NAME=");
      _strcat(dest:= #StrArray[0], src:= #SearchChar);
      _strcat(dest:= #StrArray[0], src:= #NAME_Command[0]);
      _strcat(dest:= #StrArray[0], src:= #SearchChar);
      _strcat(dest:= #StrArray[0], src:= "/>");
    end_if;

  // Adjustable by user
  elsif Mode = eMode::eConfiguration then
    _strcat(dest:= #StrArray[0], src:= "<LIMA CMD=");
    _strcat(dest:= #StrArray[0], src:= #SearchChar);
    _strcat(dest:= #StrArray[0], src:= #CMD_Command[0]);
    _strcat(dest:= #StrArray[0], src:= #SearchChar);
    _strcat(dest:= #StrArray[0], src:= " DIR=");
    _strcat(dest:= #StrArray[0], src:= #SearchChar);
    _strcat(dest:= #StrArray[0], src:= #DIR_Command[0]);
    _strcat(dest:= #StrArray[0], src:= #SearchChar);
    _strcat(dest:= #StrArray[0], src:= " PATH=");
    _strcat(dest:= #StrArray[0], src:= #SearchChar);
    _strcat(dest:= #StrArray[0], src:= #PATH_Command[0]);
    _strcat(dest:= #StrArray[0], src:= #SearchChar);
    _strcat(dest:= #StrArray[0], src:= "/>");
  end_if;

END_FUNCTION

FUNCTION GLOBAL Wecube_Communication::GetPositions
	VAR_OUTPUT
		Position 	: CameraScanStr;
	END_VAR

  Position.ScanCode := ProductShapeOk$CameraScanStr.ScanCode;
  Position.PosXas   := to_dint(Xposition * 1000.0);
  Position.PosYas   := to_dint(Yposition * 1000.0);
  Position.PosRas   := to_dint(Rposition * 1000.0);

END_FUNCTION

FUNCTION GLOBAL Wecube_Communication::ReadTrigger
	VAR_OUTPUT
		State 	: DINT;
	END_VAR
  
  State := iTrigger; 

END_FUNCTION

FUNCTION GLOBAL Wecube_Communication::ResetData

  // Reset data from camera
  DataComplete := 0;
  Xposition    := 0;
  Yposition    := 0;
  Rposition    := 0;

END_FUNCTION

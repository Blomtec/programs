//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "PositionFilterIFC"
	Revision           = "1.0"
	GUID               = "{E5AC295F-20DE-4E7B-B91C-6548968B8353}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(450,240)">
	<Channels>
		<Server Name="TriggerFilter" GUID="{81479EE2-D33F-441A-A794-7D9E7C9CA3E6}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Client Name="iFilterTime" Required="false" Internal="false"/>
		<Client Name="iLineSpeed" Required="false" Internal="false"/>
		<Client Name="iMaskTime" Required="false" Internal="false"/>
		<Client Name="iTrigger" Required="true" Internal="false"/>
		<Client Name="Saved_FilterTime" Required="true" Internal="true"/>
		<Client Name="Saved_LineSpeed" Required="true" Internal="true"/>
		<Client Name="Saved_MaskTime" Required="true" Internal="true"/>
		<Client Name="STD" Required="true" Internal="true"/>
	</Channels>
	<Network Name="PositionFilterIFC">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "Saved_FilterTime"
				GUID       = "{A473EE7D-792D-466C-AA08-FAC16974CC8A}"
				Class      = "Ram"
				Position   = "(270,540)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Data"/>
				</Channels>
			</Object>
			<Object
				Name       = "Saved_LineSpeed"
				GUID       = "{23B488E2-7E32-4E7A-B9DB-2DE373E96FE1}"
				Class      = "Ram"
				Position   = "(270,390)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Data"/>
				</Channels>
			</Object>
			<Object
				Name       = "Saved_MaskTime"
				GUID       = "{1B636EC3-8791-484F-B22D-308DB32E9115}"
				Class      = "Ram"
				Position   = "(270,690)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Data"/>
				</Channels>
			</Object>
			<Object
				Name           = "STD"
				GUID           = "{C3D131B2-7D51-4186-A3EF-B73427DA1DC8}"
				Class          = "Standard"
				Position       = "(270,240)"
				Visualized     = "false"
				BackgroundTime = "1000 ms">
				<Channels>
					<Server Name="ClassSvr"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.STD" Destination="STD.ClassSvr"/>
			<Connection Source="this.Saved_LineSpeed" Destination="Saved_LineSpeed.Data"/>
			<Connection Source="this.Saved_FilterTime" Destination="Saved_FilterTime.Data"/>
			<Connection Source="this.Saved_MaskTime" Destination="Saved_MaskTime.Data"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
PositionFilterIFC : CLASS
  //Servers:
	TriggerFilter 	: SvrChCmd_DINT;
  //Clients:
	iTrigger 	: CltChCmd_TestPositionTrigger;
	STD 	: CltChCmd_Standard;
	iMaskTime 	: CltCh_DINT;
	iFilterTime 	: CltCh_DINT;
	Saved_LineSpeed 	: CltChCmd_Ram;
	Saved_FilterTime 	: CltChCmd_Ram;
	Saved_MaskTime 	: CltChCmd_Ram;
	iLineSpeed 	: CltCh_DINT;
  //Variables:
		udFilterTime 	: UDINT;
		MaskTime 	: DINT;
		LineSpeed 	: REAL;
		DistanceFilterTime 	: REAL;
		NewFilterTime 	: DINT;
		DistanceMaskTime 	: REAL;
		NewMaskTime 	: DINT;
		TriggerInfo 	: TriggerStr;
  //Functions:
	
	FUNCTION GLOBAL ReadTrigger
		VAR_OUTPUT
			State 	: TriggerStr;
		END_VAR;
	
	FUNCTION GLOBAL CheckTimes;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using Ram
#pragma using Standard
#pragma usingLtd TestPositionTrigger


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB PositionFilterIFC::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_POSITIONFILTERIFC
1$UINT, 0$UINT, (SIZEOF(::PositionFilterIFC))$UINT, 
1$UINT, 8$UINT, 0$UINT, 
TO_UDINT(3122247907), "PositionFilterIFC", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::PositionFilterIFC.TriggerFilter.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(2522777508), "TriggerFilter", 
//Clients:
(::PositionFilterIFC.iTrigger.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3954321558), "iTrigger", TO_UDINT(2570117329), "TestPositionTrigger", 1$UINT, 1$UINT, 
(::PositionFilterIFC.STD.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1054692386), "STD", TO_UDINT(3603188683), "Standard", 6$UINT, 1$UINT, 
(::PositionFilterIFC.iMaskTime.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(429961711), "iMaskTime", 
(::PositionFilterIFC.iFilterTime.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(3955024802), "iFilterTime", 
(::PositionFilterIFC.Saved_LineSpeed.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3223679930), "Saved_LineSpeed", TO_UDINT(1903583397), "Ram", 1$UINT, 3$UINT, 
(::PositionFilterIFC.Saved_FilterTime.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(4099728780), "Saved_FilterTime", TO_UDINT(1903583397), "Ram", 1$UINT, 3$UINT, 
(::PositionFilterIFC.Saved_MaskTime.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(699509902), "Saved_MaskTime", TO_UDINT(1903583397), "Ram", 1$UINT, 3$UINT, 
(::PositionFilterIFC.iLineSpeed.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(4204802921), "iLineSpeed", 
END_FUNCTION


#define USER_CNT_PositionFilterIFC 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_PositionFilterIFC] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION PositionFilterIFC::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR

	ret_code := C_OK;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION GLOBAL PositionFilterIFC::ReadTrigger
	VAR_OUTPUT
		State 	: TriggerStr;
	END_VAR
  
  // Read trigger info
  TriggerInfo := iTrigger.ReadTrigger();
  
  // Check mask/filter time with linespeed
  CheckTimes();
  
  
  // filtertijd
  // Het product moet een minimale tijdsduur hoog zijn voordat het pas echt een puls wordt
  // Anders is het vuil / afval 
  if TriggerInfo.TriggerState = 1 then
    if (ops.tAbsolute - udFilterTime) >= to_udint(iFilterTime) then
      TriggerFilter := 1;
    end_if; 
  else
    udFilterTime := ops.tAbsolute;
  end_if;

  // minimaal hooghouden van signaal
  if iMaskTime <= 100 then
    MaskTime := 100;
  else
    MaskTime := iMaskTime; 
  end_if;
  if STD.TON(IN:= TriggerFilter, PT:= MaskTime) then // hou 100ms hoog
    TriggerFilter := 0;
  end_if;

  // Set TriggerInfo 
  State.TriggerState  := TriggerFilter;
  State.PositionState := TriggerInfo.PositionState;

END_FUNCTION

FUNCTION GLOBAL PositionFilterIFC::CheckTimes

  // Read inputs
  iMaskTime   := iMaskTime.Read();
  iFilterTime := iFilterTime.Read();
  iLineSpeed  := iLineSpeed.Read();

  // Save changes
  if iFilterTime <> Saved_FilterTime.Read() then
    Saved_FilterTime.Write(input:= iFilterTime);
    Saved_LineSpeed.Write(input:= to_dint LineSpeed);
  elsif iMaskTime <> Saved_MaskTime.Read() then
    Saved_MaskTime.Write(input:= iMaskTime);
    Saved_LineSpeed.Write(input:= to_dint LineSpeed);
  elsif (LineSpeed <> Saved_LineSpeed.Read()) & (LineSpeed > 10) then // Change filter and mask time, only when speed is higher than 1.0 m/min  
    DistanceFilterTime := (to_real iFilterTime * Saved_LineSpeed.Read());
    NewFilterTime      := to_dint(DistanceFilterTime / to_real LineSpeed); 
    
    DistanceMaskTime   := (to_real iMaskTime * Saved_LineSpeed.Read());
    NewMaskTime        := to_dint(DistanceMaskTime / to_real LineSpeed); 
    
    Saved_FilterTime.Write(input:= NewFilterTime);
    iFilterTime.Write(input:= NewFilterTime);
    Saved_MaskTime.Write(input:= NewMaskTime);
    iMaskTime.Write(input:= NewMaskTime);
    Saved_LineSpeed.Write(input:= to_dint LineSpeed);
  end_if;

END_FUNCTION
//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "CheckData"
	Revision           = "0.0"
	GUID               = "{90B32113-89DE-4B6B-8008-ED39BEA55BFF}"
	RealtimeTask       = "true"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(630,360)">
	<Channels>
		<Server Name="Center_Pos_InfeedConv" GUID="{D1695C87-467A-47E3-BFB8-17A03DF61EEF}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="Comm" GUID="{73A2FC9F-7561-40E7-BCF2-9836A465E2FB}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="DataCompleted" GUID="{C7D3341C-C8C2-43DA-8C82-B7BA718F53A7}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="NbrOfTriggers" GUID="{5AF20D6F-3834-445C-902F-94CFD0E2758E}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="X_Deviation" GUID="{04F1A85B-465E-4852-95B8-2E4954632ED5}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="File" Comment="The X-deviation in mm"/>
		<Server Name="Y_Deviation" GUID="{019EBED1-0670-44A2-AC56-6D9C6F69A860}" Visualized="false" Initialize="true" WriteProtected="false" Retentive="File" Comment="The Y-deviation in mm"/>
		<Client Name="Comm_CameraConn" Required="true" Internal="false"/>
		<Client Name="Standard1" Required="true" Internal="true"/>
	</Channels>
	<Separators>
		<Servers>
			<SepChn Position="4"/>
		</Servers>
	</Separators>
	<Network Name="CheckData">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name           = "Standard1"
				GUID           = "{5ADA0356-9D77-45E1-AEB3-71CFBEED8C61}"
				Class          = "Standard"
				Position       = "(150,270)"
				Visualized     = "false"
				BackgroundTime = "1000 ms">
				<Channels>
					<Server Name="ClassSvr"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.Standard1" Destination="Standard1.ClassSvr"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
CheckData : CLASS
  //Servers:
	Comm 	: SvrChCmd_DINT;
	NbrOfTriggers 	: SvrCh_DINT;
	DataCompleted 	: SvrCh_DINT;
	Center_Pos_InfeedConv 	: SvrCh_DINT;
	X_Deviation 	: SvrCh_DINT;
	Y_Deviation 	: SvrCh_DINT;
  //Clients:
	Comm_CameraConn 	: CltChCmd_Camera_Master;
	Standard1 	: CltChCmd_Standard;
  //Variables:
		CameraDataStr 	: CameraData;
		Bits : BDINT
		[
		  1 NewData,
		  2 DataOK,
		  3 Waste,
		];

  //Functions:
	
	FUNCTION VIRTUAL GLOBAL RtWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION GLOBAL MyInit;
	
	FUNCTION GLOBAL Check_Y
		VAR_OUTPUT
			Retcode 	: BOOL;
		END_VAR;
	
	FUNCTION GLOBAL Check_X
		VAR_OUTPUT
			Retcode 	: BOOL;
		END_VAR;
	
	FUNCTION GLOBAL Check_Valid
		VAR_OUTPUT
			Retcode 	: BOOL;
		END_VAR;
	
	FUNCTION GLOBAL GetData
		VAR_INPUT
			iData 	: ^void;
			TriggerType 	: eTriggerType;
		END_VAR
		VAR_OUTPUT
			pData 	: CameraData;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using Standard
#pragma usingLtd Camera_Master


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB CheckData::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_CHECKDATA
0$UINT, 0$UINT, (SIZEOF(::CheckData))$UINT, 
6$UINT, 2$UINT, 0$UINT, 
TO_UDINT(4052777147), "CheckData", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::CheckData.Comm.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(2660888151), "Comm", 
(::CheckData.NbrOfTriggers.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3681778395), "NbrOfTriggers", 
(::CheckData.DataCompleted.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4171944503), "DataCompleted", 
(::CheckData.Center_Pos_InfeedConv.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3596795364), "Center_Pos_InfeedConv", 
(::CheckData.X_Deviation.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(3548785149), "X_Deviation", 
(::CheckData.Y_Deviation.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(302577213), "Y_Deviation", 
//Clients:
(::CheckData.Comm_CameraConn.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2511401727), "Comm_CameraConn", TO_UDINT(3246862170), "Camera_Master", 2$UINT, 0$UINT, 
(::CheckData.Standard1.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2411475140), "Standard1", TO_UDINT(3603188683), "Standard", 6$UINT, 1$UINT, 
END_FUNCTION


#define USER_CNT_CheckData 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_CheckData] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION CheckData::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_CheckData, pCmd := #vmt.CmdTable);
	vmt.CmdTable.RtWork		:= #RtWork();
	Comm.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF Comm.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	X_Deviation.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF X_Deviation.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Y_Deviation.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Y_Deviation.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

FUNCTION GLOBAL CheckData::MyInit

  // Get number of triggers
  NbrOfTriggers += 1;
  
  if Center_Pos_InfeedConv = 0 then
    Center_Pos_InfeedConv := to_Dint(cYconveyorWidth / 2000.0);
  end_if;

END_FUNCTION

FUNCTION VIRTUAL GLOBAL CheckData::RtWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR
  
  
  // Check if we get data from camera
  if Comm_CameraConn.DataCompleted = 1 then
    CameraDataStr := Comm_CameraConn.GetData();
    Bits.NewData  := True;
  end_if;

  // if we get new data, check windows
  if Bits.NewData = True then
    if Check_Valid() = True & Check_X() = True & Check_Y() = True then
      Bits.DataOK := True;
    else
      Bits.Waste := True;
    end_if;
    Bits.NewData  := false;
    DataCompleted := 1;
  end_if;


  // Reset datacompleted bit after 100ms
  if standard1.TON(IN:= DataCompleted, PT:= 100) then
    DataCompleted := 0;
  end_if;

	state := READY;

END_FUNCTION

FUNCTION GLOBAL CheckData::Check_Y
	VAR_OUTPUT
		Retcode 	: BOOL;
	END_VAR
  VAR
  	Pos      : Dint;
    Y_Pos_OK : Dint;
  END_VAR

  // Set ini
  Retcode  := False;
  Y_pos_Ok := 0;
  
  
  // Calculate position of conveyor 1 and check window
  Pos := (CameraDataStr[1].Yposition + Center_Pos_InfeedConv);
  if Pos > ((cYAxles1CenterPosInfeedConv / cIntUnitsTo_mm) - Y_Deviation) & Pos < ((cYAxles1CenterPosInfeedConv / cIntUnitsTo_mm) + Y_Deviation) then 
    Y_Pos_OK += 1;
  end_if;
  // Calculate position of conveyor 2 and check window
  Pos := (CameraDataStr[2].Yposition + Center_Pos_InfeedConv);
  if Pos > ((cYAxles2CenterPosInfeedConv / cIntUnitsTo_mm) - Y_Deviation) & Pos < ((cYAxles2CenterPosInfeedConv / cIntUnitsTo_mm) + Y_Deviation) then 
    Y_Pos_OK += 1;
  end_if;
  // Calculate position of conveyor 3 and check window
  Pos := (CameraDataStr[3].Yposition + Center_Pos_InfeedConv);
  if Pos > ((cYAxles3CenterPosInfeedConv / cIntUnitsTo_mm) - Y_Deviation) & Pos < ((cYAxles3CenterPosInfeedConv / cIntUnitsTo_mm) + Y_Deviation) then 
    Y_Pos_OK += 1;
  end_if;
  // Calculate position of conveyor 4 and check window
  Pos := (CameraDataStr[4].Yposition + Center_Pos_InfeedConv);
  if Pos > ((cYAxles4CenterPosInfeedConv / cIntUnitsTo_mm) - Y_Deviation) & Pos < ((cYAxles4CenterPosInfeedConv / cIntUnitsTo_mm) + Y_Deviation) then 
    Y_Pos_OK += 1;
  end_if;

  
  // Check if Y_Pos_Ok counter is equal to number of burgers
  if Y_Pos_Ok >= MaxCameras then
    Retcode := True;
  end_if;

END_FUNCTION

FUNCTION GLOBAL CheckData::Check_X
	VAR_OUTPUT
		Retcode 	: BOOL;
	END_VAR
  VAR
  	i        : Dint;
    Min_Xpos : Dint;
    Max_Xpos : Dint;
  END_VAR

  // Set ini
  Retcode  := False;
  Min_Xpos := CameraDataStr[1].Xposition;
  Max_Xpos := CameraDataStr[1].Xposition;
  
  // Check lowest X-position
  for i := 1 to MaxCameras do 
    // Get smallest X position
    if CameraDataStr[i].Xposition < Min_Xpos then
      Min_Xpos := CameraDataStr[i].Xposition;
    end_if;
    // Get biggest X position
    if CameraDataStr[i].Xposition > Max_Xpos then
      Max_Xpos := CameraDataStr[i].Xposition;
    end_if;
  end_for;
  
  // Maximal difference between Maximal and Minimal is "X_Deviation"
  if Max_Xpos - Min_Xpos <= X_Deviation then
    Retcode := True;
  end_if;

END_FUNCTION

FUNCTION GLOBAL CheckData::Check_Valid
	VAR_OUTPUT
		Retcode 	: BOOL;
	END_VAR
  
  // Check if all data is present
  Retcode := true;

END_FUNCTION

FUNCTION GLOBAL CheckData::GetData
	VAR_INPUT
		iData 	: ^void;
		TriggerType 	: eTriggerType;
	END_VAR
	VAR_OUTPUT
		pData 	: CameraData;
	END_VAR 
   
  // The trigger classes can get their data from this class
  case TriggerType of
    eX_Trigger, eY_Trigger:
      if Bits.DataOk = true then
        //iCameraDataStr := CameraDataStr$^USINT;
        // _memcpy(ptr1:= iCameraDataStr, ptr2:= #CameraDataStr, cntr:= sizeof(CameraData));
      end_if;
      
    eWaste_Trigger:
      if Bits.Waste = true then
        // iCameraDataStr := CameraDataStr$^USINT;
        _memcpy(ptr1:= iData, ptr2:= #CameraDataStr, cntr:= sizeof(CameraData));
      end_if;
  end_case;

END_FUNCTION

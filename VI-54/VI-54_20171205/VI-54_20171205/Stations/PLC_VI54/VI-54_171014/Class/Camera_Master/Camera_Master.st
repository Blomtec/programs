//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "Camera_Master"
	Revision           = "2.0"
	GUID               = "{F212C8D1-921C-418D-B81E-0162C6F56540}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(630,120)">
	<Channels>
		<Server Name="DataCompleted" GUID="{98299804-B45F-4EA9-9F2E-D4361AC7AF59}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="IsOnline" GUID="{19132EAB-7855-49E5-86C4-DDC4E367B2E6}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="NbrOfTriggers" GUID="{726E2759-5D6C-47EB-9BC1-BDAA0E44A6CD}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="SendCommand" GUID="{B6739F8C-F76B-442E-883E-A4CCD213F8F7}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="TmrNewConnection" GUID="{2CB16AF0-C819-4B54-8E09-2E8CCE324935}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="File"/>
		<Client Name="_TCPIP_CLIENT2" Required="true" Internal="true"/>
		<Client Name="cPort" Required="true" Internal="false" Comment="port number ... must be connected or initialized"/>
		<Client Name="iFc_Trigger" Required="true" Internal="false"/>
		<Client Name="IpAdres" Required="true" Internal="true"/>
	</Channels>
	<Separators>
		<Servers>
			<SepChn Position="3"/>
			<SepChn Position="5"/>
		</Servers>
	</Separators>
	<Network Name="Camera_Master">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{9EB3C65D-5371-4EEC-89CF-2C3562C6B1DB}"
				Class      = "MachineBase"
				Position   = "(218,120)"
				Visualized = "true">
				<Channels>
					<Server Name="ObjectServer"/>
					<Server Name="RunningMode"/>
					<Server Name="Stepper"/>
				</Channels>
			</Object>
			<Object
				Name           = "_TCPIP_CLIENT2"
				GUID           = "{22A8A165-D244-425E-B968-39A2BD5D6A14}"
				Class          = "_TCPIP_CLIENT"
				Position       = "(210,660)"
				Visualized     = "false"
				CyclicTime     = "10 ms"
				BackgroundTime = "always">
				<Channels>
					<Server Name="Control"/>
					<Server Name="SemaName01"/>
					<Server Name="SemaName02"/>
					<Server Name="TaskName"/>
					<Client Name="cConfig"/>
					<Client Name="cMaxConnections" Value="0"/>
					<Client Name="co_MultiTask"/>
					<Client Name="co_SigCLib"/>
					<Client Name="co_StdLib"/>
					<Client Name="co_Task"/>
					<Client Name="cPort" Value="500"/>
					<Client Name="cSizeOfTXBuffer"/>
				</Channels>
			</Object>
			<Object
				Name       = "IpAdres"
				GUID       = "{4E4A4C4C-6792-4889-A64E-D4CA8CCCC44F}"
				Class      = "StringRAM"
				Position   = "(210,420)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Data" Value="&quot;10.10.150.26&quot;"/>
					<Client Name="SingleRealloc" Value="1"/>
					<Client Name="UseFile"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.ObjectServer" Destination="_base.ObjectServer" Vertices="(1006,210),(834,210),"/>
			<Connection Source="this.Stepper" Destination="_base.Stepper" Vertices="(1006,270),(834,270),"/>
			<Connection Source="this.RunningMode" Destination="_base.RunningMode" Vertices="(1006,330),(834,330),"/>
			<Connection Source="this.IpAdres" Destination="IpAdres.Data"/>
			<Connection Source="this._TCPIP_CLIENT2" Destination="_TCPIP_CLIENT2.Control"/>
			<Connection Source="_TCPIP_CLIENT2.cPort" Destination="this.cPort" Vertices="(210,750),(38,390),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using MachineBase

Camera_Master : CLASS
: MachineBase
	TYPE
	  IpAdrStr : ARRAY [0..15] OF CHAR;
	  SendCommands :  //! <Type Public="true" Name="SendCommands"/>
	  (
	    eNoCommand,
	    eReboot,
	    eRestart,
	    eTrigger
	  )$UDINT;
#pragma pack(push, 1)
	  SendStr : STRUCT
	    HeartBeat : BOOL;
	    Command : SendCommands;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
  //Servers:
	IsOnline 	: SvrCh_DINT;
	NbrOfTriggers 	: SvrCh_DINT;
	TmrNewConnection 	: SvrCh_UDINT;
	DataCompleted 	: SvrCh_DINT;
	SendCommand 	: SvrCh_SendCommands_PTofCls_Camera_Master;
  //Clients:
	IpAdres 	: CltChCmd_StringRAM;
	cPort 	: CltCh_DINT;
	_TCPIP_CLIENT2 	: CltChCmd__TCPIP_CLIENT;
	iFc_Trigger 	: CltChCmd_ProductTrigger;
  //Variables:
		Handle 	: DINT;
		Adress_TCP 	: IpAdrStr;
		CameraDataStr 	: CameraData;
		TmrDelay 	: UDINT;
		TmrHeartBeat 	: UDINT;
		CameraBits : BDINT
		[
		  1 SendStr,
		];

		SendData 	: SendStr;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL MyCyTask;
	
	FUNCTION GLOBAL MyCallBack
		VAR_INPUT
			pData 	: ^void;
			udSize 	: UDINT;
		END_VAR;
	
	FUNCTION GLOBAL GetData
		VAR_OUTPUT
			Ptr 	: CameraData;
		END_VAR;
	
	FUNCTION GLOBAL ResetData;
	
	FUNCTION GLOBAL gmSendData
		VAR_INPUT
			Data 	: ^void;
		END_VAR
		VAR_OUTPUT
			Retcode 	: BOOL;
		END_VAR;
	
	FUNCTION GLOBAL gmHeartBeat;
	
	FUNCTION GLOBAL gmTrigger;
	
	FUNCTION VIRTUAL GLOBAL SendCommand::Write
		VAR_INPUT
			input (EAX) 	: Camera_Master::SendCommands;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: Camera_Master::SendCommands;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using _TCPIP_CLIENT
#pragma using StringRAM
#pragma usingLtd ProductTrigger


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB Camera_Master::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_CAMERA_MASTER
2$UINT, 0$UINT, (SIZEOF(::Camera_Master))$UINT, 
5$UINT, 4$UINT, 0$UINT, 
TO_UDINT(3246862170), "Camera_Master", //Class
TO_UDINT(3119722310), "MachineBase", 0$UINT, 0$UINT, //Baseclass
//Servers:
(::Camera_Master.IsOnline.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2663722314), "IsOnline", 
(::Camera_Master.NbrOfTriggers.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3681778395), "NbrOfTriggers", 
(::Camera_Master.TmrNewConnection.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(2140101252), "TmrNewConnection", 
(::Camera_Master.DataCompleted.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4171944503), "DataCompleted", 
(::Camera_Master.SendCommand.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1697388831), "SendCommand", 
//Clients:
(::Camera_Master.IpAdres.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(566237280), "IpAdres", TO_UDINT(2408581120), "StringRAM", 1$UINT, 10$UINT, 
(::Camera_Master.cPort.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000110$UINT, TO_UDINT(2368846560), "cPort", 
(::Camera_Master._TCPIP_CLIENT2.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1392193991), "_TCPIP_CLIENT2", TO_UDINT(2629403047), "_TCPIP_CLIENT", 1$UINT, 15$UINT, 
(::Camera_Master.iFc_Trigger.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2256343536), "iFc_Trigger", TO_UDINT(1779225415), "ProductTrigger", 0$UINT, 0$UINT, 
END_FUNCTION


#define USER_CNT_Camera_Master 5

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_Camera_Master] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION Camera_Master::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= MachineBase::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= MachineBase::ObjectServer.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, MachineBase::ObjectServer.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_Camera_Master;
#pragma warning (disable : 74)
	vmt.UserFcts[2]		:= #MyCyTask();

#pragma warning (default : 74)
	MachineBase::ObjectServer.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF MachineBase::ObjectServer.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	TmrNewConnection.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF TmrNewConnection.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	DataCompleted.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF DataCompleted.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	SendCommand.pMeth			:= StoreMethod( #M_RD_DIRECT(), #SendCommand::Write() );
	IF SendCommand.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

FUNCTION VIRTUAL GLOBAL Camera_Master::MyCyTask

  _TCPIP_CLIENT2.CyWork(EAX:= 0);
  IsOnline := _TCPIP_CLIENT2.IsConnected(dHandle:= Handle);
  

  // Open methodes
  gmTrigger();
  gmHeartBeat();
  
  
  // Check for sending data
  if CameraBits.SendStr = true then
    if gmSendData(Data:= #SendData) = true then
      CameraBits.SendStr := False;
    end_if;
  end_if;
  
  
  case Stepper of
  00: // Check communication
    if IsOnline = false then
      Stepper += 1;
    end_if;
  
  01: // Make connection
    IpAdres.ReadDataOff(udOff:= 0, pData:= #Adress_TCP$Usint, udMax := sizeof(IpAdrStr));
    Adress_TCP[15] := cNul;
    Handle := _TCPIP_CLIENT2.AddConnection( pIPAddress    := "10.10.150.26",
                                            pCallbackThis := this,
                                            pCallbackMeth := #MyCallBack(),
                                            udTimeout     := 0);
    TmrDelay := ops.tAbsolute;
    Stepper += 1;
    
  02: // Check online state
    if IsOnline > 0 then
      TmrDelay := ops.tAbsolute;
    elsif (ops.tAbsolute - TmrDelay) >= TmrNewConnection then
      Stepper -= 1;
    end_if;
  end_case;
  

END_FUNCTION

FUNCTION GLOBAL Camera_Master::MyCallBack
	VAR_INPUT
		pData 	: ^void;
		udSize 	: UDINT;
	END_VAR

  // Set data into array
  _memset(dest:= #CameraDataStr, usByte:= 0, cntr:= sizeof(CameraData));
  _memcpy(ptr1:= #CameraDataStr, ptr2:= pData, cntr:= sizeof(CameraData));  
  
  // Set bit that we receive new data
  DataCompleted := 1;

END_FUNCTION

FUNCTION GLOBAL Camera_Master::GetData
	VAR_OUTPUT
		Ptr 	: CameraData;
	END_VAR

  Ptr := CameraDataStr;
  
  // Reset data after reading
  ResetData();

END_FUNCTION

FUNCTION GLOBAL Camera_Master::ResetData

  // Reset all the data
  DataCompleted     := 0;
  
  // Reset pointer
  _memset(dest:= #CameraDataStr, usByte:= 0, cntr:= sizeof(CameraData));

END_FUNCTION

FUNCTION GLOBAL Camera_Master::gmHeartBeat
  
  // Every second a heartbeat
  if (ops.tAbsolute - TmrHeartBeat) >= 1000 then
    SendData.HeartBeat  := (SendData.HeartBeat XOR 1);
    CameraBits.SendStr  := true;
    TmrHeartBeat        := ops.tAbsolute;
  end_if;

END_FUNCTION

FUNCTION GLOBAL Camera_Master::gmTrigger

  // Set trigger offset
  iFc_Trigger.SetTriggerOffset(State:= (RecipePtr^.Camera.TriggerOffset * cIntUnitsTo_mm));


  // Check trigger
  if Standaard.R_TRIG(CLK:= iFc_Trigger.OffsetTrigger()) then
    SendData.Command   := SendCommands::eTrigger;
    CameraBits.SendStr := True;
  end_if;

END_FUNCTION

FUNCTION VIRTUAL GLOBAL Camera_Master::SendCommand::Write
	VAR_INPUT
		input (EAX) 	: Camera_Master::SendCommands;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: Camera_Master::SendCommands;
	END_VAR

	SendCommand := input;
  
  SendData.Command   := SendCommand;
  CameraBits.SendStr := True;
  SendCommand        := SendCommands::eNoCommand;
  
	result := SendCommand;

END_FUNCTION

FUNCTION GLOBAL Camera_Master::gmSendData
	VAR_INPUT
		Data 	: ^void;
	END_VAR
	VAR_OUTPUT
		Retcode 	: BOOL;
	END_VAR
  
  // Set ini
  Retcode := False;

  // Send data
  if _TCPIP_CLIENT2.SendData(pData:= Data, udSize:=sizeof(Data), dHandle:=Handle, bDirect:=true) = 0 then
    Retcode := True;
  end_if;

END_FUNCTION

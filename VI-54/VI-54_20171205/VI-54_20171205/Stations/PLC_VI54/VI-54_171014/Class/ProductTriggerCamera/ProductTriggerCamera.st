//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "ProductTriggerCamera"
	Revision           = "0.0"
	GUID               = "{AD0BD066-2902-4B0D-9B95-D70823021B91}"
	RealtimeTask       = "true"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(870,120)">
	<Channels>
		<Server Name="__________" GUID="{862681A4-8D90-4DED-87E7-49ED65DCE6E9}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="___________" GUID="{6AE8BB90-1A5A-4D4C-9D7F-846A8619FEC2}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="ActProdPos" GUID="{A1433B69-64C3-445B-8C15-F5E44F92D611}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="Comm" GUID="{B6444D37-F94C-4093-8EA5-12C0E3C698CB}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="inpProductCntr" GUID="{782520E5-0341-440D-B898-926D539AF825}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="When the sensor is triggerd, the inpProductCntr will rise"/>
		<Server Name="MaxProdCntr" GUID="{B8B62FF8-05B0-4E85-BD6C-5F88A6E6A8D3}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="NewLookingBeltPos" GUID="{1FA1CEDF-906B-4070-81E7-2F366247C7B3}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="outProductCntr" GUID="{07F356B9-0ADF-497D-9354-F17FD413559A}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="When the TriggerOffset is gone, the outProductCntr will rise"/>
		<Server Name="OutputTrigger" GUID="{584204E0-A889-4892-BAAF-E6514D62BE9E}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="OutputTriggerTime" GUID="{D26BD54B-BE26-4ADA-BA41-5BAE994C8F9D}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="File"/>
		<Server Name="TriggerOffset" GUID="{FFFD3875-150B-40D3-94C2-E7941F0D2B02}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="TriggerType" GUID="{D87E62E3-4520-4537-B9B4-9E8CE0564621}" Visualized="true" Initialize="true" WriteProtected="true" Retentive="false"/>
		<Client Name="Comm_CameraCheckData" Required="true" Internal="false"/>
		<Client Name="EncPos" Required="true" Internal="false"/>
		<Client Name="inpCntr" Required="false" Internal="false"/>
		<Client Name="Motion" Required="true" Internal="false"/>
		<Client Name="Standard1" Required="true" Internal="true"/>
	</Channels>
	<Network Name="ProductTriggerCamera">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name           = "Standard1"
				GUID           = "{40BFC933-ED45-4638-9657-DBDE2119F44E}"
				Class          = "Standard"
				Position       = "(270,270)"
				Visualized     = "false"
				BackgroundTime = "1000 ms">
				<Channels>
					<Server Name="ClassSvr"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.Standard1" Destination="Standard1.ClassSvr"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
ProductTriggerCamera : CLASS
	TYPE
#pragma pack(push, 1)
	  OutInfoStr : STRUCT  //! <Type Public="true" Name="OutInfoStr"/>
	    TriggerState : DINT;
	    PositionState : DINT;
	    CameraData : CameraData;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  TriggerInfoStr : STRUCT  //! <Type Public="true" Name="TriggerInfoStr"/>
	    iFcBeltPos : DINT;
	    iOffsetBeltPos : DINT;
	    ProdNbr : DINT;
	    ProdGescand : DINT;
	    ProdPos : DINT;
	    CameraData : CameraData;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
  //Servers:
	Comm 	: SvrChCmd_DINT;
	TriggerType 	: SvrCh_eTriggerType;
	__________ 	: SvrCh_DINT;
	TriggerOffset 	: SvrCh_DINT;
	NewLookingBeltPos 	: SvrCh_DINT;
	inpProductCntr 	: SvrCh_UDINT;
	outProductCntr 	: SvrCh_UDINT;
	MaxProdCntr 	: SvrCh_DINT;
	___________ 	: SvrCh_DINT;
	OutputTrigger 	: SvrCh_DINT;
	ActProdPos 	: SvrCh_DINT;
	OutputTriggerTime 	: SvrCh_DINT;
  //Clients:
	Motion 	: CltChCmd__LMCAxis;
	EncPos 	: CltCh_DINT;
	Comm_CameraCheckData 	: CltChCmd_CheckData;
	inpCntr 	: CltCh_DINT;
	Standard1 	: CltChCmd_Standard;
  //Variables:
		TriggerInformation : ARRAY [0..255] OF TriggerInfoStr;

		Cntr 	: USINT;
		ReadCntr 	: USINT;
		IntUnits 	: DINT;
		ExtUnits 	: DINT;
		rMulDiv 	: REAL;
		DeltaOffset 	: REAL;
		DeltaOffsetMM 	: DINT;
		NumberOfProduct 	: DINT;
		ActProdNumber 	: DINT;
		TriggerInfo 	: TriggerStr;
		TriggerCameraInfo 	: StrCameraDataBuffer;
		ActCameraData 	: CameraData;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL RtWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION GLOBAL OffsetTrigger
		VAR_OUTPUT
			State 	: OutInfoStr;
		END_VAR;
	
	FUNCTION GLOBAL SetTriggerOffset
		VAR_INPUT
			State 	: DINT;
		END_VAR;
	
	FUNCTION GLOBAL SetTriggerArray;
	
	FUNCTION GLOBAL ReadTriggerArray;
	
	FUNCTION GLOBAL SetMaxProducts
		VAR_INPUT
			Amount 	: DINT;
		END_VAR;
	
	FUNCTION GLOBAL ProdNbr
		VAR_OUTPUT
			Nbr 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using Standard
#pragma usingLtd _LMCAxis
#pragma usingLtd CheckData


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB ProductTriggerCamera::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_PRODUCTTRIGGERCAMERA
0$UINT, 0$UINT, (SIZEOF(::ProductTriggerCamera))$UINT, 
12$UINT, 5$UINT, 0$UINT, 
TO_UDINT(410707856), "ProductTriggerCamera", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::ProductTriggerCamera.Comm.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(2660888151), "Comm", 
(::ProductTriggerCamera.TriggerType.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1217207957), "TriggerType", 
(::ProductTriggerCamera.__________.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(705157791), "__________", 
(::ProductTriggerCamera.TriggerOffset.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2962231913), "TriggerOffset", 
(::ProductTriggerCamera.NewLookingBeltPos.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(971548798), "NewLookingBeltPos", 
(::ProductTriggerCamera.inpProductCntr.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2973898169), "inpProductCntr", 
(::ProductTriggerCamera.outProductCntr.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(424180745), "outProductCntr", 
(::ProductTriggerCamera.MaxProdCntr.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3568293901), "MaxProdCntr", 
(::ProductTriggerCamera.___________.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1229728487), "___________", 
(::ProductTriggerCamera.OutputTrigger.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(298438866), "OutputTrigger", 
(::ProductTriggerCamera.ActProdPos.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3791190939), "ActProdPos", 
(::ProductTriggerCamera.OutputTriggerTime.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(677215526), "OutputTriggerTime", 
//Clients:
(::ProductTriggerCamera.Motion.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(84305518), "Motion", TO_UDINT(1422175863), "_LMCAxis", 1$UINT, 73$UINT, 
(::ProductTriggerCamera.EncPos.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1762285235), "EncPos", 
(::ProductTriggerCamera.Comm_CameraCheckData.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3357313116), "Comm_CameraCheckData", TO_UDINT(4052777147), "CheckData", 0$UINT, 0$UINT, 
(::ProductTriggerCamera.inpCntr.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(3920213138), "inpCntr", 
(::ProductTriggerCamera.Standard1.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2411475140), "Standard1", TO_UDINT(3603188683), "Standard", 6$UINT, 1$UINT, 
END_FUNCTION


#define USER_CNT_ProductTriggerCamera 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_ProductTriggerCamera] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION ProductTriggerCamera::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_ProductTriggerCamera, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
	vmt.CmdTable.RtWork		:= #RtWork();
	Comm.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF Comm.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	OutputTriggerTime.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF OutputTriggerTime.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL ProductTriggerCamera::Init

  // Meld "triggerclass" aan
  if _FirstScan then
    Comm_CameraCheckData.MyInit();
  end_if;

END_FUNCTION

FUNCTION VIRTUAL GLOBAL ProductTriggerCamera::RtWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR
  
  // Read inputs
  Motion      := Motion.Read();
  EncPos      := EncPos.Read();

  // open methodes
  SetTriggerArray(); // Set the input fotocel into a register
  ReadTriggerArray();
  
  // Read axle variables
  IntUnits := Motion.ReadParameter(ParNr:=LMCAXIS_PAR_RD_INTUNITS, mode:=0);
  ExtUnits := Motion.ReadParameter(ParNr:=LMCAXIS_PAR_RD_EXTUNITS, mode:=0);
  rMulDiv  := to_real(IntUnits) / to_real(ExtUnits); 
  
	state := READY;
  
END_FUNCTION

FUNCTION GLOBAL ProductTriggerCamera::SetTriggerArray

  // Scan rising edge of the trigger input
  if Standard1.R_TRIG(CLK:= Comm_CameraCheckData.DataCompleted) = 1 then
           
      NumberOfProduct += 1;     
           
      // Set information in Array
      TriggerInformation[Cntr].iFcBeltPos     := EncPos;
      TriggerInformation[Cntr].iOffsetBeltPos := TriggerOffset; 
      TriggerInformation[Cntr].ProdNbr        := NumberOfProduct;
      TriggerInformation[Cntr].ProdGescand    := 1;
      TriggerInformation[Cntr].ProdPos        := 0;
      Comm_CameraCheckData.GetData(iData:= #TriggerInformation[Cntr].CameraData, TriggerType:= TriggerType);
      // TriggerInformation[Cntr].CameraData := Comm_CameraCheckData.GetData(TriggerType:= TriggerType); 
      
      Cntr += 1;
      inpProductCntr := to_udint Cntr;
      
      if NumberOfProduct >= MaxProdCntr then // because we start at '0'
        NumberOfProduct := 0;
      end_if;
  end_if;

END_FUNCTION

FUNCTION GLOBAL ProductTriggerCamera::ReadTriggerArray

  if ReadCntr <> Cntr then
    DeltaOffset   := to_real(EncPos - TriggerInformation[ReadCntr].iFcBeltPos);    //counts sinds foto
    DeltaOffsetMM := to_dint(to_real DeltaOffset * rMulDiv); 
    if DeltaOffsetMM >= TriggerInformation[ReadCntr].iOffsetBeltPos then
      ActProdPos                                  := TriggerInformation[ReadCntr].ProdPos;
      ActProdNumber                               := TriggerInformation[ReadCntr].ProdNbr;   
      ActCameraData                               := TriggerInformation[ReadCntr].CameraData;
      // Reset data 
      // _memset(dest:= #TriggerInformation[ReadCntr], usByte:= 0, cntr:= sizeof(TriggerInfoStr));
      
      ReadCntr += 1;
      outProductCntr := to_udint ReadCntr;
      OutputTrigger := 1;
    
    end_if;
  end_if;
  
  
  // Hold output trigger high for 50ms
  if OutputTriggerTime < 50 then
    OutputTriggerTime := 50;
  end_if;
  
  // Hold output trigger high for 50ms
  if Standard1.TON(IN:= OutputTrigger, PT:= OutputTriggerTime) then
    OutputTrigger := 0;
  end_if;

END_FUNCTION

FUNCTION GLOBAL ProductTriggerCamera::OffsetTrigger
	VAR_OUTPUT
		State 	: OutInfoStr;
	END_VAR
  
  State.TriggerState  := OutputTrigger;
  State.PositionState := ActProdPos;
  State.CameraData    := ActCameraData;

END_FUNCTION

FUNCTION GLOBAL ProductTriggerCamera::ProdNbr
	VAR_OUTPUT
		Nbr 	: DINT;
	END_VAR
  
  Nbr := ActProdNumber;

END_FUNCTION

FUNCTION GLOBAL ProductTriggerCamera::SetTriggerOffset
	VAR_INPUT
		State 	: DINT;
	END_VAR
  
  TriggerOffset := State; 

END_FUNCTION

FUNCTION GLOBAL ProductTriggerCamera::SetMaxProducts
	VAR_INPUT
		Amount 	: DINT;
	END_VAR
  
  MaxProdCntr := Amount; 

END_FUNCTION
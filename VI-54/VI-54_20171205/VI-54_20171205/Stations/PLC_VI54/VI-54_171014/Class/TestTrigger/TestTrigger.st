//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "TestTrigger"
	Revision           = "1.1"
	GUID               = "{4F633137-8710-421B-AFBB-CFE81E93F4BA}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(510,240)">
	<Channels>
		<Server Name="ProdsPerMin" GUID="{FF0FD7D1-DA95-46D9-BE18-EE502AC73D3D}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="File"/>
		<Server Name="TestTriggerOn" GUID="{535E7A6A-54DF-4604-AB78-5D9401CE554B}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Trigger" GUID="{7DACBEFB-1254-406D-A8AC-D42C24B199A0}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Client Name="iExtTrigger" Required="false" Internal="false"/>
		<Client Name="iFcTrigger" Required="true" Internal="false"/>
		<Client Name="LMC_Axle" Required="false" Internal="false"/>
		<Client Name="STD" Required="true" Internal="true"/>
	</Channels>
	<Network Name="TestTrigger">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name           = "STD"
				GUID           = "{622BB217-8999-4167-9973-605E28F2D3E9}"
				Class          = "Standard"
				Position       = "(210,360)"
				Visualized     = "false"
				BackgroundTime = "1000 ms">
				<Channels>
					<Server Name="ClassSvr"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.STD" Destination="STD.ClassSvr"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
TestTrigger : CLASS
  //Servers:
	Trigger 	: SvrChCmd_DINT;
	TestTriggerOn 	: SvrCh_DINT;
	ProdsPerMin 	: SvrCh_DINT;
  //Clients:
	iFcTrigger 	: CltCh_DINT;
	iExtTrigger 	: CltCh_DINT;
	LMC_Axle 	: CltChCmd__LMCAxis;
	STD 	: CltChCmd_Standard;
  //Variables:
		Time_ms 	: UDINT;
		TmrMaintrigger 	: UDINT;
		TriggerBits : BDINT
		[
		  1 Active,
		];

  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Trigger::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using Standard
#pragma usingLtd _LMCAxis


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB TestTrigger::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_TESTTRIGGER
1$UINT, 1$UINT, (SIZEOF(::TestTrigger))$UINT, 
3$UINT, 4$UINT, 0$UINT, 
TO_UDINT(4186078488), "TestTrigger", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::TestTrigger.Trigger.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(623833415), "Trigger", 
(::TestTrigger.TestTriggerOn.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(200491512), "TestTriggerOn", 
(::TestTrigger.ProdsPerMin.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(622680057), "ProdsPerMin", 
//Clients:
(::TestTrigger.iFcTrigger.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(872273318), "iFcTrigger", 
(::TestTrigger.iExtTrigger.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(515205641), "iExtTrigger", 
(::TestTrigger.LMC_Axle.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(373213676), "LMC_Axle", TO_UDINT(1422175863), "_LMCAxis", 1$UINT, 73$UINT, 
(::TestTrigger.STD.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1054692386), "STD", TO_UDINT(3603188683), "Standard", 6$UINT, 1$UINT, 
END_FUNCTION


#define USER_CNT_TestTrigger 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_TestTrigger] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION TestTrigger::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_TestTrigger, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Read		:= #Read();
	Trigger.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF Trigger.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	TestTriggerOn.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF TestTriggerOn.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ProdsPerMin.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF ProdsPerMin.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL TestTrigger::Trigger::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  // Read external input
  if IsClientConnected(#iExtTrigger) then
    iExtTrigger := iExtTrigger.Read();
  end_if;
  iFcTrigger := iFcTrigger.Read();
 
  // Check of LMC is moving
  if LMC_Axle.ActVelocity > 0 then
    TriggerBits.Active := True;
  else
    TriggerBits.Active := False;
  end_if;
 
  // Calculate time interface
  if ProdsPerMin > 0 then
    Time_ms := 60000 / (to_udint ProdsPerMin);  // omzetten naar ms
  else
    Time_ms := 60000;
  end_if;
  
 
  if TriggerBits.Active = 1 then
    if TestTriggerOn = 1 then
      if ops.tAbsolute - TmrMaintrigger >= Time_ms then
        Trigger := 1;
        TmrMaintrigger := ops.tAbsolute;
      end_if;
      if STD.TON(IN:= Trigger, PT:= 20) then
        Trigger := 0;
      end_if;
    else
      Trigger := (iFcTrigger = 1 | iExtTrigger = 1);
    end_if;
  else
    Trigger := 0;
  end_if;
  

	output := Trigger;

END_FUNCTION

//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "Y_Axle_Correction"
	Revision           = "0.0"
	GUID               = "{A6BDBA18-E7B5-450E-AD13-E0F69B38F8B7}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(750,120)">
	<Channels>
		<Server Name="CorrectionMM" GUID="{F5E3377C-5306-4C17-9FCC-8D5061705E37}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="StationNbr" GUID="{46332C6B-C0C8-43BD-B139-2AF58001AF12}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="Y_Axle_Error" GUID="{FC21BC9C-C008-47C1-AEC9-1D6D5E3AD00D}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="Y_Axle_State" GUID="{B0CDFF05-47E6-4B29-81D5-C070BAB6A427}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Client Name="Comm_Next" Required="false" Internal="false"/>
		<Client Name="iFc_Trigger" Required="true" Internal="false"/>
		<Client Name="Standard3" Required="true" Internal="true"/>
		<Client Name="Y_Axle" Required="true" Internal="false"/>
	</Channels>
	<Separators>
		<Servers>
			<SepChn Position="4"/>
			<SepChn Position="0"/>
		</Servers>
	</Separators>
	<Network Name="Y_Axle_Correction">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{CE123B40-276A-40A6-B3C8-BA2F841CEE0D}"
				Class      = "MachineBase"
				Position   = "(324,120)"
				Visualized = "true">
				<Channels>
					<Server Name="ObjectServer"/>
					<Server Name="RunningMode"/>
					<Server Name="Stepper"/>
				</Channels>
			</Object>
			<Object
				Name           = "Standard3"
				GUID           = "{12445419-0F52-4D9E-9345-E3DBD514CCB1}"
				Class          = "Standard"
				Position       = "(420,390)"
				Visualized     = "false"
				BackgroundTime = "1000 ms">
				<Channels>
					<Server Name="ClassSvr"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.Standard3" Destination="Standard3.ClassSvr"/>
			<Connection Source="this.ObjectServer" Destination="_base.ObjectServer" Vertices="(1112,210),(940,210),"/>
			<Connection Source="this.Stepper" Destination="_base.Stepper" Vertices="(1112,270),(940,270),"/>
			<Connection Source="this.RunningMode" Destination="_base.RunningMode" Vertices="(1112,330),(940,330),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using MachineBase

Y_Axle_Correction : CLASS
: MachineBase
  //Servers:
	StationNbr 	: SvrCh_DINT;
	Y_Axle_State 	: SvrCh__LMCAXIS_STATUS;
	Y_Axle_Error 	: SvrCh__LMCAXIS_ERROR;
	CorrectionMM 	: SvrCh_DINT;
  //Clients:
	iFc_Trigger 	: CltChCmd_ProductTriggerCamera;
	Y_Axle 	: CltChCmd__LMCAxis;
	Comm_Next 	: CltChCmd_Y_Axle_Correction;
	Standard3 	: CltChCmd_Standard;
  //Variables:
		TriggerInfo 	: ProductTriggerCamera::OutInfoStr;
		HomeMode 	: _LMCAXIS_REFMODE;
		MyFirstTime 	: DINT;
		CalcAccDec 	: DINT;
		CalcSpeed 	: DINT;
		ReferenceSpeed 	: DINT;
		MaxAxleSpeed 	: DINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL MyInit;
	
	FUNCTION VIRTUAL GLOBAL MyCyTask;
	
	FUNCTION GLOBAL SetStationNbr
		VAR_INPUT
			Nbr 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using Standard
#pragma usingLtd _LMCAxis
#pragma usingLtd ProductTriggerCamera


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB Y_Axle_Correction::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_Y_AXLE_CORRECTION
0$UINT, 0$UINT, (SIZEOF(::Y_Axle_Correction))$UINT, 
4$UINT, 4$UINT, 0$UINT, 
TO_UDINT(3986048554), "Y_Axle_Correction", //Class
TO_UDINT(3119722310), "MachineBase", 0$UINT, 0$UINT, //Baseclass
//Servers:
(::Y_Axle_Correction.StationNbr.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(413879351), "StationNbr", 
(::Y_Axle_Correction.Y_Axle_State.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2391789800), "Y_Axle_State", 
(::Y_Axle_Correction.Y_Axle_Error.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1891745378), "Y_Axle_Error", 
(::Y_Axle_Correction.CorrectionMM.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3128313523), "CorrectionMM", 
//Clients:
(::Y_Axle_Correction.iFc_Trigger.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2256343536), "iFc_Trigger", TO_UDINT(410707856), "ProductTriggerCamera", 0$UINT, 0$UINT, 
(::Y_Axle_Correction.Y_Axle.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(998069696), "Y_Axle", TO_UDINT(1422175863), "_LMCAxis", 1$UINT, 73$UINT, 
(::Y_Axle_Correction.Comm_Next.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(3456928936), "Comm_Next", TO_UDINT(3986048554), "Y_Axle_Correction", 0$UINT, 0$UINT, 
(::Y_Axle_Correction.Standard3.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1639076328), "Standard3", TO_UDINT(3603188683), "Standard", 6$UINT, 1$UINT, 
END_FUNCTION


#define USER_CNT_Y_Axle_Correction 5

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_Y_Axle_Correction] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION Y_Axle_Correction::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= MachineBase::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= MachineBase::ObjectServer.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, MachineBase::ObjectServer.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_Y_Axle_Correction;
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #MyInit();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[2]		:= #MyCyTask();

#pragma warning (default : 74)
	MachineBase::ObjectServer.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF MachineBase::ObjectServer.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL Y_Axle_Correction::MyInit
  
  // Set reference..
  GlobalDataPtr^.gMachineData.Reference_Amount += 1;
  
  // Set another inits
  if IsClientConnected(#Comm_Next) then
    Comm_Next.InitTask(SetGlobalPtr:= GlobalDataPtr, SetRecipePtr:= RecipePtr);
  end_if;

END_FUNCTION

FUNCTION VIRTUAL GLOBAL Y_Axle_Correction::MyCyTask
  
  // Set another CyTasks
  if IsClientConnected(#Comm_Next) then
    Comm_Next.CyTask();
  end_if;

  // Read Axle States
  Y_Axle_State       := Y_Axle.ReadAxisStatus();
  Y_Axle_Error       := Y_Axle.ReadAxisError();
  
  
  // Calculations
  CalcSpeed          := to_dint(to_real RecipePtr^.Y_Axle.Speed ToMMperSec);
  CalcAccDec         := to_dint(to_real RecipePtr^.Y_Axle.AccDec ToMMperSec);
  MaxAxleSpeed       := Y_Axle.ReadParameter(ParNr:= LMCAXIS_PAR_RD_V_MAX, mode:= 0);
  ReferenceSpeed     := (MaxAxleSpeed / 10);

  // Set Trigger info
  TriggerInfo        := iFc_Trigger.OffsetTrigger();


  // check for errors
  if GlobalDataPtr^.gGeneralData.NoError = 0 | GlobalDataPtr^.gGeneralData.iNoodstopOk = 0
    | GlobalDataPtr^.gRunStatus.gRunStatusGlob = eNoodstopStatus | GlobalDataPtr^.gRunStatus.gRunStatusGlob = eErrorStatus then
    if Stepper < 100 | Stepper >= 200 then
      Stepper := 100;
    end_if;
  end_if;


  case Stepper of
  00:// start
    if GlobalDataPtr^.gRunStatus.gRunStatusGlob = eRunStatus | GlobalDataPtr^.gRunStatus.gRunStatusGlob = eStartUpStatus
      | GlobalDataPtr^.gRunStatus.gRunStatusGlob = eCleaningStatus | GlobalDataPtr^.gRunStatus.gRunStatusGlob = ePauseStatus then
      if GlobalDataPtr^.gGeneralData.iDrivesOK = 1 then 
        Stepper += 1;
      end_if;  
    end_if;
    
  01: 
    if GlobalDataPtr^.gGeneralData.iDrivesEnabled = 0 then  // Axles enabled??
      if Y_Axle_State.PowerOn = 0 then
        Y_Axle.PowerOn(Mode:= LMCAXIS_MOVE_ANY_WAY);
      end_if;
    else
      Stepper += 1;
    end_if;
  
  02: // What do we choose?
    if GlobalDataPtr^.gRunStatus.gRunStatusGlob = eStartUpStatus | GlobalDataPtr^.gRunStatus.gRunStatusGlob = eRunStatus
      | GlobalDataPtr^.gRunStatus.gRunStatusGlob = ePauseStatus then
      Stepper := 10;
    elsif GlobalDataPtr^.gRunStatus.gRunStatusGlob = eCleaningStatus then
      Stepper := 200;
    end_if; 

  //--------------------------------     
  10: // Starting up, Homing the y-axle
    GlobalDataPtr^.gRunStatus.gRunStatusYaxles[StationNbr] := eStartUpStatus;
    if Y_Axle_State.IsReferenced = 0 then
      HomeMode.NoZImpulse    := 1;
      HomeMode.NoEndSwitch   := 1;
  
      Y_Axle.MoveReference( Mode      := HomeMode,
                            Position  := Y_Axle.ReadParameter(ParNr:= LMCAXIS_PAR_RD_MIN_POSITION, mode:=0),
                            VRef1     := ReferenceSpeed,
                            VRef2     := ReferenceSpeed,
                            Accel     := Y_Axle.ReadParameter(ParNr:=LMCAXIS_PAR_RD_A_MAX, mode:=0),
                            PositionWindow := 0);
      Stepper += 1;
    else
      Stepper += 2;
    end_if;
    

  11: // Go to the middle position "0", only when starting up
    if Y_Axle_State.IsReferenced = 1 then
      Y_Axle.MoveAbsolute(Position:= 0, 
                          Speed:= CalcSpeed, 
                          Accel:= CalcAccDec, 
                          Decel:= CalcSpeed);
      Stepper += 1;
    end_if;
   
  12: // is in position?
    if Y_Axle.InPosition(Mode:= LMCAXIS_POSITIONWINDOW_APP_UNITS, PositionWindow:= cIntUnitsTo_mm) then
      if myFirstTime = 0 then
        GlobalDataPtr^.gMachineData.Act_Reference_Amount += 1; // Do ones..... 
        MyFirstTime := 1;
      end_if;  
      Stepper := 20;
    end_if;
    
  20: // klaar met homen
    GlobalDataPtr^.gRunStatus.gRunStatusYaxles[StationNbr] := eStopStatus; // ga in stopstatus   
    if GlobalDataPtr^.gRunStatus.gRunStatusGlob = eRunStatus | GlobalDataPtr^.gRunStatus.gRunStatusGlob = ePauseStatus then
      Stepper := 40;
    end_if;  


  
  //--------------------------------   
  40: // Runstatus
    GlobalDataPtr^.gRunStatus.gRunStatusYaxles[StationNbr] := eRunStatus;
    Stepper += 1;
  
  41: // Check for position difference
    if GlobalDataPtr^.gRunStatus.gRunStatusGlob <> eRunStatus & GlobalDataPtr^.gRunStatus.gRunStatusGlob <> ePauseStatus then
      Stepper := 100;  
    elsif Standard3.R_TRIG(CLK:= TriggerInfo.TriggerState) = True then
      CorrectionMM := to_dint(to_real TriggerInfo.CameraData[StationNbr].Yposition / cIntUnitsTo_mm);
      Y_Axle.MoveAbsolute(Position:= TriggerInfo.CameraData[StationNbr].Yposition, 
                          Speed:= CalcSpeed, 
                          Accel:= CalcAccDec, 
                          Decel:= CalcAccDec);
      Stepper += 1;
    end_if;
    
  42: // is in position?
    if Y_Axle.InPosition(Mode:= LMCAXIS_POSITIONWINDOW_APP_UNITS, PositionWindow:= cIntUnitsTo_mm) then
      Stepper := 41;
    end_if;
    
    
    
  //--------------------------------  
  100: // assen stopzetten en uitzetten
    GlobalDataPtr^.gRunStatus.gRunStatusYaxles[StationNbr] := eStopStatus;
    if Y_Axle_State.PowerOn = 1 then
      Y_Axle.PowerOff(Mode:= LMCAXIS_IMMEDIATE_STOPP);
    else
      Stepper += 1;
    end_if;
    
  101:
    GlobalDataPtr^.gRunStatus.gRunStatusYaxles[StationNbr] := eDriveOffStatus;
    if GlobalDataPtr^.gGeneralData.NoError = 1 & GlobalDataPtr^.gGeneralData.iNoodstopOk = 1 then
      Stepper := 0;
    end_if;
  end_case;


END_FUNCTION

FUNCTION GLOBAL Y_Axle_Correction::SetStationNbr
	VAR_INPUT
		Nbr 	: DINT;
	END_VAR
  
  StationNbr := Nbr;
  
  // Set station nbr
  if IsClientConnected(#Comm_Next) then
    Comm_Next.SetStationNbr(Nbr:= StationNbr + 1);
  end_if;

END_FUNCTION
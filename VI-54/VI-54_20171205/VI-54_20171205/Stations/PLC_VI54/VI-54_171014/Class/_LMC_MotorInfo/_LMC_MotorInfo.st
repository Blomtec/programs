//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "_LMC_MotorInfo"
	Revision           = "6.1"
	GUID               = "{1FF0C2E5-4EF8-4E31-BA50-B431FF41D653}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	DefCyclictime      = "cCT"
	BackgroundTask     = "true"
	DefBackground      = "cBT"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(870,1620)">
	<Channels>
		<Server Name="ActSpeed" GUID="{483F2E31-0936-4AA8-9379-088A3C7EF940}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="AxleState" GUID="{E75593DF-9272-4D48-AEC2-543110B99D08}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="ClassSvr" GUID="{0506C24F-84BC-4735-AB3D-1E398BCA0FE8}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="CncOperationMode" GUID="{AC38DD82-CAB4-48D3-AEEE-31D78DA1C37B}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="DriveStateWord" GUID="{2C10C762-1819-422A-8C00-44E165E4375B}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="Enabled" GUID="{2F4D9C75-F7D5-44CF-8992-CA105DB3B992}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="ExUnits" GUID="{7701FE89-201E-4047-8373-661A1F1E4E03}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false"/>
		<Server Name="Homed" GUID="{44331B3A-F433-4AAC-8543-2F920B63B567}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="I_DERROR" GUID="{8AE6D474-DD01-4B96-A1F8-82DF6320BE63}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Para-Nr : 201&#13;&#10;Unit  : [-]&#13;&#10;Description : Internal Drive Errors&#13;&#13;&#10;&#13;&#13;&#10;Bit 0 SSI_ERROR (additional Information to the Host Communication Error in [I-STATUS])&#13;&#10;Bit 1 HOST_ERROR (additional Information to the Host Communication Error in [I-STATUS])&#13;&#10;Bit 2 SHORT_ERROR (short of the power stage)&#13;&#10;Bit 3 RAM_ERROR (error in the code ram area)&#13;&#10;Bit 4 FPGA_WATCHDOG_ERROR &#13;&#10;Bit 5 ADOFF_ERROR (the offset of the motor current is to high)&#13;&#10;Bit 6 VCC18_ERROR (1,8V error)&#13;&#10;Bit 7 VCCE_ERROR (5V error)&#13;&#10;&#13;&#13;&#10;This bits cause the Drive Error Ramp/Drive Error No Ramp in [I-STATUS].&#13;&#13;&#10;Only bit 0 and 1 can be cleared by [K-CLRF].&#13;&#10;"/>
		<Server Name="I_I2T" GUID="{F4019509-12AD-4D16-875C-0357BD5D94A5}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Para-Nr : 193&#13;&#10;Unit  : [%]&#13;&#10;Description : Actual value of I2T of the power stage in % of [C-ICONT]&#13;&#13;&#10;&#13;&#13;&#10;The i2t-mechanism of the drive limits the current and the continuous current is always limited to the value of [C-ICONT].&#13;&#10;"/>
		<Server Name="I_ICMD" GUID="{B6E8F3AA-D437-4AF8-AFF2-C4F993497846}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Para-Nr : 194&#13;&#10;Unit  : [mA]&#13;&#10;Description : Current set point in Q - direction"/>
		<Server Name="I_ICONT" GUID="{DC28C583-09A7-456D-A03C-BC575C61B4CF}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Para-Nr : 186&#13;&#10;Unit  : [mA]&#13;&#10;Description : Drive continuos current&#13;&#10;"/>
		<Server Name="I_IPEAK" GUID="{FD48F879-B6CB-45B6-ACCF-4A4566EAD3CB}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Para-Nr : 185&#13;&#10;Unit  : [mA]&#13;&#10;Description : Drive peak current&#13;&#10;"/>
		<Server Name="I_NCMD" GUID="{AE708BFD-7F6D-4601-8B5D-9A9183454D6C}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Para-Nr : 190&#13;&#10;Unit  : [rpm]&#13;&#10;Description : Speed set point&#13;&#10;"/>
		<Server Name="I_PBAL" GUID="{011CDBFF-E43E-4560-ACD6-88A3AB9DA02C}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Para-Nr : 196&#13;&#10;Unit  : [W]&#13;&#10;Description : Actual regen power&#13;&#13;&#10;This value is influenced by [G-RBAL].&#13;&#10;"/>
		<Server Name="I_PE" GUID="{310BCF0F-D963-4C85-BBFD-9BF7ACCB1277}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Para-Nr : 175&#13;&#10;Unit  : [-]&#13;&#10;Description : Position error&#13;&#10;&#13;&#10;"/>
		<Server Name="I_STATUS" GUID="{54159AB0-7CF6-4CB4-8AEF-E4FA0AECE9A3}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Para-Nr : 199&#13;&#10;Unit  : [-]&#13;&#10;Description : Status register:&#13;&#13;&#10;&#13;&#13;&#10;Bit  0   Mains phase (1-phase supply)&#13;&#10;Bit  1   Mains fault&#13;&#10;Bit  2   free (s e)&#13;&#10;Bit  3   Over voltage DC-Link&#13;&#10;Bit  4   Under voltage DC-link&#13;&#10;Bit  5   free (ad e)&#13;&#10;Bit  6   Holding brake error&#13;&#10;Bit  7   Holding brake switch damaged&#13;&#10;Bit  8   free&#13;&#10;Bit  9   Motor thermostat&#13;&#10;Bit 10  Ambient temperature&#13;&#10;Bit 11  Heat sink temperature&#13;&#10;Bit 12  Feedback Error&#13;&#10;Bit 13  Commutation error&#13;&#10;Bit 14  Over speed&#13;&#10;Bit 15  Contouring Error&#13;&#10;Bit 16  Trajectory Error&#13;&#10;Bit 17  Host Communication Error&#13;&#10;Bit 18  Drive Error Ramp, for additional information see [I-DERROR]&#13;&#10;Bit 19  Drive Error No Ramp, for additional information see [I-DERROR]&#13;&#10;Bit 20  External Enable Locked Error&#13;&#10;Bit 21  IGBT Driver Voltage Error&#13;&#10;Bit 22  max. Regen Power Error&#13;&#10;Bit 23  24V Brake Supply Error&#13;&#10;Bit 24  External Brake Enable Error&#13;&#10;Bit 25  I2T-Error&#13;&#10;Bit 26  Motor Temperature Warning&#13;&#10;&#13;&#13;&#10;The masks  [G-MASKE1], [G-MASKE2], [G-MASKW] and [G-MASKD] &#13;&#10;define if the corresponding bit of I-STATUS causes a cast of the motor, a ramp stop of the motor, a warning or nothing.&#13;&#13;&#10;This errors can be cleared with [K-CLRF].&#13;&#10;"/>
		<Server Name="I_TEMPE" GUID="{63107988-D0AF-4B9F-A851-479642151961}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Para-Nr : 184&#13;&#10;Unit  : [°C]&#13;&#10;Description : Actual ambient temperature&#13;&#10;"/>
		<Server Name="I_TEMPK" GUID="{BFE18D16-7A09-4E76-A3AB-15E45CB107D6}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Para-Nr : 183&#13;&#10;Unit  : [°C]&#13;&#10;Description : Actual heat sink temperature&#13;&#10;&#13;&#10;"/>
		<Server Name="I_TEMPM" GUID="{057538C5-8A6C-4753-8214-7CD2892ED91E}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Para-Nr : 181&#13;&#10;Unit  : [Ohm]&#13;&#10;Description : Actual value of the PTC in the motor winding &#13;&#10;"/>
		<Server Name="I_VBUS" GUID="{A349B024-8843-46F9-9226-CEB231968CEC}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Para-Nr : 195&#13;&#10;Unit  : [V]&#13;&#10;Description : Actual DC-link voltage&#13;&#10;"/>
		<Server Name="IntUnits" GUID="{178714AC-BF88-4453-824F-B05FB1D2534B}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false"/>
		<Server Name="MaxAccDec" GUID="{158EEB00-EF62-43E3-A419-D36FDC6C9351}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false"/>
		<Server Name="MaxSpeed" GUID="{1AE76CE7-5C23-4046-BF19-67A3C40274FF}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false"/>
		<Server Name="Modulo" GUID="{6C0E0DFD-D9AE-445A-B0DC-5DCF2D0B45A8}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false"/>
		<Server Name="MoveType" GUID="{F0BAE889-AE24-4C4A-BD4B-EB6DF9E35FA6}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false"/>
		<Server Name="SwMaxPos" GUID="{F389AF6B-D4E5-4A53-A8F2-14A98B286FB8}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false"/>
		<Server Name="SwMinPos" GUID="{EF843664-A365-47A7-B958-00A766848EF3}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false"/>
		<Server Name="Tjerk" GUID="{EFBDC447-598C-4CFB-9C02-B2B819701B91}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false"/>
		<Client Name="_DriveActValues1" Required="true" Internal="true"/>
		<Client Name="CNCState" Required="true" Internal="true"/>
		<Client Name="DriveAxis" Required="true" Internal="false" Comment="object channel to _DriveAxis"/>
		<Client Name="DriveStateW" Required="true" Internal="true"/>
		<Client Name="LMC" Required="true" Internal="false"/>
		<Client Name="LMC2" Required="false" Internal="false"/>
		<Client Name="LMC3" Required="false" Internal="false"/>
		<Client Name="SDDDriveError" Required="true" Internal="true"/>
		<Client Name="SDDDriveState" Required="true" Internal="true"/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Class\_LMC_MotorInfo\_LMC_MotorInfo.vov"/>
		</Files>
	</Dependencies>
	<Network Name="_LMC_MotorInfo">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_DriveActValues1"
				GUID       = "{7F5F09EC-91DF-4B6C-BB5A-E8A63DD5B13F}"
				Class      = "_DriveActValues"
				Position   = "(210,270)"
				Visualized = "true">
				<Channels>
					<Server Name="I_BCC"/>
					<Server Name="I_BITS"/>
					<Server Name="I_CAP"/>
					<Server Name="I_CAP4"/>
					<Server Name="I_CAPENC"/>
					<Server Name="I_DERROR"/>
					<Server Name="I_FBB"/>
					<Server Name="I_FPOS"/>
					<Server Name="I_I2T"/>
					<Server Name="I_IA"/>
					<Server Name="I_IB"/>
					<Server Name="I_ICMD"/>
					<Server Name="I_ICONT"/>
					<Server Name="I_ID"/>
					<Server Name="I_INT1"/>
					<Server Name="I_INT2"/>
					<Server Name="I_IPEAK"/>
					<Server Name="I_IQ"/>
					<Server Name="I_MPOS"/>
					<Server Name="I_N"/>
					<Server Name="I_NCMD"/>
					<Server Name="I_NFILT"/>
					<Server Name="I_PBAL"/>
					<Server Name="I_PCMD"/>
					<Server Name="I_PE"/>
					<Server Name="I_POS"/>
					<Server Name="I_STATUS"/>
					<Server Name="I_TEMPE"/>
					<Server Name="I_TEMPK"/>
					<Server Name="I_TEMPM"/>
					<Server Name="I_VBUS"/>
					<Server Name="State"/>
					<Client Name="DriveAxis"/>
					<Client Name="ErrorCode"/>
				</Channels>
			</Object>
			<Object
				Name       = "CNCState"
				GUID       = "{15D71FD6-CCD9-41EE-9E8B-177F42D0F393}"
				Class      = "String"
				Position   = "(270,120)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "DriveStateW"
				GUID       = "{CC326D51-4F3D-4A5F-885E-D09DC37792E4}"
				Class      = "String"
				Position   = "(300,2520)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "SDDDriveError"
				GUID       = "{17CBBE04-6F5D-40FE-ACFF-CE4622BD1EC5}"
				Class      = "String"
				Position   = "(330,2400)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "SDDDriveState"
				GUID       = "{5B6F3BB4-8119-4EFF-90AB-DA95B600319D}"
				Class      = "String"
				Position   = "(300,2250)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this._DriveActValues1" Destination="_DriveActValues1.State"/>
			<Connection Source="_DriveActValues1.DriveAxis" Destination="this.DriveAxis" Vertices="(210,360),(38,210),"/>
			<Connection Source="this.I_PE" Destination="_DriveActValues1.I_PE" Vertices="(968,270),(796,480),"/>
			<Connection Source="this.I_TEMPM" Destination="_DriveActValues1.I_TEMPM" Vertices="(968,330),(796,720),"/>
			<Connection Source="this.I_TEMPK" Destination="_DriveActValues1.I_TEMPK" Vertices="(968,390),(796,780),"/>
			<Connection Source="this.I_TEMPE" Destination="_DriveActValues1.I_TEMPE" Vertices="(968,450),(796,840),"/>
			<Connection Source="this.I_IPEAK" Destination="_DriveActValues1.I_IPEAK" Vertices="(968,510),(796,900),"/>
			<Connection Source="this.I_ICONT" Destination="_DriveActValues1.I_ICONT" Vertices="(968,570),(796,960),"/>
			<Connection Source="this.I_NCMD" Destination="_DriveActValues1.I_NCMD" Vertices="(968,630),(796,1020),"/>
			<Connection Source="this.I_I2T" Destination="_DriveActValues1.I_I2T" Vertices="(968,690),(796,1200),"/>
			<Connection Source="this.I_ICMD" Destination="_DriveActValues1.I_ICMD" Vertices="(968,750),(796,1260),"/>
			<Connection Source="this.I_VBUS" Destination="_DriveActValues1.I_VBUS" Vertices="(968,810),(796,1320),"/>
			<Connection Source="this.CNCState" Destination="CNCState.Data"/>
			<Connection Source="this.I_STATUS" Destination="_DriveActValues1.I_STATUS" Vertices="(968,930),(796,1560),"/>
			<Connection Source="this.I_DERROR" Destination="_DriveActValues1.I_DERROR" Vertices="(968,990),(796,1620),"/>
			<Connection Source="this.SDDDriveState" Destination="SDDDriveState.Data"/>
			<Connection Source="this.SDDDriveError" Destination="SDDDriveError.Data"/>
			<Connection Source="this.DriveStateW" Destination="DriveStateW.Data"/>
			<Connection Source="this.I_PBAL" Destination="_DriveActValues1.I_PBAL" Vertices="(968,870),(796,1380),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
_LMC_MotorInfo : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	I_PE 	: SvrCh_DINT;
	I_TEMPM 	: SvrCh_DINT;
	I_TEMPK 	: SvrCh_DINT;
	I_TEMPE 	: SvrCh_DINT;
	I_IPEAK 	: SvrCh_DINT;
	I_ICONT 	: SvrCh_DINT;
	I_NCMD 	: SvrCh_DINT;
	I_I2T 	: SvrCh_DINT;
	I_ICMD 	: SvrCh_DINT;
	I_VBUS 	: SvrCh_DINT;
	I_PBAL 	: SvrCh_DINT;
	I_STATUS 	: SvrCh__SDDISTATE;
	I_DERROR 	: SvrCh__SDDIDERROR;
	DriveStateWord 	: SvrCh_DS402_State;
	CncOperationMode 	: SvrCh__LMCAXIS_OPMODE;
	AxleState 	: SvrCh__LMCAXIS_STATUS;
	Enabled 	: SvrCh_DINT;
	Homed 	: SvrCh_DINT;
	ActSpeed 	: SvrCh_DINT;
	ExUnits 	: SvrCh_DINT;
	IntUnits 	: SvrCh_DINT;
	MaxSpeed 	: SvrCh_DINT;
	MaxAccDec 	: SvrCh_DINT;
	Tjerk 	: SvrCh_DINT;
	MoveType 	: SvrCh__LMCAXIS_MOVEPROFILE;
	Modulo 	: SvrCh_DINT;
	SwMinPos 	: SvrCh_DINT;
	SwMaxPos 	: SvrCh_DINT;
  //Clients:
	_DriveActValues1 	: CltChCmd__DriveActValues;
	DriveAxis 	: CltChCmd__DriveAxisBase;
	LMC 	: CltChCmd__LMCAxis;
	CNCState 	: CltChCmd_String;
	SDDDriveState 	: CltChCmd_String;
	SDDDriveError 	: CltChCmd_String;
	DriveStateW 	: CltChCmd_String;
	LMC2 	: CltChCmd__LMCAxis;
	LMC3 	: CltChCmd__LMCAxis;
  //Variables:
		BitNr 	: DINT;
		i 	: DINT;
		Lengte 	: UDINT;
		AxleStateTemp 	: _LMCAXIS_STATUS;
		DriveStateWordTemp 	: DS402_State;
		DriveI_status 	: _SDDISTATE;
		SDDDriveI_derror 	: _SDDIDERROR;
		AxleStateChar : ARRAY [0..31] OF CHAR;

		DriveStateChar : ARRAY [0..31] OF CHAR;

		SDDDriveStateChar : ARRAY [0..31] OF CHAR;

		SDDDriveErrorChar : ARRAY [0..31] OF CHAR;

		hSetValue 	: DINT;
		eenmaal 	: DINT;
		IndexFileNbr 	: DINT;
		OldExUnits 	: DINT;
		NewInterneUnits 	: DINT;
		NewMaxAccDec 	: DINT;
		NewMaxSpeed 	: DINT;
		CalcRatio 	: REAL;
		CalcMaxSpeed 	: DINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Background
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION GLOBAL MyCyWork;
	
	FUNCTION GLOBAL MyBackGround;
	
	FUNCTION VIRTUAL GLOBAL I_PE::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL I_TEMPM::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL I_TEMPK::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL I_TEMPE::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL I_IPEAK::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL I_ICONT::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL I_NCMD::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL I_I2T::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL I_ICMD::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL I_VBUS::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL I_PBAL::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL I_STATUS::Read
		VAR_OUTPUT
			output (EAX) 	: _SDDISTATE;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL I_DERROR::Read
		VAR_OUTPUT
			output (EAX) 	: _SDDIDERROR;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using _DriveActValues
#pragma using String
#pragma usingLtd _DriveAxisBase
#pragma usingLtd _LMCAxis


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB _LMC_MotorInfo::@CT_
0$UINT,
2#0100000000000010$UINT, //TY__LMC_MOTORINFO
6$UINT, 1$UINT, (SIZEOF(::_LMC_MotorInfo))$UINT, 
29$UINT, 9$UINT, 0$UINT, 
TO_UDINT(1175839889), "_LMC_MotorInfo", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::_LMC_MotorInfo.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::_LMC_MotorInfo.I_PE.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(481642861), "I_PE", 
(::_LMC_MotorInfo.I_TEMPM.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(451602968), "I_TEMPM", 
(::_LMC_MotorInfo.I_TEMPK.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4085862189), "I_TEMPK", 
(::_LMC_MotorInfo.I_TEMPE.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(338780714), "I_TEMPE", 
(::_LMC_MotorInfo.I_IPEAK.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1374996763), "I_IPEAK", 
(::_LMC_MotorInfo.I_ICONT.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(341812614), "I_ICONT", 
(::_LMC_MotorInfo.I_NCMD.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(514263627), "I_NCMD", 
(::_LMC_MotorInfo.I_I2T.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4271023362), "I_I2T", 
(::_LMC_MotorInfo.I_ICMD.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2205168370), "I_ICMD", 
(::_LMC_MotorInfo.I_VBUS.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2332033682), "I_VBUS", 
(::_LMC_MotorInfo.I_PBAL.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(231573486), "I_PBAL", 
(::_LMC_MotorInfo.I_STATUS.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3159858376), "I_STATUS", 
(::_LMC_MotorInfo.I_DERROR.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2114936407), "I_DERROR", 
(::_LMC_MotorInfo.DriveStateWord.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(248115670), "DriveStateWord", 
(::_LMC_MotorInfo.CncOperationMode.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(501593205), "CncOperationMode", 
(::_LMC_MotorInfo.AxleState.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3891824669), "AxleState", 
(::_LMC_MotorInfo.Enabled.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1874609566), "Enabled", 
(::_LMC_MotorInfo.Homed.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3911945380), "Homed", 
(::_LMC_MotorInfo.ActSpeed.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1555690308), "ActSpeed", 
(::_LMC_MotorInfo.ExUnits.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3007598302), "ExUnits", 
(::_LMC_MotorInfo.IntUnits.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(136119182), "IntUnits", 
(::_LMC_MotorInfo.MaxSpeed.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3947575129), "MaxSpeed", 
(::_LMC_MotorInfo.MaxAccDec.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2070353832), "MaxAccDec", 
(::_LMC_MotorInfo.Tjerk.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3771387562), "Tjerk", 
(::_LMC_MotorInfo.MoveType.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3023197335), "MoveType", 
(::_LMC_MotorInfo.Modulo.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(470354096), "Modulo", 
(::_LMC_MotorInfo.SwMinPos.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(740855237), "SwMinPos", 
(::_LMC_MotorInfo.SwMaxPos.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1764412999), "SwMaxPos", 
//Clients:
(::_LMC_MotorInfo._DriveActValues1.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1986561117), "_DriveActValues1", TO_UDINT(3148856663), "_DriveActValues", 1$UINT, 13$UINT, 
(::_LMC_MotorInfo.DriveAxis.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000110$UINT, TO_UDINT(2080180789), "DriveAxis", TO_UDINT(4124502522), "_DriveAxisBase", 1$UINT, 72$UINT, 
(::_LMC_MotorInfo.LMC.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(751013076), "LMC", TO_UDINT(1422175863), "_LMCAxis", 1$UINT, 73$UINT, 
(::_LMC_MotorInfo.CNCState.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3442314199), "CNCState", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::_LMC_MotorInfo.SDDDriveState.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2660387895), "SDDDriveState", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::_LMC_MotorInfo.SDDDriveError.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1625039549), "SDDDriveError", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::_LMC_MotorInfo.DriveStateW.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(808013126), "DriveStateW", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::_LMC_MotorInfo.LMC2.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(2605149004), "LMC2", TO_UDINT(1422175863), "_LMCAxis", 1$UINT, 73$UINT, 
(::_LMC_MotorInfo.LMC3.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(3963640794), "LMC3", TO_UDINT(1422175863), "_LMCAxis", 1$UINT, 73$UINT, 
END_FUNCTION


#define USER_CNT__LMC_MotorInfo 1

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT__LMC_MotorInfo] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION _LMC_MotorInfo::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT__LMC_MotorInfo, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
	vmt.CmdTable.CyWork		:= #CyWork();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Background();

#pragma warning (default : 74)
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	I_PE.pMeth			:= StoreMethod( #I_PE::Read(), #M_NO_F() );
	IF I_PE.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	I_TEMPM.pMeth			:= StoreMethod( #I_TEMPM::Read(), #M_NO_F() );
	IF I_TEMPM.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	I_TEMPK.pMeth			:= StoreMethod( #I_TEMPK::Read(), #M_NO_F() );
	IF I_TEMPK.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	I_TEMPE.pMeth			:= StoreMethod( #I_TEMPE::Read(), #M_NO_F() );
	IF I_TEMPE.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	I_IPEAK.pMeth			:= StoreMethod( #I_IPEAK::Read(), #M_NO_F() );
	IF I_IPEAK.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	I_ICONT.pMeth			:= StoreMethod( #I_ICONT::Read(), #M_NO_F() );
	IF I_ICONT.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	I_NCMD.pMeth			:= StoreMethod( #I_NCMD::Read(), #M_NO_F() );
	IF I_NCMD.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	I_I2T.pMeth			:= StoreMethod( #I_I2T::Read(), #M_NO_F() );
	IF I_I2T.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	I_ICMD.pMeth			:= StoreMethod( #I_ICMD::Read(), #M_NO_F() );
	IF I_ICMD.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	I_VBUS.pMeth			:= StoreMethod( #I_VBUS::Read(), #M_NO_F() );
	IF I_VBUS.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	I_PBAL.pMeth			:= StoreMethod( #I_PBAL::Read(), #M_NO_F() );
	IF I_PBAL.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	I_STATUS.pMeth			:= StoreMethod( #I_STATUS::Read(), #M_NO_F() );
	IF I_STATUS.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	I_DERROR.pMeth			:= StoreMethod( #I_DERROR::Read(), #M_NO_F() );
	IF I_DERROR.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ExUnits.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF ExUnits.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	IntUnits.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF IntUnits.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	MaxSpeed.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF MaxSpeed.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	MaxAccDec.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF MaxAccDec.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Tjerk.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Tjerk.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	MoveType.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF MoveType.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Modulo.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Modulo.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	SwMinPos.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF SwMinPos.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	SwMaxPos.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF SwMaxPos.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

FUNCTION VIRTUAL GLOBAL _LMC_MotorInfo::Init

  _DriveActValues1.Init();
  
  
  if _FirstScan = 1 then
    eenmaal := 1;
  end_if;  

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _LMC_MotorInfo::CyWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR

  MyCyWork();

	state := READY;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _LMC_MotorInfo::Background
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR

  MyBackGround();
  
	state := READY;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _LMC_MotorInfo::I_PE::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	I_PE := _DriveActValues1.I_PE.Read();
	output := I_PE;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _LMC_MotorInfo::I_TEMPM::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	I_TEMPM := _DriveActValues1.I_TEMPM.Read();
	output := I_TEMPM;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _LMC_MotorInfo::I_TEMPK::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	I_TEMPK := _DriveActValues1.I_TEMPK.Read();
	output := I_TEMPK;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _LMC_MotorInfo::I_TEMPE::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	I_TEMPE := _DriveActValues1.I_TEMPE.Read();
	output := I_TEMPE;

END_FUNCTION



FUNCTION VIRTUAL GLOBAL _LMC_MotorInfo::I_IPEAK::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	I_IPEAK := _DriveActValues1.I_IPEAK.Read();
	output := I_IPEAK;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _LMC_MotorInfo::I_ICONT::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	I_ICONT := _DriveActValues1.I_ICONT.Read();
	output := I_ICONT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _LMC_MotorInfo::I_NCMD::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	I_NCMD := _DriveActValues1.I_NCMD.Read();
	output := I_NCMD;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _LMC_MotorInfo::I_I2T::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	I_I2T := _DriveActValues1.I_I2T.Read() * 10;  // #pvo 141013  display waarde van xxx -> xxx.x
	output := I_I2T;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _LMC_MotorInfo::I_ICMD::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	I_ICMD := _DriveActValues1.I_ICMD.Read();
	output := I_ICMD;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _LMC_MotorInfo::I_VBUS::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	I_VBUS := _DriveActValues1.I_VBUS.Read();
	output := I_VBUS;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _LMC_MotorInfo::I_STATUS::Read
	VAR_OUTPUT
		output (EAX) 	: _SDDISTATE;
	END_VAR

	I_STATUS := _DriveActValues1.I_STATUS.Read();
	output := I_STATUS;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _LMC_MotorInfo::I_DERROR::Read
	VAR_OUTPUT
		output (EAX) 	: _SDDIDERROR;
	END_VAR

	I_DERROR := _DriveActValues1.I_DERROR.Read();
	output := I_DERROR;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _LMC_MotorInfo::I_PBAL::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	I_PBAL := _DriveActValues1.I_PBAL.Read();
	output := I_PBAL;

END_FUNCTION


FUNCTION GLOBAL _LMC_MotorInfo::MyCyWork

  _DriveActValues1.CyWork(EAX:=eax);
  DriveStateWord := DriveAxis.StateWord;
  

  LMC := LMC.Read();
  CncOperationMode := LMC;

  AxleState := LMC.ReadAxisStatus();
  ActSpeed := LMC.ReadVelocity(Mode:= LMCAXIS_SETVEL_APPUNIT_SEC);




END_FUNCTION


FUNCTION GLOBAL _LMC_MotorInfo::MyBackGround


// LMC axle state
  i := 32;
  AxleStateTemp := AxleState;
  while i > 0 do
    AxleStateChar[i-1] := (AxleStateTemp$usint AND 2#1 = 1);
    AxleStateChar[i-1] += '0';
    i -= 1;
    AxleStateTemp := AxleStateTemp SHR 1;
  end_while;
  Lengte := sizeof(AxleStateChar);
  CNCState.WriteDataOff(udLen:= Lengte, udOff:=0, pData:= #AxleStateChar$usint);

// SDDDrive State
  i := 32;
  DriveI_status := I_STATUS;
  while i > 0 do
    SDDDriveStateChar[i-1] := (DriveI_status$usint AND 2#1 = 1);
    SDDDriveStateChar[i-1] += '0';
    i -= 1;
    DriveI_status := DriveI_status SHR 1;
  end_while;
  Lengte := sizeof(SDDDriveStateChar);
  SDDDriveState.WriteDataOff(udLen:= Lengte, udOff:=0, pData:= #SDDDriveStateChar$usint);
  
  
// SDDDriveError
  i := 32;
  SDDDriveI_derror := I_DERROR;
  while i > 0 do
    SDDDriveErrorChar[i-1] := (SDDDriveI_derror$usint AND 2#1 = 1);
    SDDDriveErrorChar[i-1] += '0';
    i -= 1;
    SDDDriveI_derror := SDDDriveI_derror SHR 1;
  end_while;
  Lengte := sizeof(SDDDriveErrorChar);
  SDDDriveError.WriteDataOff(udLen:= Lengte, udOff:=0, pData:= #SDDDriveErrorChar$usint);
  
  
 // Drive State word
  i := 32;
  DriveStateWordTemp := DriveStateWord;
  while i > 0 do
    DriveStateChar[i-1] := (DriveStateWordTemp$usint AND 2#1 = 1);
    DriveStateChar[i-1] += '0';
    i -= 1;
    DriveStateWordTemp := DriveStateWordTemp SHR 1;
  end_while;
  Lengte := sizeof(DriveStateChar);
  DriveStateW.WriteDataOff(udLen:= Lengte, udOff:=0, pData:= #DriveStateChar$usint);
  
 

  Enabled := (AxleState.PowerOn = 1);
  Homed   := (AxleState.IsReferenced = 1);

  if eenmaal = 1 then 
    // #pvo 150924
    LMC.ExUnits :=  ExUnits;
    LMC.ExUnits.Write(input:=ExUnits);

    LMC.IntUnits := IntUnits;
    LMC.IntUnits.Write(input:=IntUnits);

    LMC.VMax := MaxSpeed;
    LMC.VMax.Write(input:=MaxSpeed);

    LMC.AMax := MaxAccDec;
    LMC.AMax.Write(input:=MaxAccDec);

    LMC.Tjerk := Tjerk;
    LMC.Tjerk.Write(input:=Tjerk);

    LMC.MoveType := MoveType;
    LMC.MoveType.Write(input:=MoveType);
    
    LMC.SWMinPos := SwMinPos;
    LMC.SWMinPos.Write(input:=SwMinPos);
    
    LMC.SWMaxPos:= SwMaxPos;
    LMC.SWMaxPos.Write(input:=SwMaxPos);
    
    LMC.Modulo := Modulo;
    LMC.Modulo.Write(input:= Modulo);
  
    if IsClientConnected(#LMC2) then
    // #pvo 150924
      LMC2.ExUnits :=  ExUnits;
      LMC2.ExUnits.Write(input:=ExUnits);

      LMC2.IntUnits := IntUnits;
      LMC2.IntUnits.Write(input:=IntUnits);

      LMC2.VMax := MaxSpeed;
      LMC2.VMax.Write(input:=MaxSpeed);

      LMC2.AMax := MaxAccDec;
      LMC2.AMax.Write(input:=MaxAccDec);

      LMC2.Tjerk := Tjerk;
      LMC2.Tjerk.Write(input:=Tjerk);

      LMC2.MoveType := MoveType;
      LMC2.MoveType.Write(input:=MoveType);
      
      LMC2.SWMinPos := SwMinPos;
      LMC2.SWMinPos.Write(input:=SwMinPos);
      
      LMC2.SWMaxPos:= SwMaxPos;
      LMC2.SWMaxPos.Write(input:=SwMaxPos);
      
      LMC2.Modulo := Modulo;
      LMC2.Modulo.Write(input:= Modulo);
    end_if;   
  
    if IsClientConnected(#LMC3) then
    // #pvo 150924
      LMC3.ExUnits :=  ExUnits;
      LMC3.ExUnits.Write(input:=ExUnits);

      LMC3.IntUnits := IntUnits;
      LMC3.IntUnits.Write(input:=IntUnits);

      LMC3.VMax := MaxSpeed;
      LMC3.VMax.Write(input:=MaxSpeed);

      LMC3.AMax := MaxAccDec;
      LMC3.AMax.Write(input:=MaxAccDec);

      LMC3.Tjerk := Tjerk;
      LMC3.Tjerk.Write(input:=Tjerk);

      LMC3.MoveType := MoveType;
      LMC3.MoveType.Write(input:=MoveType);
      
      LMC3.SWMinPos := SwMinPos;
      LMC3.SWMinPos.Write(input:=SwMinPos);
      
      LMC3.SWMaxPos:= SwMaxPos;
      LMC3.SWMaxPos.Write(input:=SwMaxPos);
      
      LMC3.Modulo := Modulo;
      LMC3.Modulo.Write(input:= Modulo);
    end_if;   

     eenmaal := 0;
  end_if;



END_FUNCTION

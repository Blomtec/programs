//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "ResetErrSafety"
	Revision           = "0.0"
	GUID               = "{92248146-F6F0-4617-8795-9D7538B00DE4}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(450,180)">
	<Channels>
		<Server Name="Comm" GUID="{8BA173C9-784F-4C8F-874A-F17D020DD92C}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Client Name="iCheckErr" Required="true" Internal="false"/>
		<Client Name="oQuitCommErr" Required="true" Internal="false"/>
		<Client Name="Standard1" Required="true" Internal="true"/>
		<Client Name="TEST" Required="false" Internal="false"/>
	</Channels>
	<Network Name="ResetErrSafety">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name           = "Standard1"
				GUID           = "{7AB8433F-1180-4A6A-B113-64BD244B85B1}"
				Class          = "Standard"
				Position       = "(360,180)"
				Visualized     = "false"
				BackgroundTime = "1000 ms">
				<Channels>
					<Server Name="ClassSvr"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.Standard1" Destination="Standard1.ClassSvr"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
ResetErrSafety : CLASS
  //Servers:
	Comm 	: SvrChCmd_DINT;
  //Clients:
	iCheckErr 	: CltCh_DINT;
	oQuitCommErr 	: CltCh_DINT;
	Standard1 	: CltChCmd_Standard;
	TEST 	: CltCh_DINT;
  //Variables:
		ResetError 	: DINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Comm::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using Standard


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB ResetErrSafety::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_RESETERRSAFETY
0$UINT, 0$UINT, (SIZEOF(::ResetErrSafety))$UINT, 
1$UINT, 4$UINT, 0$UINT, 
TO_UDINT(938620715), "ResetErrSafety", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::ResetErrSafety.Comm.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(2660888151), "Comm", 
//Clients:
(::ResetErrSafety.iCheckErr.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(866417085), "iCheckErr", 
(::ResetErrSafety.oQuitCommErr.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1161519622), "oQuitCommErr", 
(::ResetErrSafety.Standard1.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2411475140), "Standard1", TO_UDINT(3603188683), "Standard", 6$UINT, 1$UINT, 
(::ResetErrSafety.TEST.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(4008350648), "TEST", 
END_FUNCTION


#define USER_CNT_ResetErrSafety 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_ResetErrSafety] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION ResetErrSafety::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_ResetErrSafety, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Write		:= #Write();
	Comm.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF Comm.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL ResetErrSafety::Comm::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	Comm := input;
  
  // Check for error
  if TEST.Read() <> 0 then
    if Standard1.R_TRIG(CLK:= Comm) then
      oQuitCommErr := 1;
      oQuitCommErr.Write(input:= oQuitCommErr); // Write to output
    end_if;
  elsif Standard1.F_TRIG(CLK:= Comm) then
    oQuitCommErr := 0;
    oQuitCommErr.Write(input:= oQuitCommErr); // Write to output
  end_if;

END_FUNCTION

//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "TestPositionTrigger"
	Revision           = "1.1"
	GUID               = "{18827E89-B08D-4B32-8E72-7DEACC93F4E0}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(480,240)">
	<Channels>
		<Server Name="ProdsPerMin" GUID="{9AF176E2-2AC2-4F8A-933E-E30B1E8A30CA}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="File"/>
		<Server Name="TestTriggerOn" GUID="{8FC10321-E13A-4C08-A2A9-AC34A646BB93}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Trigger" GUID="{0B07300D-5968-4DEB-B27C-A326F13F4BBB}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Client Name="iActive" Required="false" Internal="false"/>
		<Client Name="iFcTrigger" Required="true" Internal="false"/>
		<Client Name="Position1" Required="false" Internal="false"/>
		<Client Name="Position2" Required="false" Internal="false"/>
		<Client Name="Position3" Required="false" Internal="false"/>
		<Client Name="Position4" Required="false" Internal="false"/>
		<Client Name="Position5" Required="false" Internal="false"/>
		<Client Name="STD" Required="true" Internal="true"/>
	</Channels>
	<Network Name="TestPositionTrigger">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name           = "STD"
				GUID           = "{0F0316CB-B2C7-4615-BEE4-73AC36C75251}"
				Class          = "Standard"
				Position       = "(210,360)"
				Visualized     = "false"
				BackgroundTime = "1000 ms">
				<Channels>
					<Server Name="ClassSvr"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.STD" Destination="STD.ClassSvr"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
TestPositionTrigger : CLASS
  //Servers:
	Trigger 	: SvrChCmd_DINT;
	TestTriggerOn 	: SvrCh_DINT;
	ProdsPerMin 	: SvrCh_DINT;
  //Clients:
	iFcTrigger 	: CltCh_DINT;
	STD 	: CltChCmd_Standard;
	Position1 	: CltCh_DINT;
	Position2 	: CltCh_DINT;
	Position3 	: CltCh_DINT;
	Position4 	: CltCh_DINT;
	Position5 	: CltCh_DINT;
	iActive 	: CltCh_DINT;
  //Variables:
		Time_ms 	: UDINT;
		TmrMaintrigger 	: UDINT;
		NbrOfPositions 	: DINT;
		ActPosNbr 	: DINT;
  //Functions:
	
	FUNCTION GLOBAL PositionState
		VAR_OUTPUT
			State 	: ePosState;
		END_VAR;
	
	FUNCTION GLOBAL TestCycle
		VAR_OUTPUT
			State 	: TriggerStr;
		END_VAR;
	
	FUNCTION GLOBAL NormalCycle
		VAR_OUTPUT
			State 	: TriggerStr;
		END_VAR;
	
	FUNCTION GLOBAL ReadTrigger
		VAR_OUTPUT
			State 	: TriggerStr;
		END_VAR;
	
	FUNCTION GLOBAL SetNbrOfPositions
		VAR_INPUT
			Nbr 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using Standard


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB TestPositionTrigger::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_TESTPOSITIONTRIGGER
1$UINT, 1$UINT, (SIZEOF(::TestPositionTrigger))$UINT, 
3$UINT, 8$UINT, 0$UINT, 
TO_UDINT(2570117329), "TestPositionTrigger", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::TestPositionTrigger.Trigger.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(623833415), "Trigger", 
(::TestPositionTrigger.TestTriggerOn.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(200491512), "TestTriggerOn", 
(::TestPositionTrigger.ProdsPerMin.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(622680057), "ProdsPerMin", 
//Clients:
(::TestPositionTrigger.iFcTrigger.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(872273318), "iFcTrigger", 
(::TestPositionTrigger.STD.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1054692386), "STD", TO_UDINT(3603188683), "Standard", 6$UINT, 1$UINT, 
(::TestPositionTrigger.Position1.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(836893671), "Position1", 
(::TestPositionTrigger.Position2.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(2833820253), "Position2", 
(::TestPositionTrigger.Position3.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(3757021899), "Position3", 
(::TestPositionTrigger.Position4.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1099632488), "Position4", 
(::TestPositionTrigger.Position5.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(915161086), "Position5", 
(::TestPositionTrigger.iActive.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1188787699), "iActive", 
END_FUNCTION


#define USER_CNT_TestPositionTrigger 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_TestPositionTrigger] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION TestPositionTrigger::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_TestPositionTrigger, pCmd := #vmt.CmdTable);
	Trigger.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF Trigger.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	TestTriggerOn.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF TestTriggerOn.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ProdsPerMin.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF ProdsPerMin.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION GLOBAL TestPositionTrigger::ReadTrigger
	VAR_OUTPUT
		State 	: TriggerStr;
	END_VAR

  // Is this funtion active?
  if IsClientConnected(#iActive) then
    iActive := iActive.Read();
  else
    iActive := 1;
  end_if;  
  
  // Choose test cycle or normal cycle
  if iActive = 1 then
    if TestTriggerOn = 1 then
      State := TestCycle();
    else
      State := NormalCycle();
    end_if;
  end_if;

END_FUNCTION

FUNCTION GLOBAL TestPositionTrigger::PositionState
	VAR_OUTPUT
		State 	: ePosState;
	END_VAR
  
  if Position1.Read() = 1 then
    State := ePos1;
  elsif Position2.Read() = 1 then
    State := ePos2;
  elsif Position3.Read() = 1 then
    State := ePos3;
  elsif Position4.Read() = 1 then
    State := ePos4;
  elsif Position5.Read() = 1 then
    State := ePos5;
  end_if;

END_FUNCTION

FUNCTION GLOBAL TestPositionTrigger::TestCycle
	VAR_OUTPUT
		State 	: TriggerStr;
	END_VAR
  
  // Calculate timestamp
  if ProdsPerMin > 0 then
    Time_ms := 60000 / (to_udint ProdsPerMin); 
  end_if;
  
  // Test cycle, choose position step by step
  if (ops.tAbsolute - TmrMaintrigger) >= Time_ms then
    if ActPosNbr >= NbrOfPositions then
      ActPosNbr := 0;
    end_if;
    ActPosNbr += 1;
    State.TriggerState  := 1;
    State.PositionState := ActPosNbr$ePosState;
    // Reset timer
    TmrMaintrigger := ops.tAbsolute;
  else
    State.TriggerState := 0;
  end_if;
  
  
  // Reset trigger state
//  if STD.TON(IN:= State.TriggerState, PT:= 20) then
//    State.TriggerState := 0;
//  end_if;
  
END_FUNCTION

FUNCTION GLOBAL TestPositionTrigger::NormalCycle
	VAR_OUTPUT
		State 	: TriggerStr;
	END_VAR
  
  State.PositionState := PositionState();
  State.TriggerState  := iFcTrigger.Read();

END_FUNCTION

FUNCTION GLOBAL TestPositionTrigger::SetNbrOfPositions
	VAR_INPUT
		Nbr 	: DINT;
	END_VAR
  
  NbrOfPositions := Nbr;

END_FUNCTION

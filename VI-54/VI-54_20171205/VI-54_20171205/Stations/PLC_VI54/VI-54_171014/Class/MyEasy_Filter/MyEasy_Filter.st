//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION
#include "..\..\Class\MyEasy_Filter\FilterSetting.h"

(*!
<Class
	Name               = "MyEasy_Filter"
	Revision           = "0.0"
	GUID               = "{3BDA1C0F-AFAE-400B-BC44-C51A403D2C00}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(480,240)">
	<Channels>
		<Client Name="Div" Required="true" Internal="false"/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Class\MyEasy_Filter\FilterSetting.h" Include="true"/>
		</Files>
	</Dependencies>
	<Network Name="MyEasy_Filter">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{072B562D-3B83-4683-BD13-F7D2923ECE6D}"
				Class      = "Easy_Filter"
				Position   = "(218,120)"
				Visualized = "true">
				<Channels>
					<Server Name="output"/>
					<Client Name="averages"/>
					<Client Name="input"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.output" Destination="_base.output" Vertices="(690,210),(518,210),"/>
			<Connection Source="_base.input" Destination="this.input" Vertices="(218,210),(38,210),"/>
			<Connection Source="_base.averages" Destination="this.averages" Vertices="(218,270),(38,270),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using Easy_Filter

MyEasy_Filter : CLASS
: Easy_Filter
  //Servers:
  //Clients:
	Div 	: CltCh_DivEnum;
  //Variables:
		FilterValues : ARRAY [0..Meetingen] OF DINT;

		divide 	: DINT;
  //Functions:
				//! <Function Comment="****************************************************************&#13;&#10;   Easy Digital Filter&#13;&#10;   Filter is only averaging the inputvalue&#13;&#10;****************************************************************&#13;&#10;     Created   :   BS  :   KW46/2001&#13;&#10;****************************************************************&#13;&#10;****************************************************************&#13;&#10;   Einfaches digitales Filter&#13;&#10;   Filter berechnet den Mittelwert der Eingabewerte.&#13;&#10;****************************************************************&#13;&#10;     erstellt  :   BS  :   KW46/2001&#13;&#10;****************************************************************&#13;&#10;" Name="CyWork"/>
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT := EAX;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION GLOBAL Div_Filter
		VAR_OUTPUT
			State 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB MyEasy_Filter::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_MYEASY_FILTER
0$UINT, 0$UINT, (SIZEOF(::MyEasy_Filter))$UINT, 
0$UINT, 1$UINT, 0$UINT, 
TO_UDINT(1756707777), "MyEasy_Filter", //Class
TO_UDINT(1463115239), "Easy_Filter", 1$UINT, 0$UINT, //Baseclass
//Servers:
//Clients:
(::MyEasy_Filter.Div.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(727841923), "Div", 
END_FUNCTION


#define USER_CNT_MyEasy_Filter 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_MyEasy_Filter] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION MyEasy_Filter::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= Easy_Filter::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= Easy_Filter::output.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, Easy_Filter::output.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_MyEasy_Filter;
	vmt.CmdTable.CyWork		:= #CyWork();
	Easy_Filter::output.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF Easy_Filter::output.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL MyEasy_Filter::CyWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR
  
  case Div of
  eDiv1:input   	:= input.read() / 1;
        divide    := 1;
  eDiv10:input   	:= input.read() / 10;
        divide    := 10;
  eDiv100:input 	:= input.read() / 100;
        divide    := 100;
  eDiv1000:input  := input.read() / 1000;
        divide    := 1000;
  else
    div := div.Read();
    divide  := to_dint(Div);
  end_case;
	
	averages	:= averages.read();

	index_F += 1;

	IF averages <= 0 THEN
		index_F := 0;
	ELSIF index_F >= Averages THEN
		index_F := 0;
		first_full := 1;
	END_IF;

	Sum := Sum - FilterValues[index_F] + input;
	FilterValues[index_F] := input;

	IF averages > 0 & (index_F | first_Full) THEN
		IF averages > Meetingen | averages < 0 THEN
			averages := Meetingen;
        END_IF;
		output := Sum / TO_DINT(averages);
	ELSE
		output := input;
	END_IF;

	state := READY$UDINT;


END_FUNCTION


FUNCTION GLOBAL MyEasy_Filter::Div_Filter
	VAR_OUTPUT
		State 	: DINT;
	END_VAR
  
  State := Divide;

END_FUNCTION

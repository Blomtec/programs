//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
#RE_IN_DE
#pragma define (store)
_AxisBase : CLASS_PUBLIC
	TYPE
	  _LMCAXIS_POSINFOMODE :
	  (
	    POSINFO_TIME,
	    POSINFO_DISTANCE
	  )$UDINT;
	  _LMCAXIS_READPARAMETER_LREAL :
	  (
	    LMCAXIS_PAR_RD2_JMAX
	  )$UDINT;
	  CmdControl :
	  (
	    IPRPowerOn,
	    IPRPowerOff,
	    IPRMoveRelative,
	    IPRMoveAbsolute,
	    IPRMoveReference,
	    IPRMoveEndless,
	    IPRMoveHand,
	    IPRStopMove,
	    IPRCoupleGearVelocity,
	    IPRCoupleDeltaPos,
	    IPRCoupleUserPos,
	    IPRCoupleProfilePos,
	    IPRCoupleGearRelative,
	    IPRCoupleGearAbsolute,
	    IPRCoupleCurveTab,
	    IPRSetSWEndPos,
	    IPRSetPosition,
	    IPRChangeCoupleSettings,
	    IPRTuneAxis,
	    IPRReadPosition,
	    IPRReadVelocity,
	    IPRInPosition,
	    IPRReadAxisStatus,
	    IPRReadAxisError,
	    IPRReadMasterInfo,
	    IPRSetFollowMode,
	    IPRReferenceReady,
	    IPRInpositionOk,
	    IPRCoupleGearPolynom,
	    IPRSetParameter,
	    IPRSetAdjustment,
	    IPRReadParameter,
	    IPRReadSWEndPos,
	    IPRCalcMovingTime,
	    IPRQuitError,
	    IPRCalcMaxSlavePath,
	    IPRCalcExtToAppliPos,
	    IPRReadUserData,
	    IPRGetMasterInformation,
	    IPR_SetErrorToMasterCoupleMonitoring
	  )$UINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
_FileExplorer : CLASS_PUBLIC
	TYPE
	  Exec :
	  (
	    ExecIdle,
	    ExecLoad,
	    ExecSave,
	    ExecMark,
	    ExecUnMark,
	    ExecPaste,
	    ExecDelete,
	    ExecMkDir,
	    ExecUpdate,
	    ExecPanic,
	    ExecRename,
	    ExecOverwrite
	  )$UDINT;
	  FexSortCrit :
	  (
	    SortAz:=0,
	    SortAzInvert:=1,
	    SortDateTime:=2,
	    SortDateTimeInvert:=3,
	    SortSize:=4,
	    SortSizeInvert:=5
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
_LMCRefBase : CLASS_PUBLIC
	TYPE
#pragma pack(push, 1)
	  _LMCAXIS_REFDATA : STRUCT
	    Status : iprStates;
	    Velocity : DINT;
	    Acc : DINT;
	    vSetRef1 : DINT;
	    vSetRef2 : DINT;
	    PosWindow : DINT;
	    LatchPosRef : DINT;
	    Speed : DINT;
	  END_STRUCT;
#pragma pack(pop)
	  _LMCREF_READPARAMETER :
	  (
	    ZPULSE_DIST
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
#pragma InclDefBlk _LMCAxisBase
_LMCAxisBase : CLASS_PUBLIC
#include <.\lsl_st_systrace.h>
#include "..\Class\_LMCAxisBase\C_MathAxis.h"
#include "..\Class\_LMCAxisBase\_LMCTraceView.h"
	TYPE
	  _CommandList :
	  (
	    CPowerOn,
	    CPowerOff,
	    CInposition,
	    CMoveHand,
	    CMoveEndless,
	    CMoveAbsolut,
	    CMoveReference,
	    CMoveRelative,
	    CStopMove,
	    CCoupleGearAbsolute,
	    CCoupleGearRelative,
	    CCoupleGearVelocity,
	    CCoupleCurveTab,
	    CCoupleUserPos,
	    CCoupleDeltaPos,
	    CCoupleProfilePos,
	    CSetPosition,
	    CSetAutoOffset,
	    CSetCoupleParameter,
	    CSetParameter,
	    CReadPosition,
	    CSetSWEndPos,
	    CReadSWEndPos,
	    CReadAxisError,
	    CReadAxisStatus,
	    CReadMasterInfo,
	    CReadVelocity,
	    CReadParameter,
	    CTuneAxis:=28,
	    CInternModuloOverFlow:=29,
	    CFollowMode:=30,
	    CCoupleGearPolynom:=31,
	    CCoupleAdditivePosDiff:=32,
	    CCoupleCAM,
	    CMoveShortestWay,
	    CCalcMovingTime,
	    CQuitError,
	    CCalcMaxSlavePath,
	    CCalcExtToAppliPos,
	    CChangeMoveSettings,
	    CGetPosInfoBeforeRampDown,
	    CSetDynSWEndPos
	  )$UDINT;
	  _CoupleMonitorExtendedConfig : BDINT
	  [
	    1 ReportErrorToMaster,
	    2 ReportSlaveErrorToMaster,
	    3 ReportMasterErrorToSlave,
	    4 ReportSlaveErrorToSlave,
	    5 SwLimitMonitoring,
	    6 PowerOffMonitoring,
	  ];
	  _LogStruct : STRUCT
	    Command : _CommandList;
	    CommandoResult : _LMCAXIS_CMDERROR;
	    TimeStamp : UDINT;
	    RTStamp : UDINT;
	  END_STRUCT;
	  _LogFile : STRUCT
	    Logmode : DINT;
	    AccesNr : DINT;
	    LogData : ARRAY [0..101] OF _LogStruct;
	  END_STRUCT;
	END_TYPE
END_CLASS;
#pragma define (restore)
#pragma InclDefBlk _LMCMath_SO3
_LMCMath_SO3 : CLASS_PUBLIC
	TYPE
	  _ADVAN_MATRIX_ : ARRAY [0..2, 0..3] OF LREAL;
	  _FRAME_ : ARRAY [0..3, 0..3] OF LREAL;
#pragma pack(push, 1)
	  _VECTOR_ : STRUCT
	    v_x : LREAL;
	    v_y : LREAL;
	    v_z : LREAL;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _HOM_VEC_ : STRUCT
	    vec_r : _VECTOR_;
	    w : LREAL;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _POINT_ : STRUCT
	    e_x : DINT;
	    e_y : DINT;
	    e_z : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _ROT_GEOMETRY_ : STRUCT
	    Angle : DINT;
	    RotAxis : _POINT_;
	  END_STRUCT;
#pragma pack(pop)
	  _ROT_MODUS :
	  (
	    ACTIVE_ROTATION,
	    PASSIVE_ROTATION
	  )$UDINT;
	  _TENSOR_ : ARRAY [0..2, 0..2] OF LREAL;
	END_TYPE
END_CLASS;
#pragma define (restore)
_LMCBaseCoord : CLASS_PUBLIC
	TYPE
#pragma pack(push, 1)
	  _ROT_ANGLE_ : STRUCT
	    Offset_RotateX : DINT;
	    Offset_RotateY : DINT;
	    Offset_RotateZ : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _TEACH_POINTS_ : STRUCT
	    Origin : _LMCMath_SO3::_POINT_;
	    Point_X : _LMCMath_SO3::_POINT_;
	    Point_XY : _LMCMath_SO3::_POINT_;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
#pragma InclDefBlk _LMCMathFunctions
_LMCMathFunctions : CLASS_PUBLIC
#include "..\Class\_LMCMathFunctions\C_MathFunct.h"
	TYPE
	  _COORD_2D : ARRAY [0..1] OF DINT;
#pragma pack(push, 4)
	  _LMC_VECTOR3 : STRUCT
	    coord_x1 : LREAL;
	    coord_x2 : LREAL;
	    coord_x3 : LREAL;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
#pragma InclDefBlk _LMCProfileBase
_LMCProfileBase : CLASS_PUBLIC
#include <.\lsl_st_systrace.h>
#include "..\Class\_LMCProfileBase\C_MathProfile.h"
#include "..\Class\_LMCAxisBase\_LMCTraceView.h"
	TYPE
	  _LMCPROFTRANSMODESINT :
	  (
	    _LMC_EXACT_STOP,
	    _LMC_CONT_DIRECT_ACTIVE,
	    _LMC_CONT_DIRECT,
	    _LMC_SMOOTH_PARAB,
	    _LMC_SMOOTH_CUBIC,
	    _LMC_SMOOTH_5TH
	  )$UDINT;
#pragma pack(push, 4)
	  _LMCPROF_POSITIONS_INTERN : STRUCT
	    start : LREAL;
	    end : LREAL;
	  END_STRUCT;
#pragma pack(pop)
	  _LMCPROFAXISDATA : STRUCT
	    pos : _LMCPROF_POSITIONS_INTERN;
	    KoA : LREAL;
	    KoE : LREAL;
	    KoAorth : LREAL;
	    KoEorth : LREAL;
	    a1 : LREAL;
	    a2 : LREAL;
	    a3 : LREAL;
	    a4 : LREAL;
	    a5 : LREAL;
	  END_STRUCT;
	  _LMCPROF_CIRC_DEF_INTERN : BDINT
	  [
	    1 Axis1,
	    2 Axis2,
	    3 Axis3,
	    4 Axis4,
	    5 Axis5,
	    6 Axis6,
	    7 Axis7,
	    8 Axis8,
	    9 Axis9,
	    17 CircleCCW,
	  ];
	  _LMCPROFCIRCLEINDEXDEF : ARRAY [0.._LMC_MAX_AXIS-1] OF USINT;
	  _LMCPROFCIRCLEPLAINE :
	  (
	    NO_CIRCLE,
	    CIRCLE_2_AXIS,
	    CIRCLE_3_AXIS
	  )$UDINT;
#pragma pack(push, 4)
	  _LMCPROFCIRCLEDATA : STRUCT
	    xmp : DINT;
	    ymp : DINT;
	    zmp : DINT;
	    xstart : LREAL;
	    ystart : LREAL;
	    zstart : LREAL;
	    xortho : LREAL;
	    yortho : LREAL;
	    zortho : LREAL;
	    Radius : LREAL;
	    RadiusKor : LREAL;
	    ResidAngel : LREAL;
	    AlphaAnf : LREAL;
	    DeltaAlpha : LREAL;
	    CirclePlane : _LMCPROFCIRCLEPLAINE;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 4)
	  _LMCPROF_MoveData_Intern : STRUCT
	    pUserBuffer : ^_LMCPROF_MoveData;
	    pUserBufferNext : ^_LMCPROF_MoveData;
	    enCmdType : _LMCPROFCMDTYPES_INTERN;
	    enTransitionMode : _LMCPROFTRANSMODESINT;
	    dTransitionRadius : DINT;
	    bsCmdFlags : _LMCPROFINTCMDCONFIG;
	    stData : ARRAY [0.._LMC_MAX_AXIS-1] OF _LMCPROFAXISDATA;
	    ArcLength : LREAL;
	    PathLength : LREAL;
	    GroupPath : USINT;
	    bdCirAxis : _LMCPROF_CIRC_DEF_INTERN;
	    arCirIndex : _LMCPROFCIRCLEINDEXDEF;
	    stCirData : _LMCPROFCIRCLEDATA;
	    Vmax : LREAL;
	    Amax : LREAL;
	    Dmax : LREAL;
	    JMax : LREAL;
	    vNext : LREAL;
	    vNextLimit : LREAL;
	    vLimitDef : LREAL;
	    vLimit : LREAL;
	    vFStart : LREAL;
	    vFEnd : LREAL;
	    CoordSysNr : DINT;
	    SpecificMoveData : ARRAY [0..27] OF USINT;
	  END_STRUCT;
#pragma pack(pop)
	  CmdControl :
	  (
	    IPRSetBasicParameter,
	    IPRLockProfile,
	    IPRUnlockProfile,
	    IPRMoveLiniare,
	    IPRMoveCircle,
	    IPRProfileInPos,
	    IPRReadPos,
	    IPRProfileFinished,
	    IPRInitPosWin,
	    IPRProfAxisFinished,
	    IPRProfAxisInPos,
	    IPRPofChkType,
	    IPRPRofReadActError,
	    IPRProfReadLastIndex,
	    IPRProfDefMoveCircle,
	    IPRProfMoveFinished,
	    IPRProfGetStartpos,
	    IPRProfGetFreeLines,
	    IPRProfGetResidualPath,
	    IPRProfStopMove,
	    IPRProfRestartMove,
	    IPRProfIsProfileStopped,
	    IPRProfReadActPosition,
	    IPRProfSetOverride,
	    IPRProfReadOverride,
	    IPRProfReadEntryIndex,
	    IPRProfReadActSubError,
	    IPRSetAxisParameter,
	    IPRSetProfileParameter,
	    IPRCoupleGearAbsolute,
	    IPRCoupleGearRelative,
	    IPRCoupleGearVelocity,
	    IPRCoupleCurveTab,
	    IPRCoupleUserPos,
	    IPRCoupleProfilePos,
	    IPRCoupleGearPolynom,
	    IPRReadAxisState,
	    IPRGetBrakePositions,
	    IPRGetLinBrakePoint,
	    IPRGetRotBrakePoint,
	    IPRReadCmdIndex,
	    IPRReadProfileActValues,
	    IPRGetMoveFinished,
	    IPRReadResidualTime,
	    IPRGetBufferData,
	    IPRReadTimebase,
	    IPRProfileMoveRelative,
	    IPRLockProfileRestart,
	    IPRLockProfileStartLineNo,
	    IPRSetRestartPointIPR,
	    IPRReadRestartPos,
	    IPRContinueNCProg,
	    IPRReadRestartInfo,
	    IPRProfGetStartposRestart,
	    IPRReadCommonCalcParas,
	    IPRLockProfileStartFileOffset,
	    IPRLockProfileRestartFileOffset,
	    IPRSetRestartPoint,
	    IPRSetAxesPositionsG92,
	    IPRSetAxesPositionsG92Live,
	    IPRSetProfileInPos,
	    IPRReadProfileActValuesLREAL,
	    IPRActivateCmdByLMCCNCIpr,
	    IPRSetLMCCNCIprMode,
	    IPRIsRestartPointReached,
	    IPRReadLastPathLength
	  )$UINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
_LMCProfileBuffer : CLASS_PUBLIC
	TYPE
	  _BUFFER_PARAMETER_ :
	  (
	    Max_Entries,
	    HiRes,
	    MaxEntries_TmpBuffer,
	    LMCCNC_IPR_MODE
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
#pragma InclDefBlk _LMCProfileLog
_LMCProfileLog : CLASS_PUBLIC
	TYPE
	  _LMCLogCmdList :
	  (
	    CEmpty,
	    CSetBasicParameter,
	    CLockProfile,
	    CUnlockProfile,
	    CMoveLinear,
	    CMoveCircle,
	    CMoveRelative,
	    CCircleDefinition,
	    CStopMove,
	    CSetAxisParameter,
	    CReadAxisParameter,
	    CSetGroupParameter,
	    CReadGroupParameter,
	    CSetProfileParameter,
	    CReadProfileParameter,
	    CProfileInPosition,
	    CReadPosition,
	    CReadProfileError,
	    CGetStartPositions,
	    CGetSlowestAxis,
	    CSetTimeBase,
	    CGetMoveFinished,
	    CGetBufferData,
	    CReadPosOffset,
	    CSetPosOffset,
	    CCalcResidualTime,
	    CCoupleGearAbsolute,
	    CCoupleGearRelative,
	    CCoupleGearVelocity,
	    CCoupleCurveTab,
	    CCoupleUserPos,
	    CCoupleProfilePos,
	    CCoupleGearPolynom,
	    CReadAxisState,
	    CReadCmdIndex,
	    CSetDynSWEndPos,
	    CReadProfileActValues,
	    CGetBrakePositions,
	    CChangeCoupleSettings,
	    CCoupleAdditivePosDiff,
	    CGetRemotePoint,
	    CLockProfileRestart,
	    CLockProfileStartLineNo,
	    CSetRestartPoint,
	    CReadRestartPos,
	    CContinueNCProg,
	    CReadRestartInfo,
	    CGetStartPositionsRestart,
	    CReadCommonCalcParas,
	    CSetProfilePositions,
	    CRobotOn,
	    CRobotOff,
	    CRobotIsOn,
	    CMoveLinearBelt,
	    CMoveRelativeTCP,
	    CGetRobotPosition,
	    CReadRobotParameter,
	    CSetRobotParameter,
	    CAxMoveHand,
	    CAxMoveEndless,
	    CAxMoveAbsolute,
	    CAxMoveShortestWay,
	    CAxMoveReference,
	    CAxMoveRelative,
	    CAxStopMove,
	    CAxTuneAxis,
	    CAxSetPosition,
	    CAxQuitError,
	    CAxReadAxisError,
	    CAxReadParameter,
	    CAxReadSWEndPos,
	    CAxInPosition,
	    CAxSetParameter,
	    CGetAxInformation,
	    CLockProfileStartFileOffset,
	    CLockProfileRestartFileOffset,
	    CSetRestartPointFileOffset,
	    CAxReadPosition,
	    CAxSetFollowMode,
	    CMoveCurve,
	    CMoveCurveBelt,
	    CAxSetAdjustment
	  )$UDINT;
#pragma pack(push, 1)
	  _LogStruct : STRUCT
	    CmdCode : _LMCLogCmdList;
	    RetCode : _LMCPROFERRORTYPES;
	    TimeStamp : UDINT;
	    CmdParameter : ARRAY [0..140] OF SINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogFile : STRUCT
	    LogData : ARRAY [0..MAX_LOG_BUFFER_INDEX+1] OF _LogStruct;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCalcResidualTime : STRUCT
	    Mode : _LMCPROF_RESTIME_CALCMODE;
	    ResidualTime : UDINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParChangeCoupleSettings : STRUCT
	    AxisNo : DINT;
	    CoupleMode : _LMCPROF_EXECUTE;
	    MaxVel : DINT;
	    MaxAcc : DINT;
	    DeltaPos : DINT;
	    GearMul : DINT;
	    GearDiv : DINT;
	    MaxJerk : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCircleDefinition : STRUCT
	    CircleDef : _LMCPROFCIRCLEDEF;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParContinueNCProg : STRUCT
	    PosWindow : DINT;
	    DelayTime : UDINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleAdditivePosDiff : STRUCT
	    AxisNo : DINT;
	    pPosdiff : ^DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleCurveTab : STRUCT
	    AxisNo : DINT;
	    CoupleMode : _LMCPROF_EXECUTE;
	    MaxVel : DINT;
	    MaxAcc : DINT;
	    DeltaPos : DINT;
	    pMaster : ^MasterStruct;
	    GearMul : DINT;
	    GearDiv : DINT;
	    Mode : _LMCAXIS_CURVETABMODE;
	    pCurveData : ^_LMCAXIS_CURVE;
	    MaxJerk : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleGearAbsolute : STRUCT
	    AxisNo : DINT;
	    CoupleMode : _LMCPROF_EXECUTE;
	    MaxVel : DINT;
	    MaxAcc : DINT;
	    DeltaPos : DINT;
	    pMaster : ^MasterStruct;
	    GearMul : DINT;
	    GearDiv : DINT;
	    MaxJerk : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleGearPolynom : STRUCT
	    AxisNo : DINT;
	    CoupleMode : _LMCPROF_EXECUTE;
	    MaxVel : DINT;
	    MaxAcc : DINT;
	    pMaster : ^MasterStruct;
	    GearMul : DINT;
	    GearDiv : DINT;
	    sMaster : DINT;
	    sSlave : DINT;
	    MaxJerk : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleGearRelative : STRUCT
	    AxisNo : DINT;
	    CoupleMode : _LMCPROF_EXECUTE;
	    MaxVel : DINT;
	    MaxAcc : DINT;
	    pMaster : ^MasterStruct;
	    GearMul : DINT;
	    GearDiv : DINT;
	    MaxJerk : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleGearVelocity : STRUCT
	    AxisNo : DINT;
	    CoupleMode : _LMCPROF_EXECUTE;
	    MaxVel : DINT;
	    MaxAcc : DINT;
	    pMaster : ^MasterStruct;
	    GearMul : DINT;
	    GearDiv : DINT;
	    MaxJerk : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleProfilePos : STRUCT
	    AxisNo : DINT;
	    CoupleMode : _LMCPROF_EXECUTE;
	    MaxVel : DINT;
	    MaxAcc : DINT;
	    Mode : _LMCPROF_RECOUPLEMODE;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleUserPos : STRUCT
	    AxisNo : DINT;
	    CoupleMode : _LMCPROF_EXECUTE;
	    MaxVel : DINT;
	    MaxAcc : DINT;
	    pMasterPos : ^DINT;
	    DeltaPos : DINT;
	    GearMul : DINT;
	    GearDiv : DINT;
	    Mode : _LMCAXIS_COUPLE_GEAR_MODE;
	    MaxJerk : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetBrakePositions : STRUCT
	    Pos : _LMCPROF_POS;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetBufferData : STRUCT
	    index : UDINT;
	    MoveData : _LMCPROF_MoveData;
	    RetCode : iprStates;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetMoveFinished : STRUCT
	    index : UDINT;
	    RetCode : iprStates;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetRemotePoint : STRUCT
	    RemoteDist : DINT;
	    RemoteTime : DINT;
	    ActualVel : DINT;
	    RemoteVel : DINT;
	    ActualAccel : DINT;
	    ProfileAccel : DINT;
	    Tjerk : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetSlowestAxis : STRUCT
	    Dest : _LMCPROF_POS;
	    usAxis : USINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetStartPositions : STRUCT
	    StartPos : _LMCPROF_POS;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetStartPositionsRestart : STRUCT
	    StartPos : _LMCPROF_POS;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParLockProfile : STRUCT
	    Axis1 : DINT;
	    Axis2 : DINT;
	    Axis3 : DINT;
	    Axis4 : DINT;
	    Axis5 : DINT;
	    Axis6 : DINT;
	    Axis7 : DINT;
	    Axis8 : DINT;
	    Axis9 : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParLockProfileRestart : STRUCT
	    Axis1 : DINT;
	    Axis2 : DINT;
	    Axis3 : DINT;
	    Axis4 : DINT;
	    Axis5 : DINT;
	    Axis6 : DINT;
	    Axis7 : DINT;
	    Axis8 : DINT;
	    Axis9 : DINT;
	    PathOffset : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParLockProfileStartLineNo : STRUCT
	    Axis1 : DINT;
	    Axis2 : DINT;
	    Axis3 : DINT;
	    Axis4 : DINT;
	    Axis5 : DINT;
	    Axis6 : DINT;
	    Axis7 : DINT;
	    Axis8 : DINT;
	    Axis9 : DINT;
	    PathOffset : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParMoveCircle : STRUCT
	    Positions : _LMCPROF_POS;
	    MiddlePoint : _LMCPROF_CIRCLEPOINT;
	    InterPoint : _LMCPROF_CIRCLEPOINT;
	    CircleDef : _LMCPROFCIRCLEDEF;
	    CmdConfig : _LMCPROFCMDCONFIG;
	    Velocity : DINT;
	    Accel : DINT;
	    Decel : DINT;
	    TransMode : _LMCPROFTRANSMODES;
	    TransRadius : DINT;
	    Jerk : DINT;
	    SetCoordSystem : DINT;
	    ActiveTool : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParMoveCurve : STRUCT
	    Positions : _LMCPROF_POS;
	    CmdConfig : _LMCPROFCMDCONFIG;
	    Velocity : DINT;
	    Accel : DINT;
	    Decel : DINT;
	    TransMode : _LMCPROFTRANSMODES;
	    TransRadius : DINT;
	    Obstacle : _LMCPROF_OBSTACLE;
	    Jerk : DINT;
	    SetCoordSystem : DINT;
	    ActiveTool : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParMoveLinear : STRUCT
	    Positions : _LMCPROF_POS;
	    CmdConfig : _LMCPROFCMDCONFIG;
	    Velocity : DINT;
	    Accel : DINT;
	    Decel : DINT;
	    TransMode : _LMCPROFTRANSMODES;
	    TransRadius : DINT;
	    Jerk : DINT;
	    SetCoordSystem : DINT;
	    ActiveTool : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParMoveRelative : STRUCT
	    Distances : _LMCPROF_POS;
	    CmdConfig : _LMCPROFCMDCONFIG;
	    Velocity : DINT;
	    Accel : DINT;
	    Decel : DINT;
	    TransMode : _LMCPROFTRANSMODES;
	    TransRadius : DINT;
	    Jerk : DINT;
	    SetCoordSystem : DINT;
	    ActiveTool : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParProfileInPosition : STRUCT
	    Mode : _LMCPROFINPOSTYPES;
	    RetCode : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadAxisParameter : STRUCT
	    AxisNo : DINT;
	    ParNo : _LMCPROFPARAMETERAXIS;
	    RetValue : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadAxisState : STRUCT
	    AxisNo : DINT;
	    AxisState : _LMCAXIS_STATUS;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadCmdIndex : STRUCT
	    Mode : _LMCPROF_CMDINDEX;
	    Index : UDINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadCommonCalcParas : STRUCT
	    CalcParas : _LMCCommonCalcParas;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _logParReadGroupParameter : STRUCT
	    GrpNo : DINT;
	    ParNo : _LMCPROFPARAMETERGROUPS;
	    RetValue : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadPosition : STRUCT
	    AxisNo : DINT;
	    Mode : DINT;
	    Position : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadPosOffset : STRUCT
	    PosOffset : _LMCPROF_POS;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadProfileActValues : STRUCT
	    Mode : _LMCPROF_ACTUALVALUES;
	    ActualValue : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadProfileError : STRUCT
	    ErrorInfo : _LMCPROFERRORDEF;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadProfileParameter : STRUCT
	    ParNo : _LMCPROFPARAMETER;
	    RetValue : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadRestartInfo : STRUCT
	    sRestart : LREAL;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _logParReadRestartPos : STRUCT
	    Positions : _LMCPROF_POS;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetAxisParameter : STRUCT
	    AxisNo : DINT;
	    ParNo : _LMCPROFPARAMETERAXIS;
	    Value : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetBasicParameter : STRUCT
	    VMax : DINT;
	    AMax : DINT;
	    Tjerk : DINT;
	    TangError : DINT;
	    PosOffset : _LMCPROF_POS;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetDynSWEndPos : STRUCT
	    AxNo : DINT;
	    pSWEndPos : ^DINT;
	    Mode : _LMC_DYN_SWLIMITS;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetGroupParameter : STRUCT
	    GrpNo : DINT;
	    ParNo : _LMCPROFPARAMETERGROUPS;
	    Value : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetPosOffset : STRUCT
	    PosOffset : _LMCPROF_POS;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetProfileParameter : STRUCT
	    ParNo : _LMCPROFPARAMETER;
	    Value : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetProfilePositions : STRUCT
	    Mode : _LMCPROF_SETPOS_MODE;
	    pApproxPos : ^_LMCPROF_POS;
	    pCallbackData : pVoid;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetRestartPointFileOffset : STRUCT
	    PathOffset : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetTimeBase : STRUCT
	    udTimeBase : UDINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParStopMove : STRUCT
	    Mode : DINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
_LMCPublisher : CLASS_PUBLIC
	TYPE
	  _Config_ : BDINT
	  [
	    1 VirtualAxis,
	    2 RealAxis,
	  ];
	  _LMCPublisher_Cmd :
	  (
	    _LOGINCMD:=123
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
_LMCRobotBase : CLASS_PUBLIC
	TYPE
#pragma pack(push, 1)
	  _AXDATA_ENTRY : STRUCT
	    ThisPtr : ^_AxisBase;
	    Config : BDINT
	    [
	      1 AxConnected,
	      2 ProfileAxis,
	      3 KinematicAxis,
	    ];
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _BELT_COUPLE_DATA : STRUCT
	    CoordSystem : DINT;
	    BeltDirection : DINT;
	    DesyncStart : DINT;
	    DesyncLength : DINT;
	    SyncStart : DINT;
	    SyncLength : DINT;
	    pMaster : ^MasterStruct;
	    BeltOffset : DINT;
	    GearMul : DINT;
	    GearDiv : DINT;
	  END_STRUCT;
#pragma pack(pop)
	  _ROBOT_MODE :
	  (
	    _ROBOT_PASSIVE,
	    _ROBOT_ACTIVE,
	    _ROBOT_DIRECT,
	    _ROBOT_ERROR,
	    _ROBOT_MODE_CHANGE
	  )$UDINT;
	  _PARAMETER :
	  (
	    _TIMEOUTS,
	    _ROBOT_STATE,
	    _DELAYED_MASTERLOCK,
	    _BELTCOUPLING_VEL_FILTER_DEPTH,
	    _STOPMOVE_POSITIONWINDOW,
	    _IS_CALCMODEL_CONNECTED,
	    _AXCOUNT_PROFILE,
	    _AXCOUNT_CALCMODEL,
	    _NOT_CALC_BOTH_KINEMATICS_OPTIMIZE
	  )$UDINT;
	  _POSITION_MODE :
	  (
	    _ACTPOS_APPUNITS,
	    _SETPOS_APPUNITS,
	    _PROFILE_POS_APPUNITS,
	    _ACTPOS_CALCMODEL_MOTORS,
	    _SETPOS_CALCMODEL_MOTORS
	  )$UDINT;
	  _ROBOT_ON_MODE :
	  (
	    _ACTIVE,
	    _DIRECT
	  )$UDINT;
	  _ROBOT_STATUS : BDINT
	  [
	    1 RobotIsOn,
	    2 IsReferenced,
	    3 LockedToBelt,
	    4 PowerIsOn,
	  ];
	END_TYPE
END_CLASS;
#pragma define (restore)
_LMCRobotLog : CLASS_PUBLIC
	TYPE
#pragma pack(push, 1)
	  _LogParAxInPosition : STRUCT
	    AxisNo : DINT;
	    Mode : _LMCAXIS_QUERY_POSITION_MODE;
	    PositionWindow : DINT;
	    Result : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParAxMoveAbsolute : STRUCT
	    AxisNo : DINT;
	    Position : DINT;
	    Speed : DINT;
	    Accel : DINT;
	    Decel : DINT;
	    Jerk : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParAxMoveEndless : STRUCT
	    AxisNo : DINT;
	    Speed : DINT;
	    Accel : DINT;
	    Jerk : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParAxMoveHand : STRUCT
	    AxisNo : DINT;
	    Speed : DINT;
	    Accel : DINT;
	    Jerk : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParAxMoveReference : STRUCT
	    AxisNo : DINT;
	    Mode : _LMCAXIS_REFMODE;
	    Position : DINT;
	    VRef1 : DINT;
	    VRef2 : DINT;
	    Accel : DINT;
	    PositionWindow : DINT;
	    Jerk : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParAxMoveRelative : STRUCT
	    AxisNo : DINT;
	    Position : DINT;
	    Mode : _LMCAXIS_MOVE_RELATIVE_MODE;
	    Speed : DINT;
	    Accel : DINT;
	    Decel : DINT;
	    Jerk : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParAxMoveShortestWay : STRUCT
	    AxisNo : DINT;
	    Position : DINT;
	    Speed : DINT;
	    Accel : DINT;
	    Decel : DINT;
	    Jerk : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParAxQuitError : STRUCT
	    AxisNo : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParAxReadAxisError : STRUCT
	    AxisNo : DINT;
	    AxisErrorInfo : _LMCAXIS_ERROR;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParAxReadParameter : STRUCT
	    AxisNo : DINT;
	    ParNr : _LMCAXIS_READPARAMETER;
	    mode : DINT;
	    Result : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParAxReadPosition : STRUCT
	    AxisNo : DINT;
	    Mode : _LMCAXIS_READPOS;
	    Position : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParAxReadSWEndPos : STRUCT
	    AxisNo : DINT;
	    Mode : _LMCAXIS_READSWENDPOS;
	    Position : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParAxSetFollowMode : STRUCT
	    AxisNo : DINT;
	    Mode : _LMCAXIS_FOLLOW_MODE;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParAxSetParameter : STRUCT
	    AxisNo : DINT;
	    ParNo : _LMCAXIS_SETPARAMETER;
	    Value : DINT;
	    Mode : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParAxSetPosition : STRUCT
	    AxisNo : DINT;
	    Mode : _LMCAXIS_SETPOSITION;
	    Position : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParAxStopMove : STRUCT
	    AxisNo : DINT;
	    Decel : DINT;
	    Jerk : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParAxTuneAxis : STRUCT
	    AxisNo : DINT;
	    Position : DINT;
	    Speed : DINT;
	    Accel : DINT;
	    Mode : _LMCAXIS_TUNE_MODE;
	    WaitTime : UDINT;
	    Jerk : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCalcResidualTime : STRUCT
	    Mode : _LMCPROF_RESTIME_CALCMODE;
	    ResidualTime : UDINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParChangeCoupleSettings : STRUCT
	    AxisNo : DINT;
	    CoupleMode : _LMCPROF_EXECUTE;
	    MaxVel : DINT;
	    MaxAcc : DINT;
	    DeltaPos : DINT;
	    GearMul : DINT;
	    GearDiv : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCircleDefinition : STRUCT
	    CircleDef : _LMCPROFCIRCLEDEF;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParContinueNCProg : STRUCT
	    PosWindow : DINT;
	    DelayTime : UDINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleAdditivePosDiff : STRUCT
	    AxisNo : DINT;
	    pPosdiff : ^DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleCurveTab : STRUCT
	    AxisNo : DINT;
	    CoupleMode : _LMCPROF_EXECUTE;
	    MaxVel : DINT;
	    MaxAcc : DINT;
	    DeltaPos : DINT;
	    pMaster : ^MasterStruct;
	    GearMul : DINT;
	    GearDiv : DINT;
	    Mode : _LMCAXIS_CURVETABMODE;
	    pCurveData : ^_LMCAXIS_CURVE;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleGearAbsolute : STRUCT
	    AxisNo : DINT;
	    CoupleMode : _LMCPROF_EXECUTE;
	    MaxVel : DINT;
	    MaxAcc : DINT;
	    DeltaPos : DINT;
	    pMaster : ^MasterStruct;
	    GearMul : DINT;
	    GearDiv : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleGearPolynom : STRUCT
	    AxisNo : DINT;
	    CoupleMode : _LMCPROF_EXECUTE;
	    MaxVel : DINT;
	    MaxAcc : DINT;
	    pMaster : ^MasterStruct;
	    GearMul : DINT;
	    GearDiv : DINT;
	    sMaster : DINT;
	    sSlave : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleGearRelative : STRUCT
	    AxisNo : DINT;
	    CoupleMode : _LMCPROF_EXECUTE;
	    MaxVel : DINT;
	    MaxAcc : DINT;
	    pMaster : ^MasterStruct;
	    GearMul : DINT;
	    GearDiv : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleGearVelocity : STRUCT
	    AxisNo : DINT;
	    CoupleMode : _LMCPROF_EXECUTE;
	    MaxVel : DINT;
	    MaxAcc : DINT;
	    pMaster : ^MasterStruct;
	    GearMul : DINT;
	    GearDiv : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleProfilePos : STRUCT
	    AxisNo : DINT;
	    CoupleMode : _LMCPROF_EXECUTE;
	    MaxVel : DINT;
	    MaxAcc : DINT;
	    Mode : _LMCPROF_RECOUPLEMODE;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleUserPos : STRUCT
	    AxisNo : DINT;
	    CoupleMode : _LMCPROF_EXECUTE;
	    MaxVel : DINT;
	    MaxAcc : DINT;
	    pMasterPos : ^DINT;
	    DeltaPos : DINT;
	    GearMul : DINT;
	    GearDiv : DINT;
	    Mode : _LMCAXIS_COUPLE_GEAR_MODE;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetAxInformation : STRUCT
	    AxisNo : DINT;
	    pAxData : ^_LMCRobotBase::_AXDATA_ENTRY;
	    Result : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetBrakePositions : STRUCT
	    Pos : _LMCPROF_POS;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetBufferData : STRUCT
	    index : UDINT;
	    MoveData : _LMCPROF_MoveData;
	    RetCode : iprStates;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetMoveFinished : STRUCT
	    index : UDINT;
	    RetCode : iprStates;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetRemotePoint : STRUCT
	    RemoteDist : DINT;
	    RemoteTime : DINT;
	    ActualVel : DINT;
	    RemoteVel : DINT;
	    ActualAccel : DINT;
	    ProfileAccel : DINT;
	    Tjerk : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetRobotPosition : STRUCT
	    Mode : _LMCRobotBase::_POSITION_MODE;
	    IncludeTool : BOOL;
	    CoordSystem : DINT;
	    Positions : _LMCPROF_POS;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetSlowestAxis : STRUCT
	    Dest : _LMCPROF_POS;
	    usAxis : USINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetStartPositions : STRUCT
	    StartPos : _LMCPROF_POS;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetStartPositionsRestart : STRUCT
	    StartPos : _LMCPROF_POS;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParLockProfile : STRUCT
	    Axis1 : DINT;
	    Axis2 : DINT;
	    Axis3 : DINT;
	    Axis4 : DINT;
	    Axis5 : DINT;
	    Axis6 : DINT;
	    Axis7 : DINT;
	    Axis8 : DINT;
	    Axis9 : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParLockProfileRestart : STRUCT
	    Axis1 : DINT;
	    Axis2 : DINT;
	    Axis3 : DINT;
	    Axis4 : DINT;
	    Axis5 : DINT;
	    Axis6 : DINT;
	    Axis7 : DINT;
	    Axis8 : DINT;
	    Axis9 : DINT;
	    PathOffset : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParLockProfileStartLineNo : STRUCT
	    Axis1 : DINT;
	    Axis2 : DINT;
	    Axis3 : DINT;
	    Axis4 : DINT;
	    Axis5 : DINT;
	    Axis6 : DINT;
	    Axis7 : DINT;
	    Axis8 : DINT;
	    Axis9 : DINT;
	    PathOffset : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParMoveCircle : STRUCT
	    Positions : _LMCPROF_POS;
	    MiddlePoint : _LMCPROF_CIRCLEPOINT;
	    InterPoint : _LMCPROF_CIRCLEPOINT;
	    CircleDef : _LMCPROFCIRCLEDEF;
	    CmdConfig : _LMCPROFCMDCONFIG;
	    Velocity : DINT;
	    Accel : DINT;
	    Decel : DINT;
	    TransMode : _LMCPROFTRANSMODES;
	    TransRadius : DINT;
	    Jerk : DINT;
	    SetCoordSystem : DINT;
	    ActiveTool : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParMoveCurve : STRUCT
	    Positions : _LMCPROF_POS;
	    CmdConfig : _LMCPROFCMDCONFIG;
	    Velocity : DINT;
	    Accel : DINT;
	    Decel : DINT;
	    TransMode : _LMCPROFTRANSMODES;
	    TransRadius : DINT;
	    Obstacle : _LMCPROF_OBSTACLE;
	    Jerk : DINT;
	    SetCoordSystem : DINT;
	    ActiveTool : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParMoveCurveBelt : STRUCT
	    Positions : _LMCPROF_POS;
	    CmdConfig : _LMCPROFCMDCONFIG;
	    Velocity : DINT;
	    Accel : DINT;
	    Decel : DINT;
	    TransMode : _LMCPROFTRANSMODES;
	    TransRadius : DINT;
	    Obstacle : _LMCPROF_OBSTACLE;
	    BeltData : _LMCRobotBase::_BELT_COUPLE_DATA;
	    Jerk : DINT;
	    ActiveTool : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParMoveLinear : STRUCT
	    Positions : _LMCPROF_POS;
	    CmdConfig : _LMCPROFCMDCONFIG;
	    Velocity : DINT;
	    Accel : DINT;
	    Decel : DINT;
	    TransMode : _LMCPROFTRANSMODES;
	    TransRadius : DINT;
	    Jerk : DINT;
	    SetCoordSystem : DINT;
	    ActiveTool : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParMoveLinearBelt : STRUCT
	    Positions : _LMCPROF_POS;
	    CmdConfig : _LMCPROFCMDCONFIG;
	    Velocity : DINT;
	    Accel : DINT;
	    Decel : DINT;
	    TransMode : _LMCPROFTRANSMODES;
	    TransRadius : DINT;
	    BeltData : _LMCRobotBase::_BELT_COUPLE_DATA;
	    Jerk : DINT;
	    ActiveTool : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParMoveRelative : STRUCT
	    Distances : _LMCPROF_POS;
	    CmdConfig : _LMCPROFCMDCONFIG;
	    Velocity : DINT;
	    Accel : DINT;
	    Decel : DINT;
	    TransMode : _LMCPROFTRANSMODES;
	    TransRadius : DINT;
	    Jerk : DINT;
	    SetCoordSystem : DINT;
	    ActiveTool : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParMoveRelativeTCP : STRUCT
	    Distances : _LMCPROF_POS;
	    CmdConfig : _LMCPROFCMDCONFIG;
	    Velocity : DINT;
	    Accel : DINT;
	    Decel : DINT;
	    TransMode : _LMCPROFTRANSMODES;
	    TransRadius : DINT;
	    Jerk : DINT;
	    ActiveTool : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParProfileInPosition : STRUCT
	    Mode : _LMCPROFINPOSTYPES;
	    RetCode : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadAxisParameter : STRUCT
	    AxisNo : DINT;
	    ParNo : _LMCPROFPARAMETERAXIS;
	    RetValue : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadAxisState : STRUCT
	    AxisNo : DINT;
	    AxisState : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadCmdIndex : STRUCT
	    Mode : _LMCPROF_CMDINDEX;
	    Index : UDINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadCommonCalcParas : STRUCT
	    CalcParas : _LMCCommonCalcParas;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _logParReadGroupParameter : STRUCT
	    GrpNo : DINT;
	    ParNo : _LMCPROFPARAMETERGROUPS;
	    RetValue : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadPosition : STRUCT
	    AxisNo : DINT;
	    Mode : DINT;
	    Position : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadPosOffset : STRUCT
	    PosOffset : _LMCPROF_POS;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadProfileActValues : STRUCT
	    Mode : _LMCPROF_ACTUALVALUES;
	    ActualValue : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadProfileError : STRUCT
	    ErrorInfo : _LMCPROFERRORDEF;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadProfileParameter : STRUCT
	    ParNo : _LMCPROFPARAMETER;
	    RetValue : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadRestartInfo : STRUCT
	    sRestart : LREAL;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _logParReadRestartPos : STRUCT
	    Positions : _LMCPROF_POS;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadRobotParameter : STRUCT
	    ParNo : _LMCRobotBase::_PARAMETER;
	    Mode : DINT;
	    RetValue : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParRobotIsOn : STRUCT
	    IsOn : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParRobotOn : STRUCT
	    Mode : _LMCRobotBase::_ROBOT_ON_MODE;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetAxisParameter : STRUCT
	    AxisNo : DINT;
	    ParNo : _LMCPROFPARAMETERAXIS;
	    Value : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetBasicParameter : STRUCT
	    VMax : DINT;
	    AMax : DINT;
	    Tjerk : DINT;
	    TangError : DINT;
	    PosOffset : _LMCPROF_POS;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetDynSWEndPos : STRUCT
	    AxNo : DINT;
	    pSWEndPos : ^DINT;
	    Mode : _LMC_DYN_SWLIMITS;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetGroupParameter : STRUCT
	    GrpNo : DINT;
	    ParNo : _LMCPROFPARAMETERGROUPS;
	    Value : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetPosOffset : STRUCT
	    PosOffset : _LMCPROF_POS;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetProfileParameter : STRUCT
	    ParNo : _LMCPROFPARAMETER;
	    Value : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetProfilePositions : STRUCT
	    Mode : _LMCPROF_SETPOS_MODE;
	    pApproxPos : ^_LMCPROF_POS;
	    pCallbackData : pVoid;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetRestartPointFileOffset : STRUCT
	    PathOffset : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetRobotParameter : STRUCT
	    ParNo : _LMCRobotBase::_PARAMETER;
	    Mode : DINT;
	    Value : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetTimeBase : STRUCT
	    udTimeBase : UDINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParStopMove : STRUCT
	    Mode : DINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
_LMCTool : CLASS_PUBLIC
	TYPE
#pragma pack(push, 1)
	  _TOOL_DATA_ : STRUCT
	    ToolIndex : DINT;
	    OffsetVector : _LMCMath_SO3::_POINT_;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
#pragma InclDefBlk AccessControlMain
AccessControlMain : CLASS_PUBLIC
	TYPE
	  t_a_USB_Serial : ARRAY [0..AccessControl_MaxUSBSNLength] OF CHAR;
#pragma pack(push, 1)
	  t_s_User : STRUCT
	    aUsername : ARRAY [0..AccessControl_MaxUsernameLength] OF CHAR;
	    aUserPassword : ARRAY [0..AccessControl_MaxPasswordLength] OF CHAR;
	    usUserLevel : USINT;
	    udUserTimeout : UDINT;
	    aUserInfo : ARRAY [0..AccessControl_MaxUserInfoLength] OF CHAR;
	    USBSerial : t_a_USB_Serial;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
Bit32Mask : CLASS_PUBLIC
	TYPE
	  T_BITS : BDINT
	  [
	    1 Bit1,
	    2 Bit2,
	    3 Bit3,
	    4 Bit4,
	    5 Bit5,
	    6 Bit6,
	    7 Bit7,
	    8 Bit8,
	    9 Bit9,
	    10 Bit10,
	    11 Bit11,
	    12 Bit12,
	    13 Bit13,
	    14 Bit14,
	    15 Bit15,
	    16 Bit16,
	    17 Bit17,
	    18 Bit18,
	    19 Bit19,
	    20 Bit20,
	    21 Bit21,
	    22 Bit22,
	    23 Bit23,
	    24 Bit24,
	    25 Bit25,
	    26 Bit26,
	    27 Bit27,
	    28 Bit28,
	    29 Bit29,
	    30 Bit30,
	    31 Bit31,
	    32 Bit32,
	  ];
	END_TYPE
END_CLASS;
#pragma define (restore)
DataManagerFIFO : CLASS_PUBLIC
	TYPE
#pragma pack(push, 1)
	  t_s_Header : STRUCT
	    Prio : DINT;
	    Timeout : UDINT;
	    Timestamp : UDINT;
	    JobID : DINT;
	    Valid : BOOL;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  t_s_Info : STRUCT
	    SourceID : DINT;
	    DestinationID : DINT;
	    pThis : ^void;
	    pCallback : ^void;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  t_e_Entry : STRUCT
	    Header : t_s_Header;
	    Info : t_s_Info;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  t_s_Data : STRUCT
	    ptr : pVoid;
	    size : UDINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
DataManagerPriority : CLASS_PUBLIC
	TYPE
	  t_e_CallbackState :
	  (
	    _MNG_Sending,
	    _MNG_Sended,
	    _MNG_Received,
	    _MNG_NoReceiverConnected,
	    _MNG_JobDeletet,
	    _MNG_TimeOut,
	    _MNG_GlobalReceiveError
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
EventExport : CLASS_PUBLIC
	TYPE
	  T_BITS : BDINT
	  [
	    1 Bit1,
	    2 Bit2,
	    3 Bit3,
	    4 Bit4,
	    5 Bit5,
	    6 Bit6,
	    7 Bit7,
	    8 Bit8,
	    9 Bit9,
	    10 Bit10,
	    11 Bit11,
	    12 Bit12,
	    13 Bit13,
	    14 Bit14,
	    15 Bit15,
	    16 Bit16,
	    17 Bit17,
	    18 Bit18,
	    19 Bit19,
	    20 Bit20,
	    21 Bit21,
	    22 Bit22,
	    23 Bit23,
	    24 Bit24,
	    25 Bit25,
	    26 Bit26,
	    27 Bit27,
	    28 Bit28,
	    29 Bit29,
	    30 Bit30,
	    31 Bit31,
	    32 Bit32,
	  ];
	END_TYPE
END_CLASS;
#pragma define (restore)
EventJournal : CLASS_PUBLIC
	TYPE
	  T_BITS : BDINT
	  [
	    1 Bit1,
	    2 Bit2,
	    3 Bit3,
	    4 Bit4,
	    5 Bit5,
	    6 Bit6,
	    7 Bit7,
	    8 Bit8,
	    9 Bit9,
	    10 Bit10,
	    11 Bit11,
	    12 Bit12,
	    13 Bit13,
	    14 Bit14,
	    15 Bit15,
	    16 Bit16,
	    17 Bit17,
	    18 Bit18,
	    19 Bit19,
	    20 Bit20,
	    21 Bit21,
	    22 Bit22,
	    23 Bit23,
	    24 Bit24,
	    25 Bit25,
	    26 Bit26,
	    27 Bit27,
	    28 Bit28,
	    29 Bit29,
	    30 Bit30,
	    31 Bit31,
	    32 Bit32,
	  ];
	END_TYPE
END_CLASS;
#pragma define (restore)
#pragma InclDefBlk FileTransferHandle
FileTransferHandle : CLASS_PUBLIC
	TYPE
	  _FT_Attrib :
	  (
	    FT_File,
	    FT_Folder
	  )$UDINT;
	  _FT_String : ARRAY [0..FileTransfer_MAX_STRING_LEN-1] OF CHAR;
#pragma pack(push, 1)
	  _FT_FolderContentEntrie : STRUCT
	    Attrib : _FT_Attrib;
	    ContentString : _FT_String;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _FT_FolderContent : STRUCT
	    Nr : UDINT;
	    Entrie : ARRAY [0..FileTransfer_MAX_FOLDER_ENTRIES-1] OF _FT_FolderContentEntrie;
	  END_STRUCT;
#pragma pack(pop)
	  _FT_State :
	  (
	    FT_NoAction,
	    FT_Error,
	    FT_WaitForResponseGetFile,
	    FT_ReciveFile,
	    FT_SaveRecivedFile,
	    FT_OperationReady,
	    FT_SendRequestedFile,
	    FT_WaitForResponseGetFolderContent,
	    FT_ReciveFolderContent,
	    FT_SendRequestedFolderContent,
	    FT_FolderContextReady,
	    FT_WorkOnRequestedFolder
	  )$UDINT;
	  _FT_SubState :
	  (
	    FT_SUB_NoAction,
	    FT_SUB_CreateDir,
	    FT_SUB_WaitCreateDir,
	    FT_SUB_CreateFile,
	    FT_SUB_WaitCreateFile,
	    FT_SUB_WriteFile,
	    FT_SUB_WaitWriteFile,
	    FT_SUB_WaitCloseFile,
	    FT_SUB_FreeMemory,
	    FT_SUB_FindFirst,
	    FT_SUB_CloseFindFirst,
	    FT_SUB_WaitFindClose,
	    FT_SUB_OpenFile,
	    FT_SUB_WaitOpenFile,
	    FT_SUB_GetFileLength,
	    FT_SUB_WaitGetFileLength,
	    FT_SUB_AllocMemory,
	    FT_SUB_ReadFile,
	    FT_SUB_WaitReadFile,
	    FT_SUB_StartSendingFile,
	    FT_SUB_WaitResponseSendedFile,
	    FT_SUB_WaitResponseFileSize,
	    FT_SUB_SendingFilePart,
	    FT_SUB_WaitResponseFilePart,
	    FT_SUB_GetFolderContent,
	    FT_SUB_SendFolderContent,
	    FT_SUB_SendRequestFolderContent,
	    FT_SUB_WaitFolderContent,
	    FT_SUB_WaitResponseSendedFolderContent,
	    FT_SUB_CheckForFileOrFolder,
	    FT_SUB_WaitCreateDirFolder,
	    FT_SUB_GetFile,
	    FT_SUB_WaitGetFile,
	    FT_SUB_OperationReady,
	    FT_SUB_FindFirstFolder,
	    FT_SUB_Error_CreateDir,
	    FT_SUB_Error_CreateFile,
	    FT_SUB_Error_WriteFile,
	    FT_SUB_Error_CloseFile,
	    FT_SUB_Error_FindFile,
	    FT_SUB_Error_FileOpen,
	    FT_SUB_Error_FileLength,
	    FT_SUB_Error_AllocMemory,
	    FT_SUB_Error_ReadFile,
	    FT_SUB_ErrorJobID,
	    FT_SUB_ErrorCallback,
	    FT_SUB_Error_GettingFile,
	    FT_SUB_Error_OtherProcessRunning,
	    FT_SUB_Error_GetFolderContent,
	    FT_SUB_Error_GetFileFromContent,
	    FT_SUB_Error_GetFolder_EmptyFolder,
	    FT_SUB_Error_GetFolder_ToMuchEntries
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
GetTaskHandle : CLASS_PUBLIC
	TYPE
	  _ActTask :
	  (
	    AT_Real,
	    AT_Cyclic,
	    AT_Background,
	    AT_NoStdTask
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
LslRemote : CLASS_PUBLIC
	TYPE
	  CmdRemoteOnline :
	  (
	    LOGIN,
	    LOGOUT,
	    SendMsg,
	    SetServer,
	    IamAlive,
	    QueueState,
	    GetLastError,
	    AddMsg,
	    AddServer
	  )$UINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
MerkerEx : CLASS_PUBLIC
	TYPE
	  Cmdm_udLength :
	  (
	    GET_DATA_PTR,
	    EXCHANGE_DATA_PTR,
	    SAVE_DATA_TO_RAMEXFILE
	  )$UINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
NetworkConfig : CLASS_PUBLIC
	TYPE
	  e_GetOptions :
	  (
	    GET_IDLE,
	    GET_AUTOEXEC,
	    GET_OS
	  )$UDINT;
	  e_SetOptions :
	  (
	    SET_IDLE,
	    SET_AUTOEXEC,
	    SET_OS,
	    SET_BOTH
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
RamRingBuffer : CLASS_PUBLIC
	TYPE
#pragma pack(push, 1)
	  SRR_HEAD : STRUCT
	    No : UDINT;
	    Begin : UDINT;
	    Pos : UDINT;
	    Used : UDINT;
	    RecSize : UDINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
SCBase : CLASS_PUBLIC
	TYPE
	  EventTypeTxt :
	  (
	    Event10Log,
	    Event11Log,
	    Event12Log,
	    Event13Log,
	    Event14Log,
	    Event15Log,
	    Event16Log,
	    Event17Log,
	    Event18Log,
	    NoEventLog,
	    ErrorEventLog
	  )$DINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
#pragma InclDefBlk SCL_GetClassVersion
SCL_GetClassVersion : CLASS_PUBLIC
	TYPE
	  _CR_ClassNameTxt : ARRAY [0..299] OF CHAR;
#pragma pack(push, 1)
	  _CR_OneEntry : STRUCT
	    ClassName : _CR_ClassNameTxt;
	    RevisionHigh : DINT;
	    RevisionLow : DINT;
	    RevisionTxt : ARRAY [0..9] OF CHAR;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
SystemLogging : CLASS_PUBLIC
	TYPE
	  LogInfo :
	  (
	    _NoInfo,
	    _Error,
	    _Warning,
	    _Debug,
	    _Info
	  )$USINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
TCPCommunication : CLASS_PUBLIC
#include "..\Class\TCPCommunication\TCPCommunication.h"
	TYPE
	  t_e_ConnectionType :
	  (
	    NotValid,
	    TCPClient,
	    TCPServer,
	    InternConnection
	  )$UDINT;
	  t_e_PackageCmd :
	  (
	    PCMD_Alive,
	    PCMD_Data,
	    PCMD_Acknowledge,
	    PCMD_ConnectionOK,
	    PCMD_ConnectionClosed,
	    PCMD_ConnectionTimeOut,
	    PCMD_TryToConnect,
	    PCMD_ComDeactivated,
	    PCMD_ComActivated
	  )$UDINT;
#pragma pack(push, 1)
	  t_s_Header : STRUCT
	    Commando : t_e_PackageCmd;
	    DestinationID : DINT;
	    SourceID : DINT;
	    JobID : DINT;
	    pThisSource : pVoid;
	    pCallBackSource : pVoid;
	    PackageSize : UDINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  t_s_LogEntry : STRUCT
	    Header : t_s_Header;
	    Prio : DINT;
	    TimeStamp : UDINT;
	    TimeOut : UDINT;
	    TCPType : DINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
TCPCommunicationLogViewer : CLASS_PUBLIC
#include "..\Class\TCPCommunicationLogViewer\TCPCommunicationLogViewer.h"
	TYPE
	  t_e_ExportState :
	  (
	    ExportState_NoAction,
	    ExportState_Start,
	    ExportState_Ready,
	    ExportState_WaitTouch,
	    ExportState_Error,
	    ExportState_WaitTouch2
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
TitleLine : CLASS_PUBLIC
	TYPE
#pragma pack(push, 1)
	  T_S_EXTVISPARA : STRUCT
	    bParaVar : BOOL;
	    ParaTextscheme : _ANYTHING;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
VirtualBaseInit : CLASS_PUBLIC
	TYPE
	  CmdData :
	  (
	    GET_ADD_INFO,
	    READ_DATA,
	    WRITE_DATA,
	    READ_DATA_OFF,
	    WRITE_DATA_OFF
	  )$UINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
WriteValue : CLASS_PUBLIC
	TYPE
#pragma pack(push, 1)
	  WrData : STRUCT
	    udID : UDINT;
	    dValue : DINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)

#RE_IN_DE

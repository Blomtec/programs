//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "EventExport"
	Revision           = "1.1"
	GUID               = "{06032368-0974-45CA-81E8-62EE6880B64A}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "true"
	DefBackground      = "10 ms"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(540,180)"
	Comment            = "class for starting the event export of the EventJournal">
	<Channels>
		<Server Name="ClassSvr" GUID="{7A3E93F7-DD95-4B18-9D69-4D1C616B0088}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="class server"/>
		<Server Name="ExFilt_Date1" GUID="{08B58D66-C58F-48D4-9B6D-DD73A590804D}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="begin-date for export"/>
		<Server Name="ExFilt_Date2" GUID="{B6CDF305-66CC-4763-BD62-1F6EF1AFC46E}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="end-date for export"/>
		<Server Name="ExportFilter" GUID="{431D131C-A70C-466F-9C35-F2078C3F9F09}" Visualized="true" Initialize="true" DefValue="2#1111111111" WriteProtected="false" Retentive="false" Comment="Filter for exporting the event types&#13;&#10;Bit 0 = System Messsage Cat.1&#13;&#10;Bit 1 = System Messsage Cat.2&#13;&#10;Bit 2 = System Messsage Cat.3&#13;&#10;Bit 3 = System Messsage Cat.4&#13;&#10;Bit 4 = Alarm&#13;&#10;Bit 5 = System On/Off&#13;&#10;Bit 6 = Login/Logout&#13;&#10;Bit 7 = value changes&#13;&#10;Bit 8 = User-Event&#13;&#10;Bit 9 = switching operation mode"/>
		<Server Name="StartExport" GUID="{7B0F954C-997D-415F-A9F1-FE1C214B89B8}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="1 = start-command for exporting events from EventJournal"/>
		<Client Name="coEventJournal" Required="true" Internal="false" Comment="object channel to EventJournal"/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek"/>
		<Dokumentation Revision="1.1" Date="2016-06-15" Author="KaiAnd" Company="Sigmatek" Description="export filter included"/>
		<Dokumentation Revision="1.0" Date="2015-09-22" Company="Sigmatek" Description="Creation."/>
	</RevDoku>
</Class>
*)
EventExport : CLASS
	TYPE
	  T_BITS : BDINT  //! <Type Public="true" Name="T_BITS"/>
	  [
	    1 Bit1,
	    2 Bit2,
	    3 Bit3,
	    4 Bit4,
	    5 Bit5,
	    6 Bit6,
	    7 Bit7,
	    8 Bit8,
	    9 Bit9,
	    10 Bit10,
	    11 Bit11,
	    12 Bit12,
	    13 Bit13,
	    14 Bit14,
	    15 Bit15,
	    16 Bit16,
	    17 Bit17,
	    18 Bit18,
	    19 Bit19,
	    20 Bit20,
	    21 Bit21,
	    22 Bit22,
	    23 Bit23,
	    24 Bit24,
	    25 Bit25,
	    26 Bit26,
	    27 Bit27,
	    28 Bit28,
	    29 Bit29,
	    30 Bit30,
	    31 Bit31,
	    32 Bit32,
	  ];
	END_TYPE
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	StartExport 	: SvrCh_DINT;
	ExportFilter 	: SvrCh_T_BITS_PTofCls_EventExport;
	ExFilt_Date1 	: SvrCh_HDINT;
	ExFilt_Date2 	: SvrCh_HDINT;
  //Clients:
	coEventJournal 	: CltChCmd_EventJournal;
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL Background
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ExportFilter::Write
		VAR_INPUT
			input (EAX) 	: EventExport::T_BITS;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: EventExport::T_BITS;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd EventJournal


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB EventExport::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_EVENTEXPORT
1$UINT, 1$UINT, (SIZEOF(::EventExport))$UINT, 
5$UINT, 1$UINT, 0$UINT, 
TO_UDINT(78436812), "EventExport", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::EventExport.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::EventExport.StartExport.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(820146705), "StartExport", 
(::EventExport.ExportFilter.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1462792279), "ExportFilter", 
(::EventExport.ExFilt_Date1.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2637407414), "ExFilt_Date1", 
(::EventExport.ExFilt_Date2.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(70972684), "ExFilt_Date2", 
//Clients:
(::EventExport.coEventJournal.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2457081744), "coEventJournal", TO_UDINT(2671722124), "EventJournal", 1$UINT, 2$UINT, 
END_FUNCTION


#define USER_CNT_EventExport 1

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_EventExport] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION EventExport::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_EventExport, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Background();

#pragma warning (default : 74)
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	StartExport.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF StartExport.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ExportFilter.pMeth			:= StoreMethod( #M_RD_DIRECT(), #ExportFilter::Write() );
	IF ExportFilter.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ExFilt_Date1.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF ExFilt_Date1.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ExFilt_Date2.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF ExFilt_Date2.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

FUNCTION VIRTUAL GLOBAL EventExport::Init

    // check the inputs 
    if (ExFilt_Date1 = 0) then
      ExFilt_Date1 := 16#07D11011;  // 01.01.2001
      ExFilt_Date1.Write(input:=ExFilt_Date1);
    end_if;
    if (ExFilt_Date2 = 0) then
      ExFilt_Date2 := 16#08331014;  // 01.01.2099
      ExFilt_Date2.Write(input:=ExFilt_Date2);
    end_if;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL EventExport::Background
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR
  
  if (StartExport = 1) then
    
    
    // check the inputs 
    if (ExFilt_Date1 = 0) then
      ExFilt_Date1 := 16#07D11011;  // 01.01.2001
      ExFilt_Date1.Write(input:=ExFilt_Date1);
    end_if;
    if (ExFilt_Date2 = 0) then
      ExFilt_Date2 := 16#08331014;  // 01.01.2099
      ExFilt_Date2.Write(input:=ExFilt_Date2);
    end_if;
    
    // start export
    case  coEventJournal.ExportEvents(ExportFilter:=ExportFilter, 
                                      ExFilt_Date1:=ExFilt_Date1, ExFilt_Date2:=ExFilt_Date2, 
                                      ExFilt_Time1:=0, ExFilt_Time2:=16#FFffFFff)  of
      // Export fertig      
      READY:
        StartExport := 0;

      // Export in arbeit      
      BUSY:
      
      // Export mit Error abgebrochen
      ERROR:
        StartExport := 0;

    end_case;

  end_if;

	state := READY;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL EventExport::ExportFilter::Write
	VAR_INPUT
		input (EAX) 	: EventExport::T_BITS;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: EventExport::T_BITS;
	END_VAR
  VAR
    mydat : UDINT; 
	  para  : UDINT; 
  END_VAR 

  mydat := ExportFilter$UDINT; 
  para  := input$UDINT; 

  if(para and 16#80000000) then
    if(para = 16#80000000) then
	    mydat := mydat or 16#80000000; 
	  else   
      mydat := mydat or (para and 16#7FFFFFFF);  
    end_if; 
  else
    if(para = 0) then
      mydat := mydat and 16#7FFFFFFF; 
    else
	  mydat := mydat and (16#FFFFFFFF xor para); 
	  end_if; 
  end_if; 

  result       := mydat;
  ExportFilter := mydat; 

END_FUNCTION



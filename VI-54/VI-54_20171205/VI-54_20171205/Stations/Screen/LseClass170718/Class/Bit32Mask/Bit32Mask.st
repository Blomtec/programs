//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "Bit32Mask"
	Revision           = "1.0"
	GUID               = "{27D0CB99-2A38-4B40-AE3B-EAFAA39D9252}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(450,180)"
	Comment            = "bitwise access to 4 Byte">
	<Channels>
		<Server Name="Bit_BDINT" GUID="{4C6FD5C0-D217-41DE-B7C4-53B1EEB9AFF4}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="bitmask 32 bits for connect to &quot;column_choice&quot;.&#13;&#10;this server is copied from the server Bit_TYPE."/>
		<Server Name="Bit_TYPE" GUID="{C7C23B43-7B33-441F-BE78-D4C1C5BB38C0}" Visualized="true" Initialize="true" DefValue="2#10111" WriteProtected="false" Retentive="false" Comment="bitmask 32 bits for use in LSE"/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek" Author="KaiAnd"/>
		<Dokumentation Revision="1.0" Date="2016-06-15" Author="KaiAnd" Company="Sigmatek" Description="bitwise access to 4 Byte&#13;&#10;Works like the _Bit32 class - but the server for LSE-access is NOT a BDINT, it&apos;s a TYPE of BDINT.&#13;&#10;This is the only way for using &quot;Reference to variables&quot; in Lasal screen!"/>
	</RevDoku>
</Class>
*)
Bit32Mask : CLASS
	TYPE
	  T_BITS : BDINT  //! <Type Public="true" Name="T_BITS"/>
	  [
	    1 Bit1,
	    2 Bit2,
	    3 Bit3,
	    4 Bit4,
	    5 Bit5,
	    6 Bit6,
	    7 Bit7,
	    8 Bit8,
	    9 Bit9,
	    10 Bit10,
	    11 Bit11,
	    12 Bit12,
	    13 Bit13,
	    14 Bit14,
	    15 Bit15,
	    16 Bit16,
	    17 Bit17,
	    18 Bit18,
	    19 Bit19,
	    20 Bit20,
	    21 Bit21,
	    22 Bit22,
	    23 Bit23,
	    24 Bit24,
	    25 Bit25,
	    26 Bit26,
	    27 Bit27,
	    28 Bit28,
	    29 Bit29,
	    30 Bit30,
	    31 Bit31,
	    32 Bit32,
	  ];
	END_TYPE
  //Servers:
	Bit_TYPE 	: SvrChCmd_T_BITS_PTofCls_Bit32Mask;
	Bit_BDINT 	: SvrCh_BDINT;
  //Clients:
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL Bit_TYPE::Write
		VAR_INPUT
			input (EAX) 	: Bit32Mask::T_BITS;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: Bit32Mask::T_BITS;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB Bit32Mask::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_BIT32MASK
1$UINT, 0$UINT, (SIZEOF(::Bit32Mask))$UINT, 
2$UINT, 0$UINT, 0$UINT, 
TO_UDINT(3331605552), "Bit32Mask", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::Bit32Mask.Bit_TYPE.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(1767529769), "Bit_TYPE", 
(::Bit32Mask.Bit_BDINT.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1091507205), "Bit_BDINT", 
//Clients:
END_FUNCTION


#define USER_CNT_Bit32Mask 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_Bit32Mask] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION Bit32Mask::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_Bit32Mask, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Write		:= #Write();
	vmt.CmdTable.Init		:= #Init();
	Bit_TYPE.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF Bit_TYPE.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

FUNCTION VIRTUAL GLOBAL Bit32Mask::Init

  Bit_BDINT := Bit_TYPE;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Bit32Mask::Bit_TYPE::Write
	VAR_INPUT
		input (EAX) 	: Bit32Mask::T_BITS;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: Bit32Mask::T_BITS;
	END_VAR
  VAR
    mydat : UDINT; 
  	para  : UDINT; 
  END_VAR 

  //-------------------------------------------------------------------------------------
  //  Works like the _Bit32 class - but the server is NOT a BDINT, it's a TYPE of BDINT
  //  This is the only way for using "Reference to variables" in Lasal screen!
  //-------------------------------------------------------------------------------------

  mydat := Bit_TYPE$UDINT; 
  para  := input$UDINT; 

  if(para and 16#80000000) then
    if(para = 16#80000000) then
	  mydat := mydat or 16#80000000; 
	else   
      mydat := mydat or (para and 16#7FFFFFFF);  
    end_if; 
  else
    if(para = 0) then
      mydat := mydat and 16#7FFFFFFF; 
    else
	  mydat := mydat and (16#FFFFFFFF xor para); 
	  end_if; 
  end_if; 

  result   := mydat;
  Bit_TYPE := mydat; 

  Bit_BDINT := Bit_TYPE;

END_FUNCTION





//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "OrClass"
	Revision           = "0.0"
	GUID               = "{A4E120B6-FA1B-47D8-9E39-B92D2B0A71C3}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(390,360)">
	<Channels>
		<Server Name="InvInputs" GUID="{4376D538-E5E5-4BAF-A894-8E6965005B29}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="File"/>
		<Server Name="Result" GUID="{753AA5D8-126F-434B-ABC1-1D075895B93B}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Client Name="Inp1" Required="true" Internal="false"/>
		<Client Name="Inp2" Required="true" Internal="false"/>
		<Client Name="Inp3" Required="true" Internal="false"/>
		<Client Name="Inp4" Required="true" Internal="false"/>
		<Client Name="Inp5" Required="true" Internal="false"/>
		<Client Name="Inp6" Required="true" Internal="false"/>
	</Channels>
</Class>
*)
OrClass : CLASS
  //Servers:
	Result 	: SvrChCmd_DINT;
	InvInputs 	: SvrCh_DINT;
  //Clients:
	Inp1 	: CltCh_DINT;
	Inp2 	: CltCh_DINT;
	Inp3 	: CltCh_DINT;
	Inp4 	: CltCh_DINT;
	Inp5 	: CltCh_DINT;
	Inp6 	: CltCh_DINT;
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Result::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB OrClass::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_ORCLASS
0$UINT, 0$UINT, (SIZEOF(::OrClass))$UINT, 
2$UINT, 6$UINT, 0$UINT, 
TO_UDINT(2991873824), "OrClass", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::OrClass.Result.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(3817997973), "Result", 
(::OrClass.InvInputs.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(2859559883), "InvInputs", 
//Clients:
(::OrClass.Inp1.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1446589711), "Inp1", 
(::OrClass.Inp2.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(3476055221), "Inp2", 
(::OrClass.Inp3.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(3090633763), "Inp3", 
(::OrClass.Inp4.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(643023232), "Inp4", 
(::OrClass.Inp5.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1364521238), "Inp5", 
(::OrClass.Inp6.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(3361579180), "Inp6", 
END_FUNCTION


#define USER_CNT_OrClass 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_OrClass] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION OrClass::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_OrClass, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Read		:= #Read();
	Result.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF Result.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	InvInputs.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF InvInputs.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL OrClass::Result::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR


  if IsClientConnected(#Inp1) then
    if InvInputs = 1 then
      Inp1 := (Inp1.Read() = 0);
    else
      Inp1 := Inp1.Read();
    end_if;
  end_if;
  if IsClientConnected(#Inp2) then
    if InvInputs = 1 then
      Inp2 := (Inp2.Read() = 0);
    else
      Inp2 := Inp2.Read();
    end_if;
  end_if;
  if IsClientConnected(#Inp3) then
    if InvInputs = 1 then
      Inp3 := (Inp3.Read() = 0);
    else
      Inp3 := Inp3.Read();
    end_if;
  end_if;
  if IsClientConnected(#Inp4) then
    if InvInputs = 1 then
      Inp4 := (Inp4.Read() = 0);
    else
      Inp4 := Inp4.Read();
    end_if;
  end_if;
  if IsClientConnected(#Inp5) then
    if InvInputs = 1 then
      Inp5 := (Inp5.Read() = 0);
    else
      Inp5 := Inp5.Read();
    end_if;
  end_if;
  if IsClientConnected(#Inp6) then
    if InvInputs = 1 then
      Inp6 := (Inp6.Read() = 0);
    else
      Inp6 := Inp6.Read();
    end_if;
  end_if;
  
  Result := (Inp1 | Inp2 | Inp3 | Inp4 | Inp5 | Inp6);

	output := Result;

END_FUNCTION

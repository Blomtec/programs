//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "AccessControlCreateAdmin"
	Revision           = "1.2"
	GUID               = "{9C79D98B-B91B-4F0F-BDF4-93D7DA2DB5BE}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(570,360)"
	Comment            = "class for creating a temporary admin">
	<Channels>
		<Server Name="ClassSvr" GUID="{B7E4B5FC-F0A9-4490-9F66-47DC8519F6B8}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="class server"/>
		<Server Name="Create" GUID="{2E2C296B-BF88-4D7D-9B9A-14B73E4B1BF1}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false" Comment="write() is the command for creating a Admin user"/>
		<Server Name="Level" GUID="{03571B51-C00E-4DEF-BB41-8C89F5F21CD3}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="user level default 255 (data channel)"/>
		<Server Name="PassWord" GUID="{EE02E11F-0808-4380-99C0-2CB72414EA29}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="user password (channel to string object)"/>
		<Server Name="UserName" GUID="{96900CB9-B3C6-4F9F-9113-EC1220C89008}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="user name (channel to string object)"/>
		<Client Name="coAccessControlMain" Required="true" Internal="false" Comment="object channel - Connect to AccessControlMain object"/>
		<Client Name="coSystemLogging" Required="false" Internal="false" Comment="Object channel to SystemLogging (optional)."/>
		<Client Name="StrPassword" Required="true" Internal="true"/>
		<Client Name="StrUsername" Required="true" Internal="true"/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek" Author="BraLis"/>
		<Dokumentation Revision="1.2" Date="2016-05-19" Author="GreJoh" Company="Sigmatek" Description="Client coSystemLogging must not be connected."/>
		<Dokumentation Revision="1.1" Date="2015-09-29" Author="BraLis" Company="Sigmatek" Description="insert the method SystemLogging::LogEventText instead of TRACE-Messages"/>
		<Dokumentation Revision="1.0" Date="2015-09-22" Company="Sigmatek" Description="Creation."/>
	</RevDoku>
	<Network Name="AccessControlCreateAdmin">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "StrPassword"
				GUID       = "{CEACF36D-2AAD-4735-881C-BA35E7C47D8D}"
				Class      = "String"
				Position   = "(330,510)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "StrUsername"
				GUID       = "{54007A81-400B-4C4E-BFDB-740F9A1135DD}"
				Class      = "String"
				Position   = "(330,330)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.StrUsername" Destination="StrUsername.Data"/>
			<Connection Source="this.StrPassword" Destination="StrPassword.Data"/>
			<Connection Source="this.UserName" Destination="StrUsername.Data" Vertices="(1058,330),(886,420),"/>
			<Connection Source="this.PassWord" Destination="StrPassword.Data" Vertices="(1058,390),(886,600),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
AccessControlCreateAdmin : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	Create 	: SvrCh_DINT;
	UserName 	: SvrCh_UDINT;
	PassWord 	: SvrCh_UDINT;
	Level 	: SvrCh_UDINT;
  //Clients:
	coAccessControlMain 	: CltChCmd_AccessControlMain;
	StrUsername 	: CltChCmd_String;
	StrPassword 	: CltChCmd_String;
	coSystemLogging 	: CltChCmd_SystemLogging;
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Create::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using String
#pragma usingLtd AccessControlMain
#pragma usingLtd SystemLogging


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB AccessControlCreateAdmin::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_ACCESSCONTROLCREATEADMIN
1$UINT, 2$UINT, (SIZEOF(::AccessControlCreateAdmin))$UINT, 
5$UINT, 4$UINT, 0$UINT, 
TO_UDINT(1614884450), "AccessControlCreateAdmin", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::AccessControlCreateAdmin.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::AccessControlCreateAdmin.Create.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2133731197), "Create", 
(::AccessControlCreateAdmin.UserName.pMeth)$UINT, _CH_SVR$UINT, 2#0000000001000000$UINT, TO_UDINT(1047370299), "UserName", 
(::AccessControlCreateAdmin.PassWord.pMeth)$UINT, _CH_SVR$UINT, 2#0000000001000000$UINT, TO_UDINT(4092713625), "PassWord", 
(::AccessControlCreateAdmin.Level.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1841172131), "Level", 
//Clients:
(::AccessControlCreateAdmin.coAccessControlMain.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3696413771), "coAccessControlMain", TO_UDINT(1830373904), "AccessControlMain", 2$UINT, 17$UINT, 
(::AccessControlCreateAdmin.StrUsername.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1036976217), "StrUsername", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::AccessControlCreateAdmin.StrPassword.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(4031987963), "StrPassword", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::AccessControlCreateAdmin.coSystemLogging.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(292037947), "coSystemLogging", TO_UDINT(90452573), "SystemLogging", 1$UINT, 4$UINT, 
END_FUNCTION


#define USER_CNT_AccessControlCreateAdmin 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_AccessControlCreateAdmin] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION AccessControlCreateAdmin::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_AccessControlCreateAdmin, pCmd := #vmt.CmdTable);
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Create.pMeth			:= StoreMethod( #M_RD_DIRECT(), #Create::Write() );
	IF Create.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	UserName.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF UserName.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	PassWord.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF PassWord.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Level.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Level.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL AccessControlCreateAdmin::Create::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
  VAR
  	aTmpUsername : ARRAY[0..255] of CHAR;
    aTmpPassword : ARRAY[0..255] of CHAR;
    tmpLenUsername : UDINT;
    tmpLenPassword : UDINT;
  END_VAR
  
	Create := input;
	result := Create;
  
  tmpLenUsername := StrUsername.GetLength() + 1;
  tmpLenPassword:= StrPassword.GetLength() + 1; 
  
  if tmpLenUsername > 0 then
    StrUsername.GetDataAt(pData:=#aTmpUsername[0], udSize:=tmpLenUsername, udAt:=0);
    StrPassword.GetDataAt(pData:=#aTmpPassword[0], udSize:=tmpLenPassword, udAt:=0);
    
    coAccessControlMain.CreateAdmin(pUsername:=#aTmpUsername[0], pPassword:=#aTmpPassword[0], usLevel:=to_usint(Level));
  else
    if IsClientConnected(#coSystemLogging) then
      coSystemLogging.LogEventText("AccessControlCreateAdmin::Create::Write: Kein User angelegt" );
    end_if;

  end_if;

END_FUNCTION

//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)

//{{LSL_DEFINES
//because there is a maximum of data which can be send over TCP/IP
#define MAX_DATA_FOR_SENDING  1024
//}}LSL_DEFINES

//{{LSL_DECLARATION

(*!
<Class
	Name               = "WriteValue"
	Revision           = "1.3"
	GUID               = "{806F714D-B662-4937-BD02-AFD4C1214AA1}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(468,120)"
	Comment            = "Diese Klasse dient in Verbindung mit der Klasse SynchRdWr zum Versenden bzw. Empfangen von 4 Byte Werten einer verbundenen Steuerung.">
	<Channels>
		<Server Name="ClassSvr" GUID="{8F249BCD-DE88-4842-84FC-63D13521CED0}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="TxServer" GUID="{2F156084-8A61-4714-B24E-C58A04CBDB25}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Client Name="CyclicUpdate" Required="true" Internal="false" Comment="0..no cyclic update&#13;&#10;1..cyclic updata"/>
		<Client Name="OptCmd" Required="true" Internal="false"/>
		<Client Name="SystemLogging" Required="true" Internal="false"/>
		<Client Name="TCPComSend" Required="true" Internal="false"/>
		<Client Name="TxClient" Required="false" Internal="false"/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek"/>
		<Dokumentation Revision="1.3" Date="2016-03-24" Company="Sigmatek" Description="Changed functionality from IDs to optional Commands"/>
		<Dokumentation Revision="1.2" Date="2016-01-28" Author="Roskri" Company="Sigmatek" Description="Changed class clients and/or servers to follow programming guideline"/>
		<Dokumentation Revision="1.1" Date="2015-09-29" Author="BraLis" Company="Sigmatek" Description="insert the method SystemLogging::LogEventText instead of TRACE-Messages"/>
		<Dokumentation Revision="1.0" Date="2015-03-31" Company="Sigmatek"/>
	</RevDoku>
</Class>
*)
WriteValue : CLASS
	TYPE
#pragma pack(push, 1)
	  WrData : STRUCT  //! <Type Public="true" Name="WrData"/>
	    udID : UDINT;
	    dValue : DINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
  //Servers:
	ClassSvr 	: SvrChCmd_iprStates;
	TxServer 	: SvrCh_DINT;
  //Clients:
	TCPComSend 	: CltChCmd_TCPComSendData;
	OptCmd 	: CltCh_UDINT;
	TxClient 	: CltCh_DINT;
	CyclicUpdate 	: CltCh_UDINT;
	SystemLogging 	: CltChCmd_SystemLogging;
  //Variables:
		usInitRun 	: USINT;
		aWrData 	: DINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL GetData
		VAR_INPUT
			pValue 	: ^void;
			udSize 	: ^UDINT;
			udID 	: ^UDINT;
		END_VAR
		VAR_OUTPUT
			bConnected 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL GetCyclicUpdate;
				//! <Function Comment="Senden einer Datenstruktur über TCPIP" Name="WriteDataStruct"/>
	FUNCTION GLOBAL WriteDataStruct
		VAR_INPUT
			pData 	: ^void;			//! <Variable Comment="Pointer auf Daten" Name="WriteDataStruct.pData"/>
			Size 	: UDINT;			//! <Variable Comment="Größe der zu sendenden Daten" Name="WriteDataStruct.Size"/>
		END_VAR
		VAR_OUTPUT
			dRetCode 	: DINT;			//! <Variable Comment="1 .. erfolgreiche gesendet&#13;&#10;&#13;&#10;ACCESS_DENIED .. kein Zugriff möglich&#13;&#10;-2 .. Datenstruktur zu groß (siehe Defines)" Name="WriteDataStruct.dRetCode"/>
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL TxServer::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd SystemLogging
#pragma usingLtd TCPComSendData


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB WriteValue::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_WRITEVALUE
1$UINT, 3$UINT, (SIZEOF(::WriteValue))$UINT, 
2$UINT, 5$UINT, 0$UINT, 
TO_UDINT(1983544979), "WriteValue", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::WriteValue.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::WriteValue.TxServer.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3206755926), "TxServer", 
//Clients:
(::WriteValue.TCPComSend.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2053161344), "TCPComSend", TO_UDINT(864003870), "TCPComSendData", 1$UINT, 6$UINT, 
(::WriteValue.OptCmd.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1963641212), "OptCmd", 
(::WriteValue.TxClient.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(571140085), "TxClient", 
(::WriteValue.CyclicUpdate.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(3906922753), "CyclicUpdate", 
(::WriteValue.SystemLogging.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(90452573), "SystemLogging", TO_UDINT(90452573), "SystemLogging", 1$UINT, 4$UINT, 
END_FUNCTION


#define USER_CNT_WriteValue 2

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_WriteValue] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION WriteValue::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_WriteValue, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #GetData();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #GetCyclicUpdate();

#pragma warning (default : 74)
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	TxServer.pMeth			:= StoreMethod( #M_RD_DIRECT(), #TxServer::Write() );
	IF TxServer.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL WriteValue::Init
  
  // erster Init-Durchlauf
  //------------------------------------------------------
  if usInitRun = 0 then
  
    // ID-Nummer lesen
    OptCmd := OptCmd.Read();
    CyclicUpdate := CyclicUpdate.Read();
    
    // Anmelden an Manager Klasse
    if TCPComSend.LoginObject(OptCmd  := OptCmd, 
                                pThis := this,
                                udCyclic := CyclicUpdate) = true then
      ClassSvr := READY;
    else
      SystemLogging.LogEventText("WriteValue::Init(): Anmelden an Manager Klasse fehlgeschlagen");
      ClassSvr := ERROR;
    end_if;

  end_if;

  // Init-Durchlauf zählen
  usInitRun += 1;
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL WriteValue::TxServer::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

  // Auf Änderung prüfen
  if TxServer <> input then
  
    aWrData := input;
    // Daten an Manager Klasse weitergeben
    if TCPComSend.InsertSendData( OptCmd    := OptCmd, 
                                    pValue  := #aWrData,
                                    udLength := sizeof(aWrData)) = true then
      TxServer := input;
      result := TxServer;
    
    else
      // Fehler aufgetreten
      result := ACCESS_DENIED;
    end_if;
  else
    // Wert hat sich nicht geändert
    result := TxServer;
  end_if;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL WriteValue::GetData
	VAR_INPUT
		pValue 	: ^void;
		udSize 	: ^UDINT;
		udID 	: ^UDINT;
	END_VAR
	VAR_OUTPUT
		bConnected 	: DINT;
	END_VAR

  // Übergabeparameter prüfen
  if pValue = NIL then
    SystemLogging.LogEventText("WriteValue::GetData(): Übergabeparameter pValue = NIL");
    bConnected := false;
    return;
  end_if;

  // Prüfen ob der Client verbunden ist
  if IsClientConnected(#TxClient) then
  
    // Wert vom Client lesen
    TxClient := TxClient.Read();
    aWrData := TxClient;
    
    // Wert zurück liefern
    (pValue)^$^DINT := #aWrData$DINT;
    udSize^ := sizeof(aWrData);
    udID^:= OptCmd.Read();
    
    bConnected := true;
    
  else
    bConnected := false;
  end_if;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL WriteValue::GetCyclicUpdate

END_FUNCTION


FUNCTION GLOBAL WriteValue::WriteDataStruct
	VAR_INPUT
		pData 	: ^void;
		Size 	: UDINT;
	END_VAR
	VAR_OUTPUT
		dRetCode 	: DINT;
	END_VAR
  
  //Über diese Schnittstelle können mehrere Daten (Struktur) übertragen werden. Also nicht nur ein Server-Wert.
  dRetCode := 0;
  
  if (Size <= MAX_DATA_FOR_SENDING) then
    // Daten an Manager Klasse weitergeben
    if TCPComSend.InsertSendData(OptCmd   := OptCmd
                               , pValue   := pData
                               , udLength := Size   ) = true
    then
      dRetCode := 1;
    else
      // Fehler aufgetreten
      dRetCode := ACCESS_DENIED;
    end_if;
  else
    dRetCode := -2;
  end_if;
  
END_FUNCTION

//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "FileTransfer_RecvData"
	Revision           = "1.0"
	GUID               = "{8D868814-E963-414D-A3CD-6657065047CE}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(448,120)">
	<Channels>
		<Client Name="cFileTransfer" Required="true" Internal="false"/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek" Author="hötant"/>
		<Dokumentation Revision="1.0" Date="2015-10-15" Author="hötant" Company="Sigmatek" Description="creation of class"/>
	</RevDoku>
	<Network Name="FileTransfer_RecvData">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{EEFDE742-21A9-44CB-8EC1-0F4BFF0ECB16}"
				Class      = "Comm_RecvData"
				Position   = "(218,120)"
				Visualized = "false">
				<Channels>
					<Server Name="ClassSvr"/>
					<Server Name="sMyID"/>
					<Server Name="sRecvCnt"/>
					<Client Name="cDataMng"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.ClassSvr" Destination="_base.ClassSvr" Vertices="(1006,210),(834,210),"/>
			<Connection Source="this.sMyID" Destination="_base.sMyID" Vertices="(1006,270),(834,270),"/>
			<Connection Source="this.sRecvCnt" Destination="_base.sRecvCnt" Vertices="(1006,330),(834,330),"/>
			<Connection Source="_base.cDataMng" Destination="this.cDataMng" Vertices="(218,210),(38,210),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using Comm_RecvData

FileTransfer_RecvData : CLASS
: Comm_RecvData
  //Servers:
  //Clients:
	cFileTransfer 	: CltChCmd_FileTransferHandle;
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL CallBackReciverCMD
		VAR_INPUT
			DestinationID 	: DINT;
			SourceID 	: DINT;
			size 	: UDINT;
			pdata 	: ^USINT;
			OptCMD 	: USINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: BOOL;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd FileTransferHandle


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB FileTransfer_RecvData::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_FILETRANSFER_RECVDATA
1$UINT, 0$UINT, (SIZEOF(::FileTransfer_RecvData))$UINT, 
0$UINT, 1$UINT, 0$UINT, 
TO_UDINT(2875724004), "FileTransfer_RecvData", //Class
TO_UDINT(322627646), "Comm_RecvData", 0$UINT, 4$UINT, //Baseclass
//Servers:
//Clients:
(::FileTransfer_RecvData.cFileTransfer.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2395918110), "cFileTransfer", TO_UDINT(496318626), "FileTransferHandle", 1$UINT, 2$UINT, 
END_FUNCTION


#define USER_CNT_FileTransfer_RecvData 2

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_FileTransfer_RecvData] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION FileTransfer_RecvData::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= Comm_RecvData::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= Comm_RecvData::ClassSvr.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, Comm_RecvData::ClassSvr.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_FileTransfer_RecvData;
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #CallBackReciverCMD();

#pragma warning (default : 74)
	Comm_RecvData::ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF Comm_RecvData::ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

FUNCTION VIRTUAL GLOBAL FileTransfer_RecvData::CallBackReciverCMD
	VAR_INPUT
		DestinationID 	: DINT;
		SourceID 	: DINT;
		size 	: UDINT;
		pdata 	: ^USINT;
		OptCMD 	: USINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: BOOL;
	END_VAR
  
  // Empfangene Daten weiterleiten.
  retcode := cFileTransfer.CallBackReciverCMD(DestinationID, SourceID, size, pdata, OptCMD);

END_FUNCTION

//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "TCPComSend"
	Revision           = "1.2"
	GUID               = "{D439AAA2-664B-4625-8854-6FF06BF1C24D}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	BackgroundTask     = "true"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(600,360)"
	Comment            = "Sending data via communication class.">
	<Channels>
		<Server Name="ClassSvr" GUID="{0739BB7A-7C5D-43DF-AE24-E0C6C49F9DE2}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="ID_Destination" GUID="{1694BF4C-83C2-4E61-9E1C-2D0CAA4F7929}" Visualized="false" Initialize="true" WriteProtected="true" Retentive="false"/>
		<Server Name="ID_Source" GUID="{5D3C92C0-230D-484E-9E1F-85D995EE3C18}" Visualized="false" Initialize="true" WriteProtected="true" Retentive="false"/>
		<Server Name="sSendCnt" GUID="{B28D8776-EC5A-4C94-81C0-97A0E36E2726}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false" Comment="Counter for sended data blocks."/>
		<Server Name="sSendErr" GUID="{A3F57AE6-3ABE-4905-B93F-0784227E8803}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false" Comment="Counter for send errors."/>
		<Client Name="cPrio" Required="true" Internal="false" Comment="Communication priority number."/>
		<Client Name="cSendErr" Required="false" Internal="false" Comment="Write out JobID if sending was not Ok."/>
		<Client Name="cSendOk" Required="false" Internal="false" Comment="Write out JobID if sending was Ok."/>
		<Client Name="toDataManager" Required="true" Internal="false" Comment="Connection to communication data manager."/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek GmbH &amp; Co KG" Author="LeiChr"/>
		<Dokumentation Revision="1.2" Date="2015-11-16" Author="HubChr" Company="Sigmatek GmbH &amp; Co KG" Description="Translated error messages of SendData method"/>
		<Dokumentation Revision="1.1" Date="2015-11-11" Author="hötant" Company="Sigmatek GmbH &amp; Co KG" Description="corrected error in SendData method. ( OptCmd did not work )"/>
		<Dokumentation Revision="1.0" Date="2015-07-30" Author="LeiChr" Company="Sigmatek GmbH &amp; Co KG" Description="Initial library version"/>
	</RevDoku>
</Class>
*)
TCPComSend : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	ID_Destination 	: SvrCh_DINT;
	ID_Source 	: SvrCh_DINT;
	sSendCnt 	: SvrCh_DINT;
	sSendErr 	: SvrCh_DINT;
  //Clients:
	toDataManager 	: CltChCmd_DataManager;
	cPrio 	: CltCh_DINT;
	cSendOk 	: CltCh_DINT;
	cSendErr 	: CltCh_DINT;
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Background
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
				//! <Function Comment="Is called everytime the state of a job is changing. Overwrite to react to state changes." Name="CallBackJobState"/>
	FUNCTION VIRTUAL GLOBAL CallBackJobState
		VAR_INPUT
			JobID 	: DINT;
			JobState 	: DataManagerPriority::t_e_CallbackState;
		END_VAR;
				//! <Function Comment="Sends the data" Name="SendData"/>
	FUNCTION VIRTUAL GLOBAL SendData
		VAR_INPUT
			pData 	: ^void;			//! <Variable Comment="Pointer to the data to be sent." Name="SendData.pData"/>
			length 	: UDINT;			//! <Variable Comment="Length of the data to be sent." Name="SendData.length"/>
			timeout 	: UDINT;			//! <Variable Comment="TCP Timeout." Name="SendData.timeout"/>
			OptCMD 	: USINT := 0;			//! <Variable Comment="An optional command value can be set here. In order to receive the command parameter correctly, the method CallBackReciverCMD has to be used." Name="SendData.OptCMD"/>
		END_VAR
		VAR_OUTPUT
			JobID 	: DINT;			//! <Variable Comment="ID of the job." Name="SendData.JobID"/>
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd DataManager


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB TCPComSend::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_TCPCOMSEND
1$UINT, 2$UINT, (SIZEOF(::TCPComSend))$UINT, 
5$UINT, 4$UINT, 0$UINT, 
TO_UDINT(2053161344), "TCPComSend", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::TCPComSend.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::TCPComSend.ID_Destination.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3587003032), "ID_Destination", 
(::TCPComSend.ID_Source.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4072861165), "ID_Source", 
(::TCPComSend.sSendCnt.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1891020292), "sSendCnt", 
(::TCPComSend.sSendErr.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2066688734), "sSendErr", 
//Clients:
(::TCPComSend.toDataManager.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(31318979), "toDataManager", TO_UDINT(4008337867), "DataManager", 1$UINT, 0$UINT, 
(::TCPComSend.cPrio.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(3130820789), "cPrio", 
(::TCPComSend.cSendOk.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1748098106), "cSendOk", 
(::TCPComSend.cSendErr.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(127146997), "cSendErr", 
END_FUNCTION


#define USER_CNT_TCPComSend 3

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_TCPComSend] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION TCPComSend::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_TCPComSend, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Write		:= #M_WR_DIRECT();
	vmt.CmdTable.Init		:= #Init();
	vmt.CmdTable.CyWork		:= #CyWork();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Background();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #CallBackJobState();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[2]		:= #SendData();

#pragma warning (default : 74)
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sSendCnt.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF sSendCnt.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sSendErr.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF sSendErr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

// ********************************************************************
// Prototype of callbackmethod
// ********************************************************************
// ********************************************************************
FUNCTION GLOBAL Com_SendData_Callback
	VAR_INPUT
		pthis 	: ^void;
		JobID 	: DINT;
		JobState 	: DataManagerPriority::t_e_CallbackState;
	END_VAR
  
  pthis$^TCPComSend^.CallBackJobState(JobID, JobState);

END_FUNCTION


// ********************************************************************
// Init
// ********************************************************************
// ********************************************************************
FUNCTION VIRTUAL GLOBAL TCPComSend::Init

  if _FirstScan then
  end_if;
   
END_FUNCTION


// ********************************************************************
// Callbackmethod of send
// ********************************************************************
// ********************************************************************
FUNCTION VIRTUAL GLOBAL TCPComSend::CallBackJobState
	VAR_INPUT
		JobID 	: DINT;
		JobState 	: DataManagerPriority::t_e_CallbackState;
	END_VAR

  case JobState of
    //Ok
    _MNG_Received:
       cSendOk :=JobID;
       cSendOk.write (cSendOk);
    
    //Error
    _MNG_NoReceiverConnected,
    _MNG_GlobalReceiveError,
    _MNG_TimeOut:
       cSendErr :=JobId;
       cSendErr.write (cSendErr);
       sSendErr +=1;
  end_case;
  
END_FUNCTION


// ********************************************************************
// Sendmethod
// ********************************************************************
// ********************************************************************
FUNCTION VIRTUAL GLOBAL TCPComSend::SendData
	VAR_INPUT
		pData 	: ^void;
		length 	: UDINT;
		timeout 	: UDINT;
		OptCMD 	: USINT;
	END_VAR
	VAR_OUTPUT
		JobID 	: DINT;
	END_VAR
  VAR
  	tmpDestinationID: DINT;
    txt1 : array [0..199] of char;
    txt2 : array [0..99] of char;
    txtOut : array [0..599] of char;
  END_VAR

  tmpDestinationID := to_dint(OptCMD);
  tmpDestinationID := tmpDestinationID shl 24;
  tmpDestinationID := tmpDestinationID OR ( ID_Destination AND 16#00FFFFFF );
  
  cPrio := cPrio.Read();
  Jobid := toDataManager.SetData(  tmpDestinationID, 
                              ID_Source, 
                              pData, 
                              length,
                              this, 
                              #Com_SendData_Callback(), 
                              timeout,   
                              cPrio);
  
  
  if JobID <0 then
    sSendErr +=1;
    case JobID of
      -1 :  _strcpy(dest:=#txt1[0], src:="Buffer Problem!");
      -2 :  _strcpy(dest:=#txt1[0], src:="Offline!");
      -3 :  _strcpy(dest:=#txt1[0], src:="Invalid Priority!");
      -4 :  _strcpy(dest:=#txt1[0], src:="Method may not be called from RtWork!"); 
    else
      _strcpy(dest:=#txt1[0], src:="Unknown return value"); 
    end_case;
    _GetObjName(pThis:=this, pName:=#txt2[0]);
    _strcpy(dest:=#txtout[0], src:=#txt2[0]);
    _strcat(dest:=#txtout[0], src:="-> SendData -> ");
    _strcat(dest:=#txtout[0], src:=#txt1[0]);
    TRACE(#txtout[0]);
  else
    sSendCnt +=1;
  end_if;
  
  
END_FUNCTION

// ********************************************************************
// cywork
// ********************************************************************
// ********************************************************************
FUNCTION VIRTUAL GLOBAL TCPComSend::CyWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR

	state := READY;

END_FUNCTION


// ********************************************************************
// Background
// ********************************************************************
// ********************************************************************
FUNCTION VIRTUAL GLOBAL TCPComSend::Background
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR

	state := READY;

END_FUNCTION

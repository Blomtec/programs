//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "CPU_Info"
	Revision           = "2.0"
	GUID               = "{C1300291-2EC7-475E-87E2-D958EAC1F850}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(720,780)">
	<Channels>
		<Server Name="ProjectNameChanced" GUID="{5EB3F166-4B0A-431C-825A-2075DF3762F8}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="StopApplicatie" GUID="{A29EE0CA-EC45-4348-BD81-74DFE6EC18A3}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Client Name="GetOSVer2" Required="true" Internal="true"/>
		<Client Name="LasalBuiltDate1" Required="true" Internal="true"/>
		<Client Name="Lse" Required="true" Internal="false"/>
		<Client Name="LseBuiltDate1" Required="true" Internal="true"/>
		<Client Name="StrRamNameOld" Required="true" Internal="true"/>
		<Client Name="System" Required="false" Internal="false"/>
		<Client Name="ToCpuName" Required="true" Internal="false"/>
		<Client Name="ToLasalBuiltString" Required="true" Internal="false"/>
		<Client Name="ToLseBuiltString" Required="true" Internal="false"/>
		<Client Name="toOSString" Required="true" Internal="false"/>
		<Client Name="toResString" Required="true" Internal="false"/>
		<Client Name="ToStringName" Required="true" Internal="false"/>
		<Client Name="ToStringSerNum" Required="true" Internal="false"/>
	</Channels>
	<Network Name="CPU_Info">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{6A4F3006-65F1-4ECE-AA3F-B5645C0DFC08}"
				Class      = "PLC_Info"
				Position   = "(440,120)"
				Visualized = "false">
				<Channels>
					<Server Name="ApplicationName"/>
					<Server Name="BatteryOk"/>
					<Server Name="CPU_Name"/>
					<Server Name="CPUFamily"/>
					<Server Name="CPUFeatures"/>
					<Server Name="CPUIDString"/>
					<Server Name="CPUModel"/>
					<Server Name="CPUStepping"/>
					<Server Name="CPUTemperature"/>
					<Server Name="CPUType"/>
					<Server Name="FanOk"/>
					<Server Name="ProjectRevision"/>
					<Server Name="SerNum"/>
					<Server Name="State"/>
					<Server Name="Supply24VOk"/>
					<Server Name="TemperatureOk"/>
					<Server Name="WhoAmI"/>
					<Server Name="XilinxVersion"/>
					<Client Name="To_TaskObjectControl"/>
				</Channels>
			</Object>
			<Object
				Name       = "GetOSVer2"
				GUID       = "{606A763B-DD92-401B-93D9-A548BB34EAFE}"
				Class      = "GetOSVer"
				Position   = "(450,1170)"
				Visualized = "false">
				<Channels>
					<Server Name="ClassSvr"/>
					<Client Name="toGraphic"/>
					<Client Name="toOSString"/>
					<Client Name="toResString"/>
				</Channels>
			</Object>
			<Object
				Name       = "LasalBuiltDate1"
				GUID       = "{546CE085-9AA8-400C-AB8A-E3B0E03AF0F6}"
				Class      = "LasalBuiltDate"
				Position   = "(600,1650)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Server Name="Datum"/>
					<Client Name="filesys"/>
					<Client Name="ToLasalBuiltString"/>
				</Channels>
			</Object>
			<Object
				Name       = "LseBuiltDate1"
				GUID       = "{2C78D537-684C-4413-B6A3-6E4700EE820B}"
				Class      = "LseBuiltDate"
				Position   = "(570,1440)"
				Visualized = "false">
				<Channels>
					<Server Name="Data"/>
					<Server Name="Datum"/>
					<Client Name="filesys"/>
					<Client Name="ToLseBuiltString"/>
				</Channels>
			</Object>
			<Object
				Name       = "StrRamNameOld"
				GUID       = "{02319B7A-98A7-4DB3-A292-06DF563A88B3}"
				Class      = "StringRAM"
				Position   = "(60,1620)"
				Visualized = "false">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
					<Client Name="UseFile"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.State" Destination="_base.State" Vertices="(1448,210),(1108,210),"/>
			<Connection Source="this.XilinxVersion" Destination="_base.XilinxVersion" Vertices="(1448,270),(1108,270),"/>
			<Connection Source="this.BatteryOk" Destination="_base.BatteryOk" Vertices="(1448,330),(1108,330),"/>
			<Connection Source="this.Supply24VOk" Destination="_base.Supply24VOk" Vertices="(1448,390),(1108,390),"/>
			<Connection Source="this.TemperatureOk" Destination="_base.TemperatureOk" Vertices="(1448,450),(1108,450),"/>
			<Connection Source="this.CPUTemperature" Destination="_base.CPUTemperature" Vertices="(1448,510),(1108,510),"/>
			<Connection Source="this.FanOk" Destination="_base.FanOk" Vertices="(1448,570),(1108,570),"/>
			<Connection Source="this.SerNum" Destination="_base.SerNum" Vertices="(1448,630),(1108,630),"/>
			<Connection Source="this.WhoAmI" Destination="_base.WhoAmI" Vertices="(1448,690),(1108,690),"/>
			<Connection Source="this.CPU_Name" Destination="_base.CPU_Name" Vertices="(1448,750),(1108,750),"/>
			<Connection Source="this.StrRamNameOld" Destination="StrRamNameOld.Data"/>
			<Connection Source="this.GetOSVer2" Destination="GetOSVer2.ClassSvr"/>
			<Connection Source="GetOSVer2.toOSString" Destination="this.toOSString" Vertices="(450,1260),(38,1110),"/>
			<Connection Source="GetOSVer2.toResString" Destination="this.toResString" Vertices="(450,1380),(38,1170),"/>
			<Connection Source="this.LseBuiltDate1" Destination="LseBuiltDate1.Data"/>
			<Connection Source="LseBuiltDate1.ToLseBuiltString" Destination="this.ToLseBuiltString" Vertices="(570,1590),(38,1230),"/>
			<Connection Source="this.LasalBuiltDate1" Destination="LasalBuiltDate1.Data"/>
			<Connection Source="LasalBuiltDate1.ToLasalBuiltString" Destination="this.ToLasalBuiltString" Vertices="(600,1800),(38,1290),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using PLC_Info

CPU_Info : CLASS
: PLC_Info
  //Servers:
	ProjectNameChanced 	: SvrCh_DINT;
	StopApplicatie 	: SvrCh_DINT;
  //Clients:
	System 	: CltChCmd_System;
	Lse 	: CltChCmd__Lse;
	ToStringName 	: CltChCmd_String;
	ToStringSerNum 	: CltChCmd_String;
	ToCpuName 	: CltChCmd_String;
	GetOSVer2 	: CltChCmd_GetOSVer;
	toOSString 	: CltChCmd_String;
	toResString 	: CltChCmd_String;
	ToLseBuiltString 	: CltChCmd_String;
	StrRamNameOld 	: CltChCmd_StringRAM;
	LasalBuiltDate1 	: CltChCmd_LasalBuiltDate;
	LseBuiltDate1 	: CltChCmd_LseBuiltDate;
	ToLasalBuiltString 	: CltChCmd_String;
  //Variables:
		leeg : ARRAY [0..128] OF CHAR;

		name : ARRAY [0..40] OF CHAR;

		serial : ARRAY [0..23] OF CHAR;

		NameOld : ARRAY [0..40] OF CHAR;

		CmpResult 	: UDINT;
		NameLenght 	: DINT;
		SerialLenght 	: DINT;
		CpuNameLenght 	: DINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL StopApplicatie::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using GetOSVer
#pragma using LasalBuiltDate
#pragma using LseBuiltDate
#pragma using StringRAM
#pragma usingLtd _Lse
#pragma usingLtd String
#pragma usingLtd System


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB CPU_Info::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_CPU_INFO
2$UINT, 0$UINT, (SIZEOF(::CPU_Info))$UINT, 
2$UINT, 13$UINT, 0$UINT, 
TO_UDINT(3686609265), "CPU_Info", //Class
TO_UDINT(1551372421), "PLC_Info", 1$UINT, 65$UINT, //Baseclass
//Servers:
(::CPU_Info.ProjectNameChanced.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(661381046), "ProjectNameChanced", 
(::CPU_Info.StopApplicatie.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4095246266), "StopApplicatie", 
//Clients:
(::CPU_Info.System.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(968218125), "System", TO_UDINT(968218125), "System", 0$UINT, 1$UINT, 
(::CPU_Info.Lse.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(299963966), "Lse", TO_UDINT(1552551876), "_Lse", 0$UINT, 110$UINT, 
(::CPU_Info.ToStringName.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(744882430), "ToStringName", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::CPU_Info.ToStringSerNum.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1252030779), "ToStringSerNum", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::CPU_Info.ToCpuName.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(4184260499), "ToCpuName", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::CPU_Info.GetOSVer2.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3016558572), "GetOSVer2", TO_UDINT(2753016556), "GetOSVer", 0$UINT, 0$UINT, 
(::CPU_Info.toOSString.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000110$UINT, TO_UDINT(1868199285), "toOSString", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::CPU_Info.toResString.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000110$UINT, TO_UDINT(1009893816), "toResString", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::CPU_Info.ToLseBuiltString.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000110$UINT, TO_UDINT(3429375009), "ToLseBuiltString", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::CPU_Info.StrRamNameOld.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3895009985), "StrRamNameOld", TO_UDINT(2408581120), "StringRAM", 1$UINT, 10$UINT, 
(::CPU_Info.LasalBuiltDate1.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(4276965304), "LasalBuiltDate1", TO_UDINT(910081679), "LasalBuiltDate", 0$UINT, 0$UINT, 
(::CPU_Info.LseBuiltDate1.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2112614602), "LseBuiltDate1", TO_UDINT(3808693144), "LseBuiltDate", 0$UINT, 0$UINT, 
(::CPU_Info.ToLasalBuiltString.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000110$UINT, TO_UDINT(1108946264), "ToLasalBuiltString", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
END_FUNCTION


#define USER_CNT_CPU_Info 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_CPU_Info] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION CPU_Info::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= PLC_Info::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= PLC_Info::State.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, PLC_Info::State.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_CPU_Info;
	vmt.CmdTable.Init		:= #Init();
	PLC_Info::State.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF PLC_Info::State.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ProjectNameChanced.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF ProjectNameChanced.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	StopApplicatie.pMeth			:= StoreMethod( #M_RD_DIRECT(), #StopApplicatie::Write() );
	IF StopApplicatie.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
FUNCTION VIRTUAL GLOBAL CPU_Info::Init
	
  PLC_Info::Init(); // orgineel
  
if _firstscan then
  _MemSet(#leeg[0], 0,sizeof(leeg));

  // cpu type 
  CpuNameLenght :=to_dint String1.GetLength();//to_dint(_StrLen(#String1$CHAR));
  String1.ReadDataOff(udOff:= 0, pData:= #leeg[0], udMax := to_udint CpuNameLenght);
  ToCpuName.WriteDataOff(udLen:= to_udint CpuNameLenght, udOff:=0, pData:=#leeg[0]);
  _MemSet(#leeg[0], 0,sizeof(leeg));

	
	ToStringSerNum.InitFromTable(udLen := to_udint SerialLenght, pData := #leeg$usint);
	ToStringName.InitFromTable(udLen := to_udint NameLenght, pData := #leeg$usint);

  
  case WhoAmI of // #pvo 090326
  WINPC_NT_CPU: // Lars
		_MemCpy(#serial[0] , "Lars Serie Number   ",20);
		_MemCpy(#name[0] , "Lars Program Name   ",20);
		ToStringSerNum.WriteDataOff(udLen := _StrLen(#serial[0]), udOff := 0, pData := #serial[0]);
		ToStringName.WriteDataOff(udLen := _StrLen(#name[0]), udOff := 0, pData := #name[0]);
  
  DCC080_CPU:  // DCC080L
    _MemCpy(#serial[0] , "DCC080L Serie Number",20);
		_MemCpy(#name[0] , "DCC080L Program Name",20);
		ToStringSerNum.WriteDataOff(udLen := _StrLen(#serial[0]), udOff := 0, pData := #serial[0]);
		ToStringName.WriteDataOff(udLen := _StrLen(#name[0]), udOff := 0, pData := #name[0]);
    
  ETT261_CPU:  
		_MemCpy(#serial[0] , "ET261 Serie Number  ",20);
		_MemCpy(#name[0] , "ET261 Program Name  ",20);
		ToStringSerNum.WriteDataOff(udLen := _StrLen(#serial[0]), udOff := 0, pData := #serial[0]);
		ToStringName.WriteDataOff(udLen := _StrLen(#name[0]), udOff := 0, pData := #name[0]);

  CPUNotIdentified:
		_MemCpy(#serial[0] , "Unknown CPU Serie Number",24);
		_MemCpy(#name[0] , "Unknown CPU Program Name ",24);
		ToStringSerNum.WriteDataOff(udLen := _StrLen(#serial[0]), udOff := 0, pData := #serial[0]);
		ToStringName.WriteDataOff(udLen := _StrLen(#name[0]), udOff := 0, pData := #name[0]);
  
  else
		OS_CILGET("ISYSSERNUM", #pISysSernum);
		IF pISysSernum <> NIL THEN
			p_PLCInfo := ISYSSERNUM_SERNUMGETPLCINFO();
			SerialLenght := to_dint(_StrLen(#p_PLCInfo^.szSerialNumber[0]));
			ToStringSerNum.WriteDataOff(udLen := SerialLenght$udint, udOff:=0, pData:=#p_PLCInfo^.szSerialNumber[0]);
		END_IF;
    if p_Plcinfo <> NIL then  //#pvo  090326
      NameLenght := (_StrLen(#p_Plcinfo^.szApplication[0]))$dint;
      ToStringName.WriteDataOff(NameLenght$udint, 0, #p_Plcinfo^.szApplication[0]);
    end_if;  
  end_case;
 
  // check if project name has been chanced
  ToStringName.ReadDataOff(udOff := 0, pData := #name[0], udMax := sizeof(name));
  StrRamNameOld.ReadDataOff(udOff:= 0, pData := #nameOld[0], udMax := sizeof(name));
  CmpResult := _MemCmp(#nameOld[0], #name[0], sizeof(name));
  if CmpResult <> 0 then
    ProjectNameChanced := 1;
//    InsertCMD(CMD_NEWWINDOW, 13, 0);
  else
    ProjectNameChanced := 0;
  end_if;
  StrRamNameOld.WriteDataOff(udLen:=sizeof(name), udOff:=0, pData:=#name[0]);
  
  
end_if;


END_FUNCTION //VIRTUAL GLOBAL CPU_Info::Init


FUNCTION VIRTUAL GLOBAL CPU_Info::StopApplicatie::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	StopApplicatie := input;
   
//  Lse_reset(); 

//  OS_SSR_AddToKernelSP("exec reset",0);
  
 	result := StopApplicatie;

END_FUNCTION

//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "SaveAcces"
	Revision           = "2.1"
	GUID               = "{E23FB419-2BF2-4D25-9A7E-A6DAC3D7D14B}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "true"
	DefBackground      = "100 ms"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(550,120)">
	<Channels>
		<Server Name="CodeOk" GUID="{73E2853D-C3EC-49A8-BAE4-BC6BB213E3C4}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="CopyNbr" GUID="{7CECD08D-5F91-4885-92B3-142CD22F4567}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="SaveCmd" GUID="{5427780A-306F-46C3-8675-210ADCD00A98}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="SaveCode" GUID="{147A8C92-AA42-4AEF-AE0B-65ADF34A0951}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Client Name="Comm_RecipeHandle" Required="true" Internal="false"/>
		<Client Name="vDelActRecept" Required="false" Internal="false"/>
		<Client Name="vLevel" Required="false" Internal="false"/>
		<Client Name="vSaveReceptNr" Required="true" Internal="false"/>
	</Channels>
</Class>
*)
SaveAcces : CLASS
  //Servers:
	SaveCode 	: SvrChCmd_DINT;
	SaveCmd 	: SvrCh_DINT;
	CopyNbr 	: SvrCh_DINT;
	CodeOk 	: SvrCh_DINT;
  //Clients:
	Comm_RecipeHandle 	: CltChCmd_RecipeHandle;
	vSaveReceptNr 	: CltCh_DINT;
	vDelActRecept 	: CltCh_DINT;
	vLevel 	: CltCh_DINT;
  //Variables:
		WriteValue 	: DINT;
		FileOSState 	: DINT;
		ActRecipeNbr 	: DINT;
		OldLoadProg 	: DINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL Background
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL SaveCmd::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd RecipeHandle


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB SaveAcces::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_SAVEACCES
2$UINT, 1$UINT, (SIZEOF(::SaveAcces))$UINT, 
4$UINT, 4$UINT, 0$UINT, 
TO_UDINT(3069436545), "SaveAcces", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::SaveAcces.SaveCode.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(1995926370), "SaveCode", 
(::SaveAcces.SaveCmd.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(376889505), "SaveCmd", 
(::SaveAcces.CopyNbr.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2780379733), "CopyNbr", 
(::SaveAcces.CodeOk.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(375741802), "CodeOk", 
//Clients:
(::SaveAcces.Comm_RecipeHandle.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1789371831), "Comm_RecipeHandle", TO_UDINT(2560184650), "RecipeHandle", 2$UINT, 0$UINT, 
(::SaveAcces.vSaveReceptNr.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(2315225785), "vSaveReceptNr", 
(::SaveAcces.vDelActRecept.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(4154351944), "vDelActRecept", 
(::SaveAcces.vLevel.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(3230249975), "vLevel", 
END_FUNCTION


#define USER_CNT_SaveAcces 1

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_SaveAcces] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION SaveAcces::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_SaveAcces, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Write		:= #M_WR_DIRECT();
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Background();

#pragma warning (default : 74)
	SaveCode.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF SaveCode.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	SaveCmd.pMeth			:= StoreMethod( #M_RD_DIRECT(), #SaveCmd::Write() );
	IF SaveCmd.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	CopyNbr.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF CopyNbr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

FUNCTION VIRTUAL GLOBAL SaveAcces::Init

  SaveCmd := -1;

END_FUNCTION

FUNCTION VIRTUAL GLOBAL SaveAcces::SaveCmd::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	SaveCmd := input;
  
  ActRecipeNbr := Comm_RecipeHandle.ReadActRecipe();
  
  case SaveCmd of
  00:// no action
  
  01:// save actuele recipe
    if CodeOk = 1 then
      vSaveReceptNr := ActRecipeNbr;
      vSaveReceptNr.write( vSaveReceptNr);
    end_if;  
    
  02: // Copy actual recipe to new recipe nbr
    if CodeOk = 1 then
      vSaveReceptNr := CopyNbr;
      vSaveReceptNr.write( CopyNbr);
    end_if;
  
  03: // Delete recipe 
    if CodeOk = 1 then  
      vDelActRecept := ActRecipeNbr;
      vDelActRecept.Write(input:= vDelActRecept);
    end_if;  
  
  04:// save actuele recipe
    vSaveReceptNr := ActRecipeNbr;
    vSaveReceptNr.write( vSaveReceptNr);
    
  end_case;
  
  SaveCmd := -1;
  SaveCode := 0;
  

 	result := SaveCmd;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL SaveAcces::Background
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR

  // check code..
  if IsClientConnected(#vLevel ) then
    vLevel := vLevel.Read();
  end_if;
  
  // bij juiste level is saven ook mogelijk
  if vLevel >= OPPERATOR then
    CodeOk := 1;
  elsif SaveCode = _SaveCode then
    CodeOk := 1;
  else
    CodeOk := 0;
  end_if;  
  
  // When program is changed, change also CopyNbr
  if Comm_RecipeHandle.LoadProgNbr <> OldLoadProg then
    CopyNbr := Comm_RecipeHandle.LoadProgNbr;
    OldLoadProg := Comm_RecipeHandle.LoadProgNbr;
  end_if;
  

	state := READY;

END_FUNCTION

//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "inpSetPositions"
	Revision           = "0.0"
	GUID               = "{14C9D262-2052-4340-B0C3-4ABB4B075A5E}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(900,120)">
	<Channels>
		<Server Name="ButtonChoice" GUID="{C1C90A72-4277-49F9-BC33-46EEBC436BA8}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="PosError" GUID="{7C118A30-3BFA-4167-A87E-70005EA45539}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="Rpos" GUID="{B1E043BC-FE8B-431B-9A1D-50C94D8E0530}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="SetNbr" GUID="{46C0ECF4-C6DB-464C-9C76-EB6E412BE1EF}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Xpos" GUID="{95A32F1D-122E-42C7-8025-3B785E0116D4}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Ypos" GUID="{209BF551-573A-43DA-80C5-7D143A8B04D2}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Zpos" GUID="{2709C266-AA84-438F-BA20-E09DDF3FCC86}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Client Name="Model" Required="true" Internal="false"/>
		<Client Name="PositionChain" Required="false" Internal="false"/>
		<Client Name="PositionCheck" Required="true" Internal="false"/>
		<Client Name="TerminalControl" Required="true" Internal="false"/>
	</Channels>
	<Network Name="inpSetPositions">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{30DBA747-1585-4DF2-9494-66D9EB7B77D5}"
				Class      = "ReceptBase"
				Position   = "(218,120)"
				Visualized = "false">
				<Channels>
					<Server Name="Refresh"/>
					<Server Name="Size"/>
					<Client Name="Data"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="_base.Data" Destination="this.Data" Vertices="(218,210),(38,210),"/>
			<Connection Source="this.Refresh" Destination="_base.Refresh" Vertices="(690,210),(518,210),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using ReceptBase

inpSetPositions : CLASS
: ReceptBase
  //Servers:
	ButtonChoice 	: SvrCh_DINT;
	SetNbr 	: SvrCh_DINT;
	Xpos 	: SvrCh_DINT;
	Zpos 	: SvrCh_DINT;
	Rpos 	: SvrCh_DINT;
	Ypos 	: SvrCh_DINT;
	PosError 	: SvrCh_DINT;
  //Clients:
	Model 	: CltChCmd_ModelD4V2;
	TerminalControl 	: CltChCmd_TerminalControl;
	PositionCheck 	: CltChCmd_GetLimits;
	PositionChain 	: CltChCmd_Position;
  //Variables:
		ButtonChoiceTmr 	: UDINT;
		GiveCommandOnes 	: DINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL RefreshPara;
	
	FUNCTION GLOBAL ChoiceCheck;
	
	FUNCTION GLOBAL SetPosNbr
		VAR_INPUT
			Nbr 	: DINT;
		END_VAR;
	
	FUNCTION GLOBAL CheckWindow
		VAR_INPUT
			WindowNbr 	: DINT;
		END_VAR
		VAR_OUTPUT
			State 	: DINT;
		END_VAR;
	
	FUNCTION CheckPositions
		VAR_INPUT
			Positions 	: _LMCPROF_POS;
		END_VAR
		VAR_OUTPUT
			Retcode 	: BOOL;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd GetLimits
#pragma usingLtd ModelD4V2
#pragma usingLtd Position
#pragma usingLtd TerminalControl


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB inpSetPositions::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_INPSETPOSITIONS
0$UINT, 0$UINT, (SIZEOF(::inpSetPositions))$UINT, 
7$UINT, 4$UINT, 0$UINT, 
TO_UDINT(3231911595), "inpSetPositions", //Class
TO_UDINT(1832340142), "ReceptBase", 0$UINT, 0$UINT, //Baseclass
//Servers:
(::inpSetPositions.ButtonChoice.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1430080252), "ButtonChoice", 
(::inpSetPositions.SetNbr.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3532269987), "SetNbr", 
(::inpSetPositions.Xpos.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3334636901), "Xpos", 
(::inpSetPositions.Zpos.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1825263086), "Zpos", 
(::inpSetPositions.Rpos.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2843698433), "Rpos", 
(::inpSetPositions.Ypos.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2122244608), "Ypos", 
(::inpSetPositions.PosError.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1693899450), "PosError", 
//Clients:
(::inpSetPositions.Model.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(549564521), "Model", TO_UDINT(1486452278), "ModelD4V2", 0$UINT, 0$UINT, 
(::inpSetPositions.TerminalControl.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(74052286), "TerminalControl", TO_UDINT(74052286), "TerminalControl", 3$UINT, 2$UINT, 
(::inpSetPositions.PositionCheck.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1417670835), "PositionCheck", TO_UDINT(4259587539), "GetLimits", 0$UINT, 0$UINT, 
(::inpSetPositions.PositionChain.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(3656598634), "PositionChain", TO_UDINT(2149546169), "Position", 0$UINT, 0$UINT, 
END_FUNCTION


#define USER_CNT_inpSetPositions 2

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_inpSetPositions] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION inpSetPositions::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= ReceptBase::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= ReceptBase::Refresh.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, ReceptBase::Refresh.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_inpSetPositions;
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #RefreshPara();

#pragma warning (default : 74)
	ReceptBase::Refresh.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ReceptBase::Refresh.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ButtonChoice.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF ButtonChoice.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	SetNbr.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF SetNbr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Xpos.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Xpos.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Zpos.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Zpos.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Rpos.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Rpos.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Ypos.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Ypos.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

FUNCTION VIRTUAL GLOBAL inpSetPositions::Init

  PositionChain.PosNbr(inpNbr:= 1);
  
  
  if _FirstScan = 1 then
    ReceptPtr$^Usint := Data.GetDataPtr();
    PositionChain.SetRecipePtr(Ptr:= ReceptPtr);
  end_if;

END_FUNCTION

FUNCTION VIRTUAL GLOBAL inpSetPositions::RefreshPara

  // Refresh the parameters
  Xpos    := ReceptPtr^.RobotPositions[SetNbr].Xpos;
  Ypos    := ReceptPtr^.RobotPositions[SetNbr].Ypos;
  Zpos    := ReceptPtr^.RobotPositions[SetNbr].Zpos;
  Rpos    := ReceptPtr^.RobotPositions[SetNbr].Rpos;

END_FUNCTION

FUNCTION GLOBAL inpSetPositions::ChoiceCheck
  VAR
  	positions : _LMCPROF_POS;
  END_VAR

  if ButtonChoice <> 0 then
    if (ops.tAbsolute - ButtonChoiceTmr) >= 500 then
      if ButtonChoice >= 2 then // dubble click
        if CheckWindow(WindowNbr:= 201) = True then
          SetNbr := -1;
          ButtonChoice := 0;
        end_if;
      else // set position
        Model.GetRobotPosition(Mode:=_LMCRobotBase::_POSITION_MODE::_SETPOS_APPUNITS, IncludeTool:=0, CoordSystem:=0, pPositions:=#positions);
        if SetNbr <> -1 then
          // Check position and set positions
          if CheckPositions(Positions:= positions) = True then
            PosError := 0;
            ReceptPtr^.RobotPositions[SetNbr].Xpos := Positions.Pos1;  
            ReceptPtr^.RobotPositions[SetNbr].Ypos := Positions.Pos2;
            ReceptPtr^.RobotPositions[SetNbr].Zpos := Positions.Pos3;
            ReceptPtr^.RobotPositions[SetNbr].Rpos := Positions.Pos4;
            
            // Set to chain
            PositionChain.PosData(inpData:= ReceptPtr^.RobotPositions[SetNbr], inpNbr:= SetNbr);
            RefreshPara();
          else // give window position error
            TerminalControl.SelectWindowNbr(Nbr:= 202);
          end_if;
        end_if;
        SetNbr := -1;
        ButtonChoice := 0;
      end_if;
    end_if;
  else
    ButtonChoiceTmr := ops.tAbsolute;
  end_if;

END_FUNCTION


FUNCTION GLOBAL inpSetPositions::SetPosNbr
	VAR_INPUT
		Nbr 	: DINT;
	END_VAR
  
  SetNbr := Nbr;

END_FUNCTION

FUNCTION GLOBAL inpSetPositions::CheckWindow
	VAR_INPUT
		WindowNbr 	: DINT;
	END_VAR
	VAR_OUTPUT
		State 	: DINT;
	END_VAR
  
  State := FALSE; 
  
  if TerminalControl.ActWindowNbr = WindowNbr then
    GiveCommandOnes := 0; 
    State := TRUE;
  else
    if GiveCommandOnes <> 1 then
      TerminalControl.SelectWindowNbr(Nbr:= WindowNbr);
      GiveCommandOnes := 1;
    end_if;
  end_if;
  
END_FUNCTION

FUNCTION inpSetPositions::CheckPositions
	VAR_INPUT
		Positions 	: _LMCPROF_POS;
	END_VAR
	VAR_OUTPUT
		Retcode 	: BOOL;
	END_VAR
  
  Retcode := False;

  if (Positions.Pos1 < PositionCheck.SwMaxXas_units) & (Positions.Pos1 > PositionCheck.SwMinXas_units) then
    if (Positions.Pos2 < PositionCheck.SwMaxYas_units) & (Positions.Pos2 > PositionCheck.SwMinYas_units) then
      if (Positions.Pos3 < PositionCheck.SwMaxZas_units) & (Positions.Pos3 > PositionCheck.SwMinZas_units) then
        if (Positions.Pos4 < PositionCheck.SwMaxRas_units) & (Positions.Pos4 > PositionCheck.SwMinRas_units) then
          Retcode := True;
        else
          PosError := 4;
        end_if;
      else
        PosError := 3;  
      end_if;
    else
      PosError := 2;
    end_if;
  else
    PosError := 1;
  end_if;
      
END_FUNCTION

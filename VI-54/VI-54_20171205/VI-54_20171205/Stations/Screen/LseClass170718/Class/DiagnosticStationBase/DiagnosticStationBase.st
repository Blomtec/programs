//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "DiagnosticStationBase"
	Revision           = "1.0"
	GUID               = "{2C9287DC-B18F-47C9-B035-E40BC014E428}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "true"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(438,120)"
	Comment            = "Use this class as base class for new stations.">
	<Channels>
		<Server Name="sStationName" GUID="{4AFABBF5-708B-4A4C-885B-EE02B226C214}" Class="StringInternal" Visualized="true" Remotely="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="Name of the station."/>
		<Server Name="sStatus" GUID="{646604A8-F1BB-4A6E-A186-4353DEBB12F2}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="Actual state of the station."/>
		<Client Name="cHandler" Required="true" Internal="false" Comment="Object channel to DiagnosticStationHandlerBase."/>
		<Client Name="cSigCLib" Required="false" Internal="false" Comment="Object channel to SigCLib. Does not have to be connected."/>
		<Client Name="StationName" Required="true" Internal="true"/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek"/>
		<Dokumentation Revision="1.0" Date="2016-06-02" Author="HötAnt" Company="Sigmatek" Description="Creation"/>
	</RevDoku>
	<Network Name="DiagnosticStationBase">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "StationName"
				GUID       = "{F3C1D21E-38D5-4F80-A37C-C8C87F6C417B}"
				Class      = "String"
				Position   = "(150,300)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.StationName" Destination="StationName.Data"/>
			<Connection Source="this.sStationName" Destination="StationName.Data" Vertices="(878,270),(706,390),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
DiagnosticStationBase : CLASS
  //Servers:
	sStatus 	: SvrChCmd_iprStates;
	sStationName 	: SvrChCmd_UDINT;
  //Clients:
	cHandler 	: CltChCmd_DiagnosticStationHandlerBase;
	StationName 	: CltChCmd_String;
	cSigCLib 	: CltChCmd_SigCLib;
  //Variables:
		NameOfStation 	: _DiagString;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL Background
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
				//! <Function Comment="This method is called when the diagnostic export starts. Overwrite it to react to the start of the diagnostic export." Name="StartAction"/>
	FUNCTION VIRTUAL GLOBAL StartAction
		VAR_INPUT
			pDP 	: ^CHAR;			//! <Variable Comment="Pointer to the folder path." Name="StartAction.pDP"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: BOOL;			//! <Variable Comment="FALSE..Error&#13;&#10;TRUE..Ok" Name="StartAction.retcode"/>
		END_VAR;
				//! <Function Comment="This method returns the actual state of the station." Name="GetWorkState"/>
	FUNCTION VIRTUAL GLOBAL GetWorkState
		VAR_OUTPUT
			retcode 	: iprStates;			//! <Variable Comment="Actual status." Name="GetWorkState.retcode"/>
		END_VAR;
				//! <Function Comment="This method returns the name of the station." Name="GetStationName"/>
	FUNCTION VIRTUAL GetStationName
		VAR_OUTPUT
			pName 	: ^CHAR;			//! <Variable Comment="Pointer to the station name." Name="GetStationName.pName"/>
		END_VAR;
				//! <Function Comment="Call the method SetError from the DiagnosticStationHandlerBase class with your error number and your error code." Name="SetError"/>
	FUNCTION GLOBAL SetError
		VAR_INPUT
			ErrorNr 	: DINT;			//! <Variable Comment="Error number." Name="SetError.ErrorNr"/>
			ErrorCode 	: DINT;			//! <Variable Comment="Error code." Name="SetError.ErrorCode"/>
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using String
#pragma usingLtd DiagnosticStationHandlerBase
#pragma usingLtd SigCLib


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB DiagnosticStationBase::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_DIAGNOSTICSTATIONBASE
1$UINT, 0$UINT, (SIZEOF(::DiagnosticStationBase))$UINT, 
2$UINT, 3$UINT, 0$UINT, 
TO_UDINT(2640067302), "DiagnosticStationBase", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::DiagnosticStationBase.sStatus.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(3043700589), "sStatus", 
(::DiagnosticStationBase.sStationName.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(4172946281), "sStationName", 
//Clients:
(::DiagnosticStationBase.cHandler.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(4086181582), "cHandler", TO_UDINT(3493223079), "DiagnosticStationHandlerBase", 1$UINT, 0$UINT, 
(::DiagnosticStationBase.StationName.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2735596566), "StationName", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::DiagnosticStationBase.cSigCLib.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(1539399991), "cSigCLib", TO_UDINT(77440046), "SigCLib", 0$UINT, 14$UINT, 
END_FUNCTION


#define USER_CNT_DiagnosticStationBase 4

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_DiagnosticStationBase] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION DiagnosticStationBase::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_DiagnosticStationBase, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Background();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #StartAction();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[2]		:= #GetWorkState();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[3]		:= #GetStationName();

#pragma warning (default : 74)
	sStatus.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF sStatus.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, sStationName.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Write		:= #sStationName::M_WR_DIRECT();
	sStationName.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF sStationName.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
// ********************************************************************
// Prototype of StartAction Methode
// ********************************************************************
// ********************************************************************
#pragma warning(disable:73);

FUNCTION GLOBAL PT_STARTACTION_FNC_DiagnosticStationBase
	VAR_INPUT
		pthis 	: ^void;
    pDP     : ^char;
	END_VAR
  var_output
    retcode : dint;
  end_var

  retcode := pthis$^DiagnosticStationBase^.StartAction(pDP);
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL DiagnosticStationBase::StartAction
	VAR_INPUT
		pDP 	: ^CHAR;
	END_VAR
	VAR_OUTPUT
		retcode 	: BOOL;
	END_VAR
  
  
  retcode := TRUE;
  sStatus := BUSY;


END_FUNCTION
#pragma warning(default:73);
// ********************************************************************
// Prototype of GetWorkState Methode
// ********************************************************************
// ********************************************************************
FUNCTION GLOBAL PT_GETSTATE_FNC_DiagnosticStationBase
	VAR_INPUT
		pthis 	: ^void;
	END_VAR
  var_output
    retcode : iprStates;
  end_var

  retcode := pthis$^DiagnosticStationBase^.GetWorkState();
  
END_FUNCTION

FUNCTION VIRTUAL GLOBAL DiagnosticStationBase::GetWorkState
	VAR_OUTPUT
		retcode 	: iprStates;
	END_VAR
  
  retcode := sstatus;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL DiagnosticStationBase::Init

  if _FirstScan then
    // Station meldet sich bei der Funktion an , um im Falle eines Export aufgerufen zu werden.
    cHandler.InstallStation(pname:= GetStationName(),
                            pThis:=this, 
                            pFct_StartAction:=#PT_STARTACTION_FNC_DiagnosticStationBase(), 
                            pFct_GetState:=#PT_GETSTATE_FNC_DiagnosticStationBase());
  end_if;
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL DiagnosticStationBase::Background
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR
   

	state := READY;

END_FUNCTION

FUNCTION VIRTUAL DiagnosticStationBase::GetStationName
	VAR_OUTPUT
		pName 	: ^CHAR;
	END_VAR

  StationName.ReadDataOff(udOff:=0, pData:=#NameOfStation[0], udMax:=sizeof(NameOfStation));
  pName := #NameOfStation[0];

END_FUNCTION

FUNCTION GLOBAL DiagnosticStationBase::SetError
	VAR_INPUT
		ErrorNr 	: DINT;
		ErrorCode 	: DINT;
	END_VAR
  
  cHandler.SetError(pStationName:=GetStationName(), ErrorNr, ErrorCode);  

END_FUNCTION

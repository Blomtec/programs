//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "Diagnostic"
	Revision           = "1.0"
	GUID               = "{58ADD4CD-723F-4A40-B761-17C1A96A0E8B}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "true"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(630,360)">
	<Channels>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek"/>
		<Dokumentation Revision="1.0" Date="2016-06-02" Author="HötAnt" Company="Sigmatek" Description="Creation"/>
	</RevDoku>
	<Network Name="Diagnostic">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{43731DC2-6631-4410-93D8-FFD32AC79AAD}"
				Class      = "DiagnosticBase"
				Position   = "(218,120)"
				Visualized = "false">
				<Channels>
					<Server Name="sLogError"/>
					<Server Name="sProgress"/>
					<Server Name="sStartExport"/>
					<Server Name="sStatus"/>
					<Server Name="sTraceError"/>
					<Client Name="cDriveLetter"/>
					<Client Name="cFileSys"/>
					<Client Name="cSigCLib"/>
					<Client Name="cSystemLogging"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.sStatus" Destination="_base.sStatus" Vertices="(690,210),(518,210),"/>
			<Connection Source="this.sStartExport" Destination="_base.sStartExport" Vertices="(690,270),(518,270),"/>
			<Connection Source="this.sProgress" Destination="_base.sProgress" Vertices="(690,330),(518,330),"/>
			<Connection Source="this.sTraceError" Destination="_base.sTraceError" Vertices="(690,390),(518,390),"/>
			<Connection Source="_base.cSystemLogging" Destination="this.cSystemLogging" Vertices="(218,270),(38,210),"/>
			<Connection Source="this.sLogError" Destination="_base.sLogError" Vertices="(690,450),(518,450),"/>
			<Connection Source="_base.cDriveLetter" Destination="this.cDriveLetter" Vertices="(218,330),(38,270),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using DiagnosticBase

Diagnostic : CLASS
: DiagnosticBase
  //Servers:
  //Clients:
  //Variables:
  //Functions:
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB Diagnostic::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_DIAGNOSTIC
1$UINT, 0$UINT, (SIZEOF(::Diagnostic))$UINT, 
0$UINT, 0$UINT, 0$UINT, 
TO_UDINT(4058224054), "Diagnostic", //Class
TO_UDINT(2315852333), "DiagnosticBase", 1$UINT, 5$UINT, //Baseclass
//Servers:
//Clients:
END_FUNCTION


#define USER_CNT_Diagnostic 2

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_Diagnostic] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION Diagnostic::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= DiagnosticBase::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= DiagnosticBase::sStatus.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, DiagnosticBase::sStatus.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_Diagnostic;
	DiagnosticBase::sStatus.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF DiagnosticBase::sStatus.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

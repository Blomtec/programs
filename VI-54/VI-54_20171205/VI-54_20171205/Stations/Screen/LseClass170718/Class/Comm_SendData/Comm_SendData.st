//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "Comm_SendData"
	Revision           = "0.5"
	GUID               = "{056084D3-8587-40F6-A13C-A67F4F1FB7AF}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(600,360)"
	Comment            = "Sending data via communication class.">
	<Channels>
		<Server Name="ClassSvr" GUID="{BFAE2D96-5A5B-4DD5-AA0D-58BD8F8C33B4}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="sDestinationId" GUID="{EA7FBC12-4575-4D75-AC35-227ABF2F8A48}" Visualized="false" Initialize="true" WriteProtected="true" Retentive="false" Comment="Destination communication id number."/>
		<Server Name="sMyId" GUID="{D19025BA-5916-4449-9E87-2C8B3C208C51}" Visualized="false" Initialize="true" WriteProtected="true" Retentive="false" Comment="Source communication id number."/>
		<Server Name="sSendCnt" GUID="{41B8320D-37F3-4318-84A6-C8D66DA4BDFD}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false" Comment="Counter for sended data blocks."/>
		<Server Name="sSendErr" GUID="{59054586-DDE7-4E8C-9FCA-0CD3D3876779}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false" Comment="Counter for send errors."/>
		<Client Name="cDataMng" Required="true" Internal="false" Comment="Connection to communication data manager."/>
		<Client Name="cPrio" Required="true" Internal="false" Comment="Communication priority number."/>
		<Client Name="cSendErr" Required="false" Internal="false" Comment="Write out JobID if sending was not Ok."/>
		<Client Name="cSendOk" Required="false" Internal="false" Comment="Write out JobID if sending was Ok."/>
	</Channels>
	<RevDoku>
		<Owner/>
		<Dokumentation Revision="0.5" Date="2014-12-03" Author="W.Brunner" Company="DETS" Description="Added GetOnlineState() method."/>
		<Dokumentation Revision="0.4" Date="2014-12-03" Author="hötant" Company="DETS" Description="added some Trace messages "/>
		<Dokumentation Revision="0.3" Date="2014-11-11" Author="hötant" Company="DETS" Description="added optional parameter to method SendData"/>
		<Dokumentation Revision="0.2" Date="2014-10-21" Author="hötant" Company="DETS" Description="added _MNG_GlobalReciveError in method CallBackJobState"/>
		<Dokumentation Revision="0.1" Date="2014-10-17" Author="W.Brunner" Company="DETS" Description="Deleted retry. Added callback error detection."/>
	</RevDoku>
</Class>
*)
Comm_SendData : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	sMyId 	: SvrCh_DINT;
	sDestinationId 	: SvrCh_DINT;
	sSendCnt 	: SvrCh_DINT;
	sSendErr 	: SvrCh_DINT;
  //Clients:
	cDataMng 	: CltChCmd_DataManager;
	cPrio 	: CltCh_DINT;
	cSendOk 	: CltCh_DINT;
	cSendErr 	: CltCh_DINT;
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL CallBackJobState
		VAR_INPUT
			JobID 	: DINT;
			JobState 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL SendData
		VAR_INPUT
			pData 	: ^void;
			length 	: UDINT;
			timeout 	: UDINT;
			OptCMD 	: USINT := 0;
		END_VAR
		VAR_OUTPUT
			JobID 	: DINT;
		END_VAR;
	
	FUNCTION GLOBAL GetOnlineState
		VAR_OUTPUT
			retcode 	: BOOL;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd DataManager


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB Comm_SendData::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_COMM_SENDDATA
0$UINT, 5$UINT, (SIZEOF(::Comm_SendData))$UINT, 
5$UINT, 4$UINT, 0$UINT, 
TO_UDINT(2033074076), "Comm_SendData", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::Comm_SendData.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::Comm_SendData.sMyId.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3817383452), "sMyId", 
(::Comm_SendData.sDestinationId.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2304361400), "sDestinationId", 
(::Comm_SendData.sSendCnt.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1891020292), "sSendCnt", 
(::Comm_SendData.sSendErr.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2066688734), "sSendErr", 
//Clients:
(::Comm_SendData.cDataMng.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2789960892), "cDataMng", TO_UDINT(4008337867), "DataManager", 1$UINT, 0$UINT, 
(::Comm_SendData.cPrio.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(3130820789), "cPrio", 
(::Comm_SendData.cSendOk.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1748098106), "cSendOk", 
(::Comm_SendData.cSendErr.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(127146997), "cSendErr", 
END_FUNCTION


#define USER_CNT_Comm_SendData 2

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_Comm_SendData] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION Comm_SendData::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_Comm_SendData, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Write		:= #M_WR_DIRECT();
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #CallBackJobState();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #SendData();

#pragma warning (default : 74)
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sSendCnt.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF sSendCnt.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sSendErr.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF sSendErr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION GLOBAL Comm_SendData_CB
	VAR_INPUT
		pthis 	: ^void;
		JobID 	: DINT;
		JobState 	: DINT;
	END_VAR
  
  pthis$^Comm_SendData^.CallBackJobState(JobID, JobState);

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Comm_SendData::CallBackJobState
	VAR_INPUT
		JobID 	: DINT;
		JobState 	: DINT;
	END_VAR
  var
    txt1 : array [0..199] of char;
    txt2 : array [0..199] of char;
    txtOut : array [0..599] of char;
    mError : usint;
  END_VAR
  
  mError :=0;
  case JobState$DataManagerPriority::t_e_CallbackState of
    //Ok
    _MNG_Received:
       cSendOk :=JobID;
       cSendOk.write (cSendOk);
    
    //Error
    _MNG_NoReceiverConnected:
       cSendErr :=JobId;
       cSendErr.write (cSendErr);
       sSendErr +=1;
       _strcpy(dest:=#txt1[0], src:="_MNG_NoReciverConnected");
       mError :=1;
    _MNG_GlobalReceiveError:
       cSendErr :=JobId;
       cSendErr.write (cSendErr);
       sSendErr +=1;
       _strcpy(dest:=#txt1[0], src:="_MNG_GlobalReciveError");
       mError :=1;
    _MNG_TimeOut:
       cSendErr :=JobId;
       cSendErr.write (cSendErr);
       sSendErr +=1;
       _strcpy(dest:=#txt1[0], src:="_MNG_TimeOut");
       mError :=1;
  
  end_case;
  
  if mError <> 0 then
    _GetObjName(pThis:=this, pName:=#txt2[0]);
    _strcpy(dest:=#txtout[0], src:=#txt2[0]);
    _strcat(dest:=#txtout[0], src:="-> CallBackJobState -> ");
    _strcat(dest:=#txtout[0], src:=#txt1[0]);
    TRACE(#txtout[0]);
  end_if;
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL Comm_SendData::Init

  if _FirstScan then
  end_if;
   
END_FUNCTION


FUNCTION VIRTUAL GLOBAL Comm_SendData::SendData
	VAR_INPUT
		pData 	: ^void;
		length 	: UDINT;
		timeout 	: UDINT;
		OptCMD 	: USINT;(* := 0 *)
	END_VAR
	VAR_OUTPUT
		JobID 	: DINT;
	END_VAR
  VAR
  	tmpDestinationID: DINT;
    txt1 : array [0..199] of char;
    txt2 : array [0..99] of char;
    txtOut : array [0..599] of char;
  END_VAR

  // refresh online state
    GetOnlineState();
  
  tmpDestinationID := to_dint(OptCMD);
  tmpDestinationID := tmpDestinationID shl 24;
  tmpDestinationID := tmpDestinationID OR ( sDestinationId AND 16#00FFFFFF );
  
  cPrio := cPrio.Read();
  Jobid := cDataMng.SetData(  dDestinationID:= tmpDestinationID, 
                              dSourceID:=      sMyId, 
                              pData:=         pData, 
                              udSize:=        length,
                              pThis:=         this, 
                              pCallBack:=     #Comm_SendData_CB(), 
                              udTimeOut:=     timeout,   
                              dPrio:=          cPrio);
  

  if JobID <0 then
    sSendErr +=1;
    case JobID of
      -1 :  _strcpy(dest:=#txt1[0], src:="Buffer Problem !");
      -2 :  _strcpy(dest:=#txt1[0], src:="Offline !");
      -3 :  _strcpy(dest:=#txt1[0], src:="Priorität nicht gültig !");
      -4 :  _strcpy(dest:=#txt1[0], src:="Aufruf aus RT nicht erlaubt !"); 
    else
      _strcpy(dest:=#txt1[0], src:="Retcode nicht bekannt !"); 
    end_case;
    _GetObjName(pThis:=this, pName:=#txt2[0]);
    _strcpy(dest:=#txtout[0], src:=#txt2[0]);
    _strcat(dest:=#txtout[0], src:="-> SendData -> ");
    _strcat(dest:=#txtout[0], src:=#txt1[0]);
    TRACE(#txtout[0]);
  else
    sSendCnt +=1;
  end_if;
  
END_FUNCTION


FUNCTION GLOBAL Comm_SendData::GetOnlineState
	VAR_OUTPUT
		retcode 	: BOOL;
	END_VAR

  retcode :=cDataMng.GetOnlineState();
  if retcode =true then
     ClassSvr :=1;
  else
     ClassSvr :=0;
  end_if;
  
END_FUNCTION

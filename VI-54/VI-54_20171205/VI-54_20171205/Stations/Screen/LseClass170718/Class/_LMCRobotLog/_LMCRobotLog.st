//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)

//{{LSL_DEFINES

//}}LSL_DEFINES

//{{LSL_DECLARATION

(*!
<Class
	Name               = "_LMCRobotLog"
	Revision           = "1.2"
	GUID               = "{17B462C4-0A77-476A-BAB9-F5EA777D265C}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	IconPath           = ".\Class\_LMCRobotLog\LMCRobot.ico"
	SharedCommandTable = "true"
	Objectsize         = "(344,120)">
	<Channels>
		<Server Name="ClassSvr" GUID="{D637CE64-5CF1-41D3-9C4A-043C82CAB702}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
	</Channels>
	<RevDoku>
		<Owner/>
		<Dokumentation Revision="1.2" Date="2016-03-22" Author="FucHer" Company="Sigmatek" Description="1. Improvement: the LMCProfile and the LMCRobotBase initialize now just one buffer"/>
		<Dokumentation Revision="1.1" Date="2015-09-25" Author="RauAnd&#13;&#10;SatChr" Company="Sigmatek" Description="1. Improvement: Logging for new commands added: AxSetFollowMode, AxSetAdjustment and AxReadPosition"/>
		<Dokumentation Revision="1.0" Date="2015-07-15" Author="FucHer" Company="Sigmatek" Description="creation"/>
	</RevDoku>
</Class>
*)
_LMCRobotLog : CLASS
	TYPE
#pragma pack(push, 1)
	  _LogParAxInPosition : STRUCT  //! <Type Public="true" Name="_LogParAxInPosition"/>
	    AxisNo : DINT;  //! <Type Comment="&gt;=1: the specified axis&#13;&#10;  0: all axes&#13;&#10; -1: all hw-axes&#13;&#10; -2: all kinematic-axes" Name="_LogParAxInPosition.AxisNo"/>
	    Mode : _LMCAXIS_QUERY_POSITION_MODE;
	    PositionWindow : DINT;  //! <Type Comment="Size of the position window" Name="_LogParAxInPosition.PositionWindow"/>
	    Result : DINT;  //! <Type Comment="0 --&gt; Axis not in position&#13;&#10;1 --&gt; Axis in position" Name="_LogParAxInPosition.Result"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParAxMoveAbsolute : STRUCT  //! <Type Public="true" Name="_LogParAxMoveAbsolute"/>
	    AxisNo : DINT;  //! <Type Comment="&gt;=1: the specified axis&#13;&#10;  0: all axes&#13;&#10; -1: all hw-axes&#13;&#10; -2: all kinematic-axes" Name="_LogParAxMoveAbsolute.AxisNo"/>
	    Position : DINT;  //! <Type Comment="Targetposition for the axis [Application units]" Name="_LogParAxMoveAbsolute.Position"/>
	    Speed : DINT;  //! <Type Comment="Axis speed of the movement [Application units / s]" Name="_LogParAxMoveAbsolute.Speed"/>
	    Accel : DINT;  //! <Type Comment="Axis acceleration of the movement [Application units / s²]" Name="_LogParAxMoveAbsolute.Accel"/>
	    Decel : DINT;  //! <Type Comment="Axis deceleration of the movement [Application units / s²]" Name="_LogParAxMoveAbsolute.Decel"/>
	    Jerk : DINT;  //! <Type Comment="Axis jerk of the movement [Application units / sec^2 / millisec]" Name="_LogParAxMoveAbsolute.Jerk"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParAxMoveEndless : STRUCT  //! <Type Public="true" Name="_LogParAxMoveEndless"/>
	    AxisNo : DINT;  //! <Type Comment="&gt;=1: the specified axis&#13;&#10;  0: all axes&#13;&#10; -1: all hw-axes&#13;&#10; -2: all kinematic-axes" Name="_LogParAxMoveEndless.AxisNo"/>
	    Speed : DINT;  //! <Type Comment="Axis speed of the movement [Application units / s]" Name="_LogParAxMoveEndless.Speed"/>
	    Accel : DINT;  //! <Type Comment="Axis acceleration of the movement [Application units / s²]" Name="_LogParAxMoveEndless.Accel"/>
	    Jerk : DINT;  //! <Type Comment="Axis jerk of the movement [Application units / sec^2 / millisec]" Name="_LogParAxMoveEndless.Jerk"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParAxMoveHand : STRUCT  //! <Type Public="true" Name="_LogParAxMoveHand"/>
	    AxisNo : DINT;  //! <Type Comment="&gt;=1: the specified axis&#13;&#10;  0: all axes&#13;&#10; -1: all hw-axes&#13;&#10; -2: all kinematic-axes" Name="_LogParAxMoveHand.AxisNo"/>
	    Speed : DINT;  //! <Type Comment="Axis speed of the movement [Application units / s]" Name="_LogParAxMoveHand.Speed"/>
	    Accel : DINT;  //! <Type Comment="Axis acceleration of the movement [Application units / s²]" Name="_LogParAxMoveHand.Accel"/>
	    Jerk : DINT;  //! <Type Comment="Axis jerk of the movement [Application units / sec^2 / millisec]" Name="_LogParAxMoveHand.Jerk"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParAxMoveReference : STRUCT  //! <Type Public="true" Name="_LogParAxMoveReference"/>
	    AxisNo : DINT;  //! <Type Comment="&gt;=1: the specified axis&#13;&#10;  0: all axes&#13;&#10; -1: all hw-axes&#13;&#10; -2: all kinematic-axes" Name="_LogParAxMoveReference.AxisNo"/>
	    Mode : _LMCAXIS_REFMODE;  //! <Type Comment="Defines the reference mode" Name="_LogParAxMoveReference.Mode"/>
	    Position : DINT;  //! <Type Comment="Reference position [Application units]" Name="_LogParAxMoveReference.Position"/>
	    VRef1 : DINT;  //! <Type Comment="Speed used when searching for the reference switch [Application units/s]" Name="_LogParAxMoveReference.VRef1"/>
	    VRef2 : DINT;  //! <Type Comment="Speed used when backing off from the reference switch [Application units/s]" Name="_LogParAxMoveReference.VRef2"/>
	    Accel : DINT;  //! <Type Comment="Acceleration / deceleration used when searching for the reference switch and when backing off from it [Application units/s²]" Name="_LogParAxMoveReference.Accel"/>
	    PositionWindow : DINT;  //! <Type Comment="Distance within which the Z pulse must occur after leaving the reference switch [Application units]" Name="_LogParAxMoveReference.PositionWindow"/>
	    Jerk : DINT;  //! <Type Comment="Axis jerk of the movement [Application units / sec^2 / millisec]" Name="_LogParAxMoveReference.Jerk"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParAxMoveRelative : STRUCT  //! <Type Public="true" Name="_LogParAxMoveRelative"/>
	    AxisNo : DINT;  //! <Type Comment="&gt;=1: the specified axis&#13;&#10;  0: all axes&#13;&#10; -1: all hw-axes&#13;&#10; -2: all kinematic-axes" Name="_LogParAxMoveRelative.AxisNo"/>
	    Position : DINT;  //! <Type Comment="distance of the movement [Application units]" Name="_LogParAxMoveRelative.Position"/>
	    Mode : _LMCAXIS_MOVE_RELATIVE_MODE;  //! <Type Comment="MOVE_RELATIVE_TO_DESTINATION --&gt; Position is relative to the last target position&#13;&#10;MOVE_RELATIVE_TO_POSIITON    --&gt; Position is relative to the actual position" Name="_LogParAxMoveRelative.Mode"/>
	    Speed : DINT;  //! <Type Comment="Axis speed of the movement [Application units / s]" Name="_LogParAxMoveRelative.Speed"/>
	    Accel : DINT;  //! <Type Comment="Axis acceleration of the movement [Application units / s²]" Name="_LogParAxMoveRelative.Accel"/>
	    Decel : DINT;  //! <Type Comment="Axis deceleration of the movement [Application units / s²]" Name="_LogParAxMoveRelative.Decel"/>
	    Jerk : DINT;  //! <Type Comment="Axis jerk of the movement [Application units / sec^2 / millisec]" Name="_LogParAxMoveRelative.Jerk"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParAxMoveShortestWay : STRUCT  //! <Type Public="true" Name="_LogParAxMoveShortestWay"/>
	    AxisNo : DINT;  //! <Type Comment="&gt;=1: the specified axis&#13;&#10;  0: all axes&#13;&#10; -1: all hw-axes&#13;&#10; -2: all kinematic-axes" Name="_LogParAxMoveShortestWay.AxisNo"/>
	    Position : DINT;  //! <Type Comment="Target position for the axis [application units]" Name="_LogParAxMoveShortestWay.Position"/>
	    Speed : DINT;  //! <Type Comment="Speed of the axis [application units / sec]" Name="_LogParAxMoveShortestWay.Speed"/>
	    Accel : DINT;  //! <Type Comment="acceleration of the axis [application units / s²]" Name="_LogParAxMoveShortestWay.Accel"/>
	    Decel : DINT;  //! <Type Comment="deceleration of the axis [application units / s²]" Name="_LogParAxMoveShortestWay.Decel"/>
	    Jerk : DINT;  //! <Type Comment="Axis jerk of the movement [Application units / sec^2 / millisec]" Name="_LogParAxMoveShortestWay.Jerk"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParAxQuitError : STRUCT  //! <Type Public="true" Name="_LogParAxQuitError"/>
	    AxisNo : DINT;  //! <Type Comment="&gt;=1: the specified axis&#13;&#10;  0: all axes&#13;&#10; -1: all hw-axes&#13;&#10; -2: all kinematic-axes" Name="_LogParAxQuitError.AxisNo"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParAxReadAxisError : STRUCT  //! <Type Public="true" Name="_LogParAxReadAxisError"/>
	    AxisNo : DINT;  //! <Type Comment="&gt;0: the specified axis&#13;&#10;&lt;1: not allowed" Name="_LogParAxReadAxisError.AxisNo"/>
	    AxisErrorInfo : _LMCAXIS_ERROR;  //! <Type Comment="AxisErrorInfo = 16#7FFFFFFF ... AxisNo not valid" Name="_LogParAxReadAxisError.AxisErrorInfo"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParAxReadParameter : STRUCT  //! <Type Public="true" Name="_LogParAxReadParameter"/>
	    AxisNo : DINT;  //! <Type Comment="&gt;0: the specified axis&#13;&#10;&lt;1: not allowed" Name="_LogParAxReadParameter.AxisNo"/>
	    ParNr : _LMCAXIS_READPARAMETER;  //! <Type Comment="Parameter number" Name="_LogParAxReadParameter.ParNr"/>
	    mode : DINT;  //! <Type Comment="additional information for some ParNr" Name="_LogParAxReadParameter.mode"/>
	    Result : DINT;  //! <Type Comment="Software parameter&#13;&#10;Result = 16#7FFFFFFF ... AxisNo not valid" Name="_LogParAxReadParameter.Result"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParAxReadPosition : STRUCT  //! <Type Public="true" Name="_LogParAxReadPosition"/>
	    AxisNo : DINT;  //! <Type Comment="&gt;0: the specified axis&#13;&#10;&lt;1: not allowed" Name="_LogParAxReadPosition.AxisNo"/>
	    Mode : _LMCAXIS_READPOS;  //! <Type Comment="Type of the position that should be read" Name="_LogParAxReadPosition.Mode"/>
	    Position : DINT;  //! <Type Comment="Internal position of the axis depending on the selected mode" Name="_LogParAxReadPosition.Position"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParAxReadSWEndPos : STRUCT  //! <Type Public="true" Name="_LogParAxReadSWEndPos"/>
	    AxisNo : DINT;  //! <Type Comment="&gt;0: the specified axis&#13;&#10;&lt;1: not allowed" Name="_LogParAxReadSWEndPos.AxisNo"/>
	    Mode : _LMCAXIS_READSWENDPOS;  //! <Type Comment="0 --&gt; Maximum SW end position with cResolution_Fact [Application units]&#13;&#10;1 --&gt; Minimum SW end position with cResolution_Fact [Application units]&#13;&#10;2 --&gt; Maximum SW software end position without cResolution_Fact [Internal units]&#13;&#10;3 --&gt; Minimum SW software end position without cResolution_Fact [Internal units]" Name="_LogParAxReadSWEndPos.Mode"/>
	    Position : DINT;  //! <Type Comment="Software end position Depending on the mode, either application units or internal units&#13;&#10;Position = 16#7FFFFFFF ... AxisNo not valid" Name="_LogParAxReadSWEndPos.Position"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParAxSetAdjustment : STRUCT
	    AxisNo : DINT;  //! <Type Comment="&gt;=1: the specified axis&#13;&#10;  0: all axes&#13;&#10; -1: all hw-axes&#13;&#10; -2: all kinematic-axes" Name="_LogParAxSetAdjustment.AxisNo"/>
	    No : _LMCAXIS_SETSERVER;  //! <Type Comment="server no" Name="_LogParAxSetAdjustment.No"/>
	    Value : DINT;  //! <Type Comment="new server value" Name="_LogParAxSetAdjustment.Value"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParAxSetFollowMode : STRUCT  //! <Type Public="true" Name="_LogParAxSetFollowMode"/>
	    AxisNo : DINT;  //! <Type Comment="&gt;=1: the specified axis&#13;&#10;  0: all axes&#13;&#10; -1: all hw-axes&#13;&#10; -2: all kinematic-axes" Name="_LogParAxSetFollowMode.AxisNo"/>
	    Mode : _LMCAXIS_FOLLOW_MODE;  //! <Type Comment="Mode = DEACTIVATE_FOLLOW_MODE -&gt; deactive the status &quot;FOLLOW_LMCAXIS&quot;&#13;&#10;Mode = ACTIVATE_FOLLOW_MODE   -&gt;   active the status &quot;FOLLOW_LMCAXIS&quot;" Name="_LogParAxSetFollowMode.Mode"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParAxSetParameter : STRUCT  //! <Type Public="true" Name="_LogParAxSetParameter"/>
	    AxisNo : DINT;  //! <Type Comment="&gt;=1: the specified axis&#13;&#10;  0: all axes&#13;&#10; -1: all hw-axes&#13;&#10; -2: all kinematic-axes" Name="_LogParAxSetParameter.AxisNo"/>
	    ParNo : _LMCAXIS_SETPARAMETER;  //! <Type Comment="Parameter number" Name="_LogParAxSetParameter.ParNo"/>
	    Value : DINT;  //! <Type Comment="New parameter value" Name="_LogParAxSetParameter.Value"/>
	    Mode : DINT;  //! <Type Comment="For further information about the mode see the documentation of the class _LMCAxis" Name="_LogParAxSetParameter.Mode"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParAxSetPosition : STRUCT  //! <Type Public="true" Name="_LogParAxSetPosition"/>
	    AxisNo : DINT;  //! <Type Comment="&gt;=1: the specified axis&#13;&#10;  0: all axes&#13;&#10; -1: all hw-axes&#13;&#10; -2: all kinematic-axes" Name="_LogParAxSetPosition.AxisNo"/>
	    Mode : _LMCAXIS_SETPOSITION;  //! <Type Comment="Type of the position value" Name="_LogParAxSetPosition.Mode"/>
	    Position : DINT;  //! <Type Comment="Position value, depending on the parameter mode the units are either application units or internal units." Name="_LogParAxSetPosition.Position"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParAxStopMove : STRUCT  //! <Type Public="true" Name="_LogParAxStopMove"/>
	    AxisNo : DINT;  //! <Type Comment="&gt;=1: the specified axis&#13;&#10;  0: all axes&#13;&#10; -1: all hw-axes&#13;&#10; -2: all kinematic-axes" Name="_LogParAxStopMove.AxisNo"/>
	    Decel : DINT;  //! <Type Comment="Axis deceleration of the movement [Application units / s²]" Name="_LogParAxStopMove.Decel"/>
	    Jerk : DINT;  //! <Type Comment="Axis jerk of the movement [Application units / sec^2 / millisec]" Name="_LogParAxStopMove.Jerk"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParAxTuneAxis : STRUCT  //! <Type Public="true" Name="_LogParAxTuneAxis"/>
	    AxisNo : DINT;  //! <Type Comment="&gt;=1: the specified axis&#13;&#10;  0: all axes&#13;&#10; -1: all hw-axes&#13;&#10; -2: all kinematic-axes" Name="_LogParAxTuneAxis.AxisNo"/>
	    Position : DINT;  //! <Type Comment="Target or distance for the axis [Application units]" Name="_LogParAxTuneAxis.Position"/>
	    Speed : DINT;  //! <Type Comment="Maximum speed [Application units / s]" Name="_LogParAxTuneAxis.Speed"/>
	    Accel : DINT;  //! <Type Comment="Axis acceleration [Application units / s² ]" Name="_LogParAxTuneAxis.Accel"/>
	    Mode : _LMCAXIS_TUNE_MODE;  //! <Type Comment=" INTERVALL__ACTPOSITION_POSITION          --&gt; Movement between the actual position and the position added to it.&#13;&#10; INTERVALL__ZERO_TO_POSITIVE_POSITION     --&gt; Movement between the specified position and 0&#13;&#10; INTERVALL__POSITON_IN_POSITIVE_DIRECTION --&gt; Relative movement in the positive direction&#13;&#10; INTERVALL__ZERO_TO_NEGATIVE_POSITION     --&gt; Movement between the specified negative position and 0&#13;&#10; INTERVALL__POSITON_IN_NEGATIVE_DIRECTION --&gt; Relative movement in the negative direction&#13;&#10;" Name="_LogParAxTuneAxis.Mode"/>
	    WaitTime : UDINT;  //! <Type Comment="A TuneTime is set [ms]. This Tunetime is simply a delay after each movement. " Name="_LogParAxTuneAxis.WaitTime"/>
	    Jerk : DINT;  //! <Type Comment="Axis jerk of the movement [Application units / sec^2 / millisec]" Name="_LogParAxTuneAxis.Jerk"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCalcResidualTime : STRUCT  //! <Type Public="true" Name="_LogParCalcResidualTime"/>
	    Mode : _LMCPROF_RESTIME_CALCMODE;  //! <Type Comment="Modus of calculation of the Residualtime" Name="_LogParCalcResidualTime.Mode"/>
	    ResidualTime : UDINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParChangeCoupleSettings : STRUCT  //! <Type Public="true" Name="_LogParChangeCoupleSettings"/>
	    AxisNo : DINT;  //! <Type Comment="Number of the selected axis, beginning with 1." Name="_LogParChangeCoupleSettings.AxisNo"/>
	    CoupleMode : _LMCPROF_EXECUTE;  //! <Type Comment="Time of couple command execution" Name="_LogParChangeCoupleSettings.CoupleMode"/>
	    MaxVel : DINT;  //! <Type Comment="Maximum speed of the axis for this movement [Application units / s]" Name="_LogParChangeCoupleSettings.MaxVel"/>
	    MaxAcc : DINT;  //! <Type Comment="Maximum axis acceleration / deceleration [Application units / s²]" Name="_LogParChangeCoupleSettings.MaxAcc"/>
	    DeltaPos : DINT;  //! <Type Comment="Position difference between the master axis and the slave axis [internal units]" Name="_LogParChangeCoupleSettings.DeltaPos"/>
	    GearMul : DINT;  //! <Type Comment="Multiplier for the gear ratio" Name="_LogParChangeCoupleSettings.GearMul"/>
	    GearDiv : DINT;  //! <Type Comment="Divisor for the gear ratio" Name="_LogParChangeCoupleSettings.GearDiv"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCircleDefinition : STRUCT  //! <Type Public="true" Name="_LogParCircleDefinition"/>
	    CircleDef : _LMCPROFCIRCLEDEF;  //! <Type Comment="0 --&gt; Linear movement&#13;&#10;1 --&gt; Circular movement" Name="_LogParCircleDefinition.CircleDef"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParContinueNCProg : STRUCT  //! <Type Public="true" Name="_LogParContinueNCProg"/>
	    PosWindow : DINT;  //! <Type Comment="Position tolerance window [Application Units].&#13;&#10;The axes must be at the start position / restart position plus or minus the PosWindow." Name="_LogParContinueNCProg.PosWindow"/>
	    DelayTime : UDINT;  //! <Type Comment="Delay time in milliseconds.&#13;&#10;The axes will start moving after this time." Name="_LogParContinueNCProg.DelayTime"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleAdditivePosDiff : STRUCT  //! <Type Public="true" Name="_LogParCoupleAdditivePosDiff"/>
	    AxisNo : DINT;  //! <Type Comment="Number of the selected axis, beginning with 1" Name="_LogParCoupleAdditivePosDiff.AxisNo"/>
	    pPosdiff : ^DINT;  //! <Type Comment="pointer to the positiondifference" Name="_LogParCoupleAdditivePosDiff.pPosdiff"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleCurveTab : STRUCT  //! <Type Public="true" Name="_LogParCoupleCurveTab"/>
	    AxisNo : DINT;  //! <Type Comment="Number of the selected axis, beginning with 1." Name="_LogParCoupleCurveTab.AxisNo"/>
	    CoupleMode : _LMCPROF_EXECUTE;  //! <Type Comment="Time of couple command execution" Name="_LogParCoupleCurveTab.CoupleMode"/>
	    MaxVel : DINT;  //! <Type Comment="Maximum speed of the axis for this movement [Application units / s]" Name="_LogParCoupleCurveTab.MaxVel"/>
	    MaxAcc : DINT;  //! <Type Comment="Maximum axis acceleration / deceleration [Application units / s²]" Name="_LogParCoupleCurveTab.MaxAcc"/>
	    DeltaPos : DINT;  //! <Type Comment="Position difference between the master axis and the slave axis [Application units]" Name="_LogParCoupleCurveTab.DeltaPos"/>
	    pMaster : ^MasterStruct;  //! <Type Comment="Pointer to the master axis information. Use method _LMCAxis::ReadMasterInfo()." Name="_LogParCoupleCurveTab.pMaster"/>
	    GearMul : DINT;  //! <Type Comment="Multiplier for the gear ratio" Name="_LogParCoupleCurveTab.GearMul"/>
	    GearDiv : DINT;  //! <Type Comment="Divisor for the gear ratio" Name="_LogParCoupleCurveTab.GearDiv"/>
	    Mode : _LMCAXIS_CURVETABMODE;  //! <Type Comment="Slave axis operating mode" Name="_LogParCoupleCurveTab.Mode"/>
	    pCurveData : ^_LMCAXIS_CURVE;  //! <Type Comment="Pointer to the curve data" Name="_LogParCoupleCurveTab.pCurveData"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleGearAbsolute : STRUCT  //! <Type Public="true" Name="_LogParCoupleGearAbsolute"/>
	    AxisNo : DINT;  //! <Type Comment="Number of the selected axis, beginning with 1." Name="_LogParCoupleGearAbsolute.AxisNo"/>
	    CoupleMode : _LMCPROF_EXECUTE;  //! <Type Comment="Time of couple command execution" Name="_LogParCoupleGearAbsolute.CoupleMode"/>
	    MaxVel : DINT;  //! <Type Comment="Maximum speed of the axis for this movement [Application units / s]" Name="_LogParCoupleGearAbsolute.MaxVel"/>
	    MaxAcc : DINT;  //! <Type Comment="Maximum axis acceleration / deceleration [Application units / s²]" Name="_LogParCoupleGearAbsolute.MaxAcc"/>
	    DeltaPos : DINT;  //! <Type Comment="Position difference between the master axis and the slave axis [internal units]" Name="_LogParCoupleGearAbsolute.DeltaPos"/>
	    pMaster : ^MasterStruct;  //! <Type Comment="Pointer to the master axis information. Use method _LMCAxis::ReadMasterInfo()." Name="_LogParCoupleGearAbsolute.pMaster"/>
	    GearMul : DINT;  //! <Type Comment="Multiplier for the gear ratio" Name="_LogParCoupleGearAbsolute.GearMul"/>
	    GearDiv : DINT;  //! <Type Comment="Divisor for the gear ratio" Name="_LogParCoupleGearAbsolute.GearDiv"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleGearPolynom : STRUCT  //! <Type Public="true" Name="_LogParCoupleGearPolynom"/>
	    AxisNo : DINT;  //! <Type Comment="Number of the selected axis, beginning with 1." Name="_LogParCoupleGearPolynom.AxisNo"/>
	    CoupleMode : _LMCPROF_EXECUTE;  //! <Type Comment="Time of couple command execution" Name="_LogParCoupleGearPolynom.CoupleMode"/>
	    MaxVel : DINT;  //! <Type Comment="Maximum speed of the axis for this movement [Application units / s]" Name="_LogParCoupleGearPolynom.MaxVel"/>
	    MaxAcc : DINT;  //! <Type Comment="Maximum axis acceleration / deceleration [Application units / s²]" Name="_LogParCoupleGearPolynom.MaxAcc"/>
	    pMaster : ^MasterStruct;  //! <Type Comment="Pointer to the master axis information. Use method _LMCAxis::ReadMasterInfo()." Name="_LogParCoupleGearPolynom.pMaster"/>
	    GearMul : DINT;  //! <Type Comment="Multiplier for the gear ratio" Name="_LogParCoupleGearPolynom.GearMul"/>
	    GearDiv : DINT;  //! <Type Comment="Divisor for the gear ratio" Name="_LogParCoupleGearPolynom.GearDiv"/>
	    sMaster : DINT;  //! <Type Comment="Distance travelled by the master axis during coupling [application units]" Name="_LogParCoupleGearPolynom.sMaster"/>
	    sSlave : DINT;  //! <Type Comment="Distance travelled by the slave axis during coupling [application units]" Name="_LogParCoupleGearPolynom.sSlave"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleGearRelative : STRUCT  //! <Type Public="true" Name="_LogParCoupleGearRelative"/>
	    AxisNo : DINT;  //! <Type Comment="Number of the selected axis, beginning with 1." Name="_LogParCoupleGearRelative.AxisNo"/>
	    CoupleMode : _LMCPROF_EXECUTE;  //! <Type Comment="Time of couple command execution" Name="_LogParCoupleGearRelative.CoupleMode"/>
	    MaxVel : DINT;  //! <Type Comment="Maximum speed of the axis for this movement [Application units / s]" Name="_LogParCoupleGearRelative.MaxVel"/>
	    MaxAcc : DINT;  //! <Type Comment="Maximum axis acceleration / deceleration [Application units / s²]" Name="_LogParCoupleGearRelative.MaxAcc"/>
	    pMaster : ^MasterStruct;  //! <Type Comment="Pointer to the master axis information. Use method _LMCAxis::ReadMasterInfo()." Name="_LogParCoupleGearRelative.pMaster"/>
	    GearMul : DINT;  //! <Type Comment="Multiplier for the gear ratio" Name="_LogParCoupleGearRelative.GearMul"/>
	    GearDiv : DINT;  //! <Type Comment="Divisor for the gear ratio" Name="_LogParCoupleGearRelative.GearDiv"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleGearVelocity : STRUCT  //! <Type Public="true" Name="_LogParCoupleGearVelocity"/>
	    AxisNo : DINT;  //! <Type Comment="Number of the selected axis, beginning with 1." Name="_LogParCoupleGearVelocity.AxisNo"/>
	    CoupleMode : _LMCPROF_EXECUTE;  //! <Type Comment="Time of couple command execution" Name="_LogParCoupleGearVelocity.CoupleMode"/>
	    MaxVel : DINT;  //! <Type Comment="Maximum speed of the axis for this movement [Application units / s]" Name="_LogParCoupleGearVelocity.MaxVel"/>
	    MaxAcc : DINT;  //! <Type Comment="Maximum axis acceleration / deceleration [Application units / s²]" Name="_LogParCoupleGearVelocity.MaxAcc"/>
	    pMaster : ^MasterStruct;  //! <Type Comment="Pointer to the master axis information. Use method _LMCAxis::ReadMasterInfo()." Name="_LogParCoupleGearVelocity.pMaster"/>
	    GearMul : DINT;  //! <Type Comment="Multiplier for the gear ratio" Name="_LogParCoupleGearVelocity.GearMul"/>
	    GearDiv : DINT;  //! <Type Comment="Divisor for the gear ratio" Name="_LogParCoupleGearVelocity.GearDiv"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleProfilePos : STRUCT  //! <Type Public="true" Name="_LogParCoupleProfilePos"/>
	    AxisNo : DINT;  //! <Type Comment="Number of the selected axis, beginning with 1." Name="_LogParCoupleProfilePos.AxisNo"/>
	    CoupleMode : _LMCPROF_EXECUTE;  //! <Type Comment="Time of couple command execution" Name="_LogParCoupleProfilePos.CoupleMode"/>
	    MaxVel : DINT;  //! <Type Comment="Maximum speed of the axis for this movement [Application units / s]" Name="_LogParCoupleProfilePos.MaxVel"/>
	    MaxAcc : DINT;  //! <Type Comment="Maximum axis acceleration / deceleration [Application units / s²]" Name="_LogParCoupleProfilePos.MaxAcc"/>
	    Mode : _LMCPROF_RECOUPLEMODE;  //! <Type Comment="selecte the mode for the recouple" Name="_LogParCoupleProfilePos.Mode"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleUserPos : STRUCT  //! <Type Public="true" Name="_LogParCoupleUserPos"/>
	    AxisNo : DINT;  //! <Type Comment="Number of the selected axis, beginning with 1." Name="_LogParCoupleUserPos.AxisNo"/>
	    CoupleMode : _LMCPROF_EXECUTE;  //! <Type Comment="Time of couple command execution" Name="_LogParCoupleUserPos.CoupleMode"/>
	    MaxVel : DINT;  //! <Type Comment="Maximum speed of the axis for this movement [Application units / s]" Name="_LogParCoupleUserPos.MaxVel"/>
	    MaxAcc : DINT;  //! <Type Comment="Maximum axis acceleration / deceleration [Application units / s²]" Name="_LogParCoupleUserPos.MaxAcc"/>
	    pMasterPos : ^DINT;  //! <Type Comment="Pointer to the command variable containing the master position [internal units].&#13;&#10;The command variable has to contain set positions." Name="_LogParCoupleUserPos.pMasterPos"/>
	    DeltaPos : DINT;  //! <Type Comment="Position difference between the master position and the slave axis [internal units]" Name="_LogParCoupleUserPos.DeltaPos"/>
	    GearMul : DINT;  //! <Type Comment="Multiplier for the gear ratio" Name="_LogParCoupleUserPos.GearMul"/>
	    GearDiv : DINT;  //! <Type Comment="Divisor for the gear ratio" Name="_LogParCoupleUserPos.GearDiv"/>
	    Mode : _LMCAXIS_COUPLE_GEAR_MODE;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetAxInformation : STRUCT  //! <Type Public="true" Name="_LogParGetAxInformation"/>
	    AxisNo : DINT;  //! <Type Comment="&gt;0: the specified axis&#13;&#10;&lt;1: not allowed" Name="_LogParGetAxInformation.AxisNo"/>
	    pAxData : ^_LMCRobotBase::_AXDATA_ENTRY;  //! <Type Comment="the information of the axis is written to this pointer" Name="_LogParGetAxInformation.pAxData"/>
	    Result : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetBrakePositions : STRUCT  //! <Type Public="true" Name="_LogParGetBrakePositions"/>
	    Pos : _LMCPROF_POS;  //! <Type Comment="Brakepositions" Name="_LogParGetBrakePositions.Pos"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetBufferData : STRUCT  //! <Type Public="true" Name="_LogParGetBufferData"/>
	    index : UDINT;  //! <Type Comment="index which should be copied" Name="_LogParGetBufferData.index"/>
	    MoveData : _LMCPROF_MoveData;  //! <Type Comment="Buffer data" Name="_LogParGetBufferData.MoveData"/>
	    RetCode : iprStates;  //! <Type Comment="READY ... copy is okay&#13;&#10;ERROR ... copy is not okay" Name="_LogParGetBufferData.RetCode"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetMoveFinished : STRUCT  //! <Type Public="true" Name="_LogParGetMoveFinished"/>
	    index : UDINT;  //! <Type Comment="Buffer index of the movement that should be checked" Name="_LogParGetMoveFinished.index"/>
	    RetCode : iprStates;  //! <Type Comment="READY ... Movement is Finished&#13;&#10;BUSY  ... Movement is Busy&#13;&#10;ERROR ... Wrong Index No" Name="_LogParGetMoveFinished.RetCode"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetRemotePoint : STRUCT  //! <Type Public="true" Name="_LogParGetRemotePoint"/>
	    RemoteDist : DINT;
	    RemoteTime : DINT;
	    ActualVel : DINT;
	    RemoteVel : DINT;
	    ActualAccel : DINT;
	    ProfileAccel : DINT;
	    Tjerk : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetRobotPosition : STRUCT  //! <Type Public="true" Name="_LogParGetRobotPosition"/>
	    Mode : _LMCRobotBase::_POSITION_MODE;  //! <Type Comment="Choice of position type (set/actual), and axes type (motor/effector)" Name="_LogParGetRobotPosition.Mode"/>
	    IncludeTool : BOOL;  //! <Type Comment="TRUE ... position of the tool center point are delivered.&#13;&#10;FALSE ... flange positions are delivered" Name="_LogParGetRobotPosition.IncludeTool"/>
	    CoordSystem : DINT;  //! <Type Comment="number of the base coordinate system.&#13;&#10;Use zero to get positions in world coordinates." Name="_LogParGetRobotPosition.CoordSystem"/>
	    Positions : _LMCPROF_POS;  //! <Type Comment="Motor axes / effector positions [ApplicationUnits]" Name="_LogParGetRobotPosition.Positions"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetSlowestAxis : STRUCT  //! <Type Public="true" Name="_LogParGetSlowestAxis"/>
	    Dest : _LMCPROF_POS;  //! <Type Comment="End positions [Application Units]" Name="_LogParGetSlowestAxis.Dest"/>
	    usAxis : USINT;  //! <Type Comment="Number of the slowest axis (0 in case of no locked axis, 1-9 otherwise)" Name="_LogParGetSlowestAxis.usAxis"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetStartPositions : STRUCT  //! <Type Public="true" Name="_LogParGetStartPositions"/>
	    StartPos : _LMCPROF_POS;  //! <Type Comment="Start positions [???units]" Name="_LogParGetStartPositions.StartPos"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetStartPositionsRestart : STRUCT  //! <Type Public="true" Name="_LogParGetStartPositionsRestart"/>
	    StartPos : _LMCPROF_POS;  //! <Type Comment="Axes positions [Application Units]" Name="_LogParGetStartPositionsRestart.StartPos"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParLockProfile : STRUCT  //! <Type Public="true" Name="_LogParLockProfile"/>
	    Axis1 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfile.Axis1"/>
	    Axis2 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfile.Axis2"/>
	    Axis3 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfile.Axis3"/>
	    Axis4 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfile.Axis4"/>
	    Axis5 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfile.Axis5"/>
	    Axis6 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfile.Axis6"/>
	    Axis7 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfile.Axis7"/>
	    Axis8 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfile.Axis8"/>
	    Axis9 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfile.Axis9"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParLockProfileRestart : STRUCT  //! <Type Public="true" Name="_LogParLockProfileRestart"/>
	    Axis1 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileRestart.Axis1"/>
	    Axis2 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileRestart.Axis2"/>
	    Axis3 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileRestart.Axis3"/>
	    Axis4 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileRestart.Axis4"/>
	    Axis5 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileRestart.Axis5"/>
	    Axis6 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileRestart.Axis6"/>
	    Axis7 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileRestart.Axis7"/>
	    Axis8 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileRestart.Axis8"/>
	    Axis9 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileRestart.Axis9"/>
	    PathOffset : DINT;  //! <Type Comment="Offset along the path [Application Units]" Name="_LogParLockProfileRestart.PathOffset"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParLockProfileStartLineNo : STRUCT  //! <Type Public="true" Name="_LogParLockProfileStartLineNo"/>
	    Axis1 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileStartLineNo.Axis1"/>
	    Axis2 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileStartLineNo.Axis2"/>
	    Axis3 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileStartLineNo.Axis3"/>
	    Axis4 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileStartLineNo.Axis4"/>
	    Axis5 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileStartLineNo.Axis5"/>
	    Axis6 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileStartLineNo.Axis6"/>
	    Axis7 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileStartLineNo.Axis7"/>
	    Axis8 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileStartLineNo.Axis8"/>
	    Axis9 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileStartLineNo.Axis9"/>
	    PathOffset : DINT;  //! <Type Comment="Offset along the path [Application Units]. Must be within the start line." Name="_LogParLockProfileStartLineNo.PathOffset"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParMoveCircle : STRUCT  //! <Type Public="true" Name="_LogParMoveCircle"/>
	    Positions : _LMCPROF_POS;  //! <Type Comment="Pointer to the absolute end position of the axes [Application Units]" Name="_LogParMoveCircle.Positions"/>
	    MiddlePoint : _LMCPROF_CIRCLEPOINT;  //! <Type Comment="Pointer to the absolute position of the middlepoint of the circle [Application Units]" Name="_LogParMoveCircle.MiddlePoint"/>
	    InterPoint : _LMCPROF_CIRCLEPOINT;  //! <Type Comment="Pointer to the absolute values of the inclined position of the circle to define the circle-pline [Application Units]" Name="_LogParMoveCircle.InterPoint"/>
	    CircleDef : _LMCPROFCIRCLEDEF;  //! <Type Comment="Defines which axes should perform a circular movement" Name="_LogParMoveCircle.CircleDef"/>
	    CmdConfig : _LMCPROFCMDCONFIG;  //! <Type Comment="16#01 --&gt; Rapid traverse&#13;&#10;16#02 --&gt; Move in clockwise direction (CW) in case of 2 dimenional movement / dromic direction in case of 3 dimensional movement&#13;&#10;16#04 --&gt; Move in counter clockwise direction (CCW) in case of 2 dimenional movement / antidromic direction in case of 3 dimensional movement&#13;&#10;16#08 --&gt; Feed rate interpolation&#13;&#10;" Name="_LogParMoveCircle.CmdConfig"/>
	    Velocity : DINT;  //! <Type Comment="Path speed (feed rate) for the movement.[Application units / s]" Name="_LogParMoveCircle.Velocity"/>
	    Accel : DINT;  //! <Type Comment="Acceleration for this movement [Application units / s² ]" Name="_LogParMoveCircle.Accel"/>
	    Decel : DINT;  //! <Type Comment="Deceleration for this movement [Application units / s² ]" Name="_LogParMoveCircle.Decel"/>
	    TransMode : _LMCPROFTRANSMODES;  //! <Type Comment="Transitionmodus during rounding" Name="_LogParMoveCircle.TransMode"/>
	    TransRadius : DINT;  //! <Type Comment="Radius of the tolerace-sphere during rounding [Application units].&#13;&#10;&#13;&#10;Parameter is only necessary for modes _LMCPROF_SMOOTH_PARAB + _LMCPROF_SMOOTH_CUBIC. " Name="_LogParMoveCircle.TransRadius"/>
	    Jerk : DINT;  //! <Type Comment="Jerk for this movement [Application units / sec^2 / millisec]" Name="_LogParMoveCircle.Jerk"/>
	    SetCoordSystem : DINT;
	    ActiveTool : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParMoveCurve : STRUCT  //! <Type Public="true" Name="_LogParMoveCurve"/>
	    Positions : _LMCPROF_POS;
	    CmdConfig : _LMCPROFCMDCONFIG;
	    Velocity : DINT;
	    Accel : DINT;
	    Decel : DINT;
	    TransMode : _LMCPROFTRANSMODES;
	    TransRadius : DINT;
	    Obstacle : _LMCPROF_OBSTACLE;
	    Jerk : DINT;  //! <Type Comment="Jerk for this movement [Application units / sec^2 / millisec]" Name="_LogParMoveCurve.Jerk"/>
	    SetCoordSystem : DINT;
	    ActiveTool : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParMoveCurveBelt : STRUCT  //! <Type Public="true" Name="_LogParMoveCurveBelt"/>
	    Positions : _LMCPROF_POS;
	    CmdConfig : _LMCPROFCMDCONFIG;
	    Velocity : DINT;
	    Accel : DINT;
	    Decel : DINT;
	    TransMode : _LMCPROFTRANSMODES;
	    TransRadius : DINT;
	    Obstacle : _LMCPROF_OBSTACLE;
	    BeltData : _LMCRobotBase::_BELT_COUPLE_DATA;
	    Jerk : DINT;  //! <Type Comment="Jerk for this movement [Application units / sec^2 / millisec]" Name="_LogParMoveCurveBelt.Jerk"/>
	    ActiveTool : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParMoveLinear : STRUCT  //! <Type Public="true" Name="_LogParMoveLinear"/>
	    Positions : _LMCPROF_POS;  //! <Type Comment="Absolute end position of the axes [Application Units]" Name="_LogParMoveLinear.Positions"/>
	    CmdConfig : _LMCPROFCMDCONFIG;  //! <Type Comment="16#01 --&gt; Rapid traverse&#13;&#10;16#02 --&gt; Move in clockwise direction (CW)&#13;&#10;16#04 --&gt; Move in counter clockwise direction (CCW)&#13;&#10;16#08 --&gt; Feed rate interpolation&#13;&#10;" Name="_LogParMoveLinear.CmdConfig"/>
	    Velocity : DINT;  //! <Type Comment="Path speed (feed rate) for the movement.[Application units / s]&#13;&#10;" Name="_LogParMoveLinear.Velocity"/>
	    Accel : DINT;  //! <Type Comment="Acceleration for this movement [Application units / s² ]" Name="_LogParMoveLinear.Accel"/>
	    Decel : DINT;  //! <Type Comment="Deceleration for this movement [Application units / s² ]" Name="_LogParMoveLinear.Decel"/>
	    TransMode : _LMCPROFTRANSMODES;  //! <Type Comment="Transitionmodus during rounding" Name="_LogParMoveLinear.TransMode"/>
	    TransRadius : DINT;  //! <Type Comment="Radius of the tolerace-sphere during rounding [Application units].&#13;&#10;&#13;&#10;Parameter is only necessary for modes _LMCPROF_SMOOTH_PARAB + _LMCPROF_SMOOTH_CUBIC + _LMCPROF_SMOOTH_QUINT." Name="_LogParMoveLinear.TransRadius"/>
	    Jerk : DINT;  //! <Type Comment="Jerk for this movement [Application units / sec^2 / millisec]" Name="_LogParMoveLinear.Jerk"/>
	    SetCoordSystem : DINT;
	    ActiveTool : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParMoveLinearBelt : STRUCT  //! <Type Public="true" Name="_LogParMoveLinearBelt"/>
	    Positions : _LMCPROF_POS;
	    CmdConfig : _LMCPROFCMDCONFIG;  //! <Type Comment="16#01 --&gt; Rapid traverse&#13;&#10;16#02 --&gt; Move in clockwise direction (CW)&#13;&#10;16#04 --&gt; Move in counter clockwise direction (CCW)&#13;&#10;16#08 --&gt; Feed rate interpolation&#13;&#10;" Name="_LogParMoveLinearBelt.CmdConfig"/>
	    Velocity : DINT;  //! <Type Comment="Path speed (feed rate) for the movement.[Application units / s]&#13;&#10;" Name="_LogParMoveLinearBelt.Velocity"/>
	    Accel : DINT;  //! <Type Comment="Acceleration for this movement [Application units / s² ]" Name="_LogParMoveLinearBelt.Accel"/>
	    Decel : DINT;  //! <Type Comment="Deceleration for this movement [Application units / s² ]" Name="_LogParMoveLinearBelt.Decel"/>
	    TransMode : _LMCPROFTRANSMODES;  //! <Type Comment="Transitionmodus during rounding" Name="_LogParMoveLinearBelt.TransMode"/>
	    TransRadius : DINT;  //! <Type Comment="Radius of the tolerace-sphere during rounding [Application units].&#13;&#10;&#13;&#10;Parameter is only necessary for modes _LMCPROF_SMOOTH_PARAB + _LMCPROF_SMOOTH_CUBIC + _LMCPROF_SMOOTH_QUINT." Name="_LogParMoveLinearBelt.TransRadius"/>
	    BeltData : _LMCRobotBase::_BELT_COUPLE_DATA;
	    Jerk : DINT;  //! <Type Comment="Jerk for this movement [Application units / sec^2 / millisec]" Name="_LogParMoveLinearBelt.Jerk"/>
	    ActiveTool : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParMoveRelative : STRUCT  //! <Type Public="true" Name="_LogParMoveRelative"/>
	    Distances : _LMCPROF_POS;  //! <Type Comment="Relative distance of the axes [Application Units]" Name="_LogParMoveRelative.Distances"/>
	    CmdConfig : _LMCPROFCMDCONFIG;  //! <Type Comment="16#01 --&gt; Rapid traverse&#13;&#10;16#02 --&gt; Move in clockwise direction (CW)&#13;&#10;16#04 --&gt; Move in counter clockwise direction (CCW)&#13;&#10;16#08 --&gt; Feed rate interpolation" Name="_LogParMoveRelative.CmdConfig"/>
	    Velocity : DINT;  //! <Type Comment="Path speed (feed rate) for the movement.[Application units / s]&#13;&#10;" Name="_LogParMoveRelative.Velocity"/>
	    Accel : DINT;  //! <Type Comment="Acceleration for this movement [Application units / s² ]" Name="_LogParMoveRelative.Accel"/>
	    Decel : DINT;  //! <Type Comment="Deceleration for this movement [Application units / s² ]" Name="_LogParMoveRelative.Decel"/>
	    TransMode : _LMCPROFTRANSMODES;  //! <Type Comment="Transitionmodus during rounding" Name="_LogParMoveRelative.TransMode"/>
	    TransRadius : DINT;  //! <Type Comment="Radius of the tolerace-sphere during rounding [Application units].&#13;&#10;&#13;&#10;Parameter is only necessary for modes _LMCPROF_SMOOTH_PARAB + _LMCPROF_SMOOTH_CUBIC + _LMCPROF_SMOOTH_QUINT." Name="_LogParMoveRelative.TransRadius"/>
	    Jerk : DINT;  //! <Type Comment="Jerk for this movement [Application units / sec^2 / millisec]" Name="_LogParMoveRelative.Jerk"/>
	    SetCoordSystem : DINT;
	    ActiveTool : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParMoveRelativeTCP : STRUCT  //! <Type Public="true" Name="_LogParMoveRelativeTCP"/>
	    Distances : _LMCPROF_POS;
	    CmdConfig : _LMCPROFCMDCONFIG;  //! <Type Comment="16#01 --&gt; Rapid traverse&#13;&#10;16#02 --&gt; Move in clockwise direction (CW)&#13;&#10;16#04 --&gt; Move in counter clockwise direction (CCW)&#13;&#10;16#08 --&gt; Feed rate interpolation&#13;&#10;" Name="_LogParMoveRelativeTCP.CmdConfig"/>
	    Velocity : DINT;  //! <Type Comment="Path speed (feed rate) for the movement.[Application units / s]&#13;&#10;" Name="_LogParMoveRelativeTCP.Velocity"/>
	    Accel : DINT;  //! <Type Comment="Acceleration for this movement [Application units / s² ]" Name="_LogParMoveRelativeTCP.Accel"/>
	    Decel : DINT;  //! <Type Comment="Deceleration for this movement [Application units / s² ]" Name="_LogParMoveRelativeTCP.Decel"/>
	    TransMode : _LMCPROFTRANSMODES;  //! <Type Comment="Transitionmodus during rounding" Name="_LogParMoveRelativeTCP.TransMode"/>
	    TransRadius : DINT;  //! <Type Comment="Radius of the tolerace-sphere during rounding [Application units].&#13;&#10;&#13;&#10;Parameter is only necessary for modes _LMCPROF_SMOOTH_PARAB + _LMCPROF_SMOOTH_CUBIC + _LMCPROF_SMOOTH_QUINT." Name="_LogParMoveRelativeTCP.TransRadius"/>
	    Jerk : DINT;  //! <Type Comment="Jerk for this movement [Application units / sec^2 / millisec]" Name="_LogParMoveRelativeTCP.Jerk"/>
	    ActiveTool : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParProfileInPosition : STRUCT  //! <Type Public="true" Name="_LogParProfileInPosition"/>
	    Mode : _LMCPROFINPOSTYPES;  //! <Type Comment="Mode, defined by the Enum" Name="_LogParProfileInPosition.Mode"/>
	    RetCode : DINT;  //! <Type Comment="0 ... FALSE&#13;&#10;1 ... TRUE " Name="_LogParProfileInPosition.RetCode"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadAxisParameter : STRUCT  //! <Type Public="true" Name="_LogParReadAxisParameter"/>
	    AxisNo : DINT;  //! <Type Comment="Number of the selected axis, beginning with 1." Name="_LogParReadAxisParameter.AxisNo"/>
	    ParNo : _LMCPROFPARAMETERAXIS;  //! <Type Comment="Number of the selected Parameter" Name="_LogParReadAxisParameter.ParNo"/>
	    RetValue : DINT;  //! <Type Comment="Value of the selected Parameter" Name="_LogParReadAxisParameter.RetValue"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadAxisState : STRUCT  //! <Type Public="true" Name="_LogParReadAxisState"/>
	    AxisNo : DINT;  //! <Type Comment="Number of the selected axis, beginning with 1." Name="_LogParReadAxisState.AxisNo"/>
	    AxisState : DINT;  //! <Type Comment="Status flags of the axis" Name="_LogParReadAxisState.AxisState"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadCmdIndex : STRUCT  //! <Type Public="true" Name="_LogParReadCmdIndex"/>
	    Mode : _LMCPROF_CMDINDEX;  //! <Type Comment="_LMCPROF_LASTLOADED : Returns the index of the last movement from the user which was successfuly loaded&#13;&#10;_LMCPROF_ACTCMD : Returns the index of the current move command&#13;&#10;_LMCPROF_VORANZ : Returns the number of entries in the buffer remaining&#13;&#10;_LMCPROF_SUMINDEX : Returns the number of entries in the UserBuffer remaining" Name="_LogParReadCmdIndex.Mode"/>
	    Index : UDINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadCommonCalcParas : STRUCT  //! <Type Public="true" Name="_LogParReadCommonCalcParas"/>
	    CalcParas : _LMCCommonCalcParas;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _logParReadGroupParameter : STRUCT  //! <Type Public="true" Name="_logParReadGroupParameter"/>
	    GrpNo : DINT;  //! <Type Comment="Number of the selected group, beginning with 1." Name="_logParReadGroupParameter.GrpNo"/>
	    ParNo : _LMCPROFPARAMETERGROUPS;  //! <Type Comment="Number of the selected Parameter" Name="_logParReadGroupParameter.ParNo"/>
	    RetValue : DINT;  //! <Type Comment="Value of the selected parameter" Name="_logParReadGroupParameter.RetValue"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadPosition : STRUCT  //! <Type Public="true" Name="_LogParReadPosition"/>
	    AxisNo : DINT;  //! <Type Comment="Axis number 1 - 6&#13;&#10;" Name="_LogParReadPosition.AxisNo"/>
	    Mode : DINT;  //! <Type Comment="0 ... Application Units&#13;&#10;1 ... Internal Units" Name="_LogParReadPosition.Mode"/>
	    Position : DINT;  //! <Type Comment="Position of the selected axis in the specified units. With an invalid axis entry, 16#FFFFFFFF is returned." Name="_LogParReadPosition.Position"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadPosOffset : STRUCT  //! <Type Public="true" Name="_LogParReadPosOffset"/>
	    PosOffset : _LMCPROF_POS;  //! <Type Comment="Zero point offsets (Geometric reference points) [Application units]" Name="_LogParReadPosOffset.PosOffset"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadProfileActValues : STRUCT  //! <Type Public="true" Name="_LogParReadProfileActValues"/>
	    Mode : _LMCPROF_ACTUALVALUES;
	    ActualValue : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadProfileError : STRUCT  //! <Type Public="true" Name="_LogParReadProfileError"/>
	    ErrorInfo : _LMCPROFERRORDEF;  //! <Type Comment="Error Structure" Name="_LogParReadProfileError.ErrorInfo"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadProfileParameter : STRUCT  //! <Type Public="true" Name="_LogParReadProfileParameter"/>
	    ParNo : _LMCPROFPARAMETER;  //! <Type Comment="Defines the wanted parameter" Name="_LogParReadProfileParameter.ParNo"/>
	    RetValue : DINT;  //! <Type Comment="Value of the Parameter" Name="_LogParReadProfileParameter.RetValue"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadRestartInfo : STRUCT  //! <Type Public="true" Name="_LogParReadRestartInfo"/>
	    sRestart : LREAL;  //! <Type Comment="Accumulated path length [Internal Units].&#13;&#10;This is the path length from the beginning of the NC-program to the point where it was aborted." Name="_LogParReadRestartInfo.sRestart"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _logParReadRestartPos : STRUCT  //! <Type Public="true" Name="_logParReadRestartPos"/>
	    Positions : _LMCPROF_POS;  //! <Type Comment="Absolute positions of all axes at the restart point [Application Units]" Name="_logParReadRestartPos.Positions"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadRobotParameter : STRUCT  //! <Type Public="true" Name="_LogParReadRobotParameter"/>
	    ParNo : _LMCRobotBase::_PARAMETER;
	    Mode : DINT;
	    RetValue : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParRobotIsOn : STRUCT  //! <Type Public="true" Name="_LogParRobotIsOn"/>
	    IsOn : DINT;  //! <Type Comment="True if the robot is ON." Name="_LogParRobotIsOn.IsOn"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParRobotOn : STRUCT  //! <Type Public="true" Name="_LogParRobotOn"/>
	    Mode : _LMCRobotBase::_ROBOT_ON_MODE;  //! <Type Comment="Mode = _ACTIVE: turn on in RobotMode = _ROBOT_ACTIVE to do standard profile movements. &#13;&#10;Mode = _DIRECT: turn on in RobotMode = _ROBOT_DIRECT to move single motor axes." Name="_LogParRobotOn.Mode"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetAxisParameter : STRUCT  //! <Type Public="true" Name="_LogParSetAxisParameter"/>
	    AxisNo : DINT;  //! <Type Comment="Number of the selected axis, beginning with 1." Name="_LogParSetAxisParameter.AxisNo"/>
	    ParNo : _LMCPROFPARAMETERAXIS;  //! <Type Comment="Number of the selected Parameter" Name="_LogParSetAxisParameter.ParNo"/>
	    Value : DINT;  //! <Type Comment="Value of the selected Parameter" Name="_LogParSetAxisParameter.Value"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetBasicParameter : STRUCT  //! <Type Public="true" Name="_LogParSetBasicParameter"/>
	    VMax : DINT;  //! <Type Comment="Maximum path speed [Application units / s]" Name="_LogParSetBasicParameter.VMax"/>
	    AMax : DINT;  //! <Type Comment="Maximum path acceleration/deceleration [Application units / s²]" Name="_LogParSetBasicParameter.AMax"/>
	    Tjerk : DINT;  //! <Type Comment="Time for the path acceleration/deceleration to attain its maximum value [ms]." Name="_LogParSetBasicParameter.Tjerk"/>
	    TangError : DINT;  //! <Type Comment="Maximum tangential error = 1/10000°" Name="_LogParSetBasicParameter.TangError"/>
	    PosOffset : _LMCPROF_POS;  //! <Type Comment="Shifting of the null point for the axis (Geometric reference points) [Application units]" Name="_LogParSetBasicParameter.PosOffset"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetDynSWEndPos : STRUCT  //! <Type Public="true" Name="_LogParSetDynSWEndPos"/>
	    AxNo : DINT;  //! <Type Comment="Axis number 1 - 9" Name="_LogParSetDynSWEndPos.AxNo"/>
	    pSWEndPos : ^DINT;  //! <Type Comment="Pointer to the dynamic SW end position.&#13;&#10;To delete a dynamic SW end position set this pointer to NIL." Name="_LogParSetDynSWEndPos.pSWEndPos"/>
	    Mode : _LMC_DYN_SWLIMITS;  //! <Type Comment="Choose maximum or minimum dynamic position" Name="_LogParSetDynSWEndPos.Mode"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetGroupParameter : STRUCT  //! <Type Public="true" Name="_LogParSetGroupParameter"/>
	    GrpNo : DINT;  //! <Type Comment="Number of the selected group, beginning with 1." Name="_LogParSetGroupParameter.GrpNo"/>
	    ParNo : _LMCPROFPARAMETERGROUPS;  //! <Type Comment="Number of the selected parameter" Name="_LogParSetGroupParameter.ParNo"/>
	    Value : DINT;  //! <Type Comment="Value of the selected parameter" Name="_LogParSetGroupParameter.Value"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetPosOffset : STRUCT  //! <Type Public="true" Name="_LogParSetPosOffset"/>
	    PosOffset : _LMCPROF_POS;  //! <Type Comment="Zero point offsets (Geometric reference points) [Application units]" Name="_LogParSetPosOffset.PosOffset"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetProfileParameter : STRUCT  //! <Type Public="true" Name="_LogParSetProfileParameter"/>
	    ParNo : _LMCPROFPARAMETER;  //! <Type Comment="Number of the selected Parameter" Name="_LogParSetProfileParameter.ParNo"/>
	    Value : DINT;  //! <Type Comment="new value of the parameter" Name="_LogParSetProfileParameter.Value"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetProfilePositions : STRUCT  //! <Type Public="true" Name="_LogParSetProfilePositions"/>
	    Mode : _LMCPROF_SETPOS_MODE;  //! <Type Comment="Mode defines how we get the set positions." Name="_LogParSetProfilePositions.Mode"/>
	    pApproxPos : ^_LMCPROF_POS;  //! <Type Comment="(approximated) positions, where the profile positions may be set [application units]" Name="_LogParSetProfilePositions.pApproxPos"/>
	    pCallbackData : pVoid;  //! <Type Comment="pointer to some application data, which may be needed when executing the callback for getting the right set positions" Name="_LogParSetProfilePositions.pCallbackData"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetRestartPointFileOffset : STRUCT  //! <Type Public="true" Name="_LogParSetRestartPointFileOffset"/>
	    PathOffset : DINT;  //! <Type Comment="Offset along the path [Application Units]. Must be within the start line." Name="_LogParSetRestartPointFileOffset.PathOffset"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetRobotParameter : STRUCT  //! <Type Public="true" Name="_LogParSetRobotParameter"/>
	    ParNo : _LMCRobotBase::_PARAMETER;  //! <Type Comment="Parameter number" Name="_LogParSetRobotParameter.ParNo"/>
	    Mode : DINT;
	    Value : DINT;  //! <Type Comment="New parameter value" Name="_LogParSetRobotParameter.Value"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetTimeBase : STRUCT  //! <Type Public="true" Name="_LogParSetTimeBase"/>
	    udTimeBase : UDINT;  //! <Type Comment="Time base in µs" Name="_LogParSetTimeBase.udTimeBase"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParStopMove : STRUCT  //! <Type Public="true" Name="_LogParStopMove"/>
	    Mode : DINT;  //! <Type Comment="1 --&gt; Stop the current movement&#13;&#10;0 --&gt; Continue a stopped movement" Name="_LogParStopMove.Mode"/>
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
  //Clients:
  //Variables:
		pLogFile 	: ^_LMCProfileLog::_LogFile;
		AccessNo 	: DINT;			//! <Variable Comment="Index of next free entry in the ring buffer" Name="AccessNo"/>
		LogMode : BINT
		[
		  1 LogMethodCall,  //! <Variable Comment="Log move commands and write commands only" Name="LogMode.LogMethodCall"/>
		  2 LogReadMethods,  //! <Variable Comment="Additionally log request method calls" Name="LogMode.LogReadMethods"/>
		  3 LogMethodCallPlusParam,  //! <Variable Comment="Additionally log the method parameters" Name="LogMode.LogMethodCallPlusParam"/>
		];
			//! <Variable Comment="Specifies logger behaviour" Name="LogMode"/>
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Logger
		VAR_INPUT
			CmdCode 	: _LMCProfileLog::_LMCLogCmdList;
			pMethodPar 	: ^void;
			RetCode 	: _LMCPROFERRORTYPES;
		END_VAR;
	
	FUNCTION GLOBAL SetLogParameter
		VAR_INPUT
			Value 	: DINT;			//! <Variable Comment="0: logging off&#13;&#10;1: log move commands and write commands&#13;&#10;2: log move commands and write commands plus request commands&#13;&#10;3: log move commands and write commands plus the method parameters (default)&#13;&#10;4: log move commands and write commands plus request commands plus the method parameters" Name="SetLogParameter.Value"/>
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL GetLogPtr
		VAR_INPUT
			pLogIndex 	: ^DINT;
		END_VAR
		VAR_OUTPUT
			pLogEntry 	: ^_LMCProfileLog::_LogStruct;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL InitLogBuffer
		VAR_INPUT
			pLogFileIn 	: ^_LMCProfileLog::_LogFile;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB _LMCRobotLog::@CT_
0$UINT,
2#0100000000000000$UINT, //TY__LMCROBOTLOG
1$UINT, 2$UINT, (SIZEOF(::_LMCRobotLog))$UINT, 
1$UINT, 0$UINT, 0$UINT, 
TO_UDINT(4210476436), "_LMCRobotLog", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::_LMCRobotLog.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
//Clients:
END_FUNCTION


#define USER_CNT__LMCRobotLog 3

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT__LMCRobotLog] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION _LMCRobotLog::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT__LMCRobotLog, pCmd := #vmt.CmdTable);
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Logger();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #GetLogPtr();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[2]		:= #InitLogBuffer();

#pragma warning (default : 74)
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
//{{LSL_ENCRYPTION 16#800
75C8A911F342212FF2412A957A14F9957AC0B515DBEF11BDD3D9C0112036DD4D486A3210AA8CFCE39332B78081A8835C2BACD321D74FBDDE4C3BF6C6B69D2C45099F3B35304BC55E4277B05FDE7C9A379F3E4357EBB6CF2A3D903B8A47BC334DC69CEDD7
28BE98E6F355A52A3C829EEE0CFE6E43878DAA9B65C97C8821EA2BB67D214983FA841CBC41365A6D1699D19DCAD1FAC2E7E4954870AF3FE1044FE5E46E6FCE63AE5CC31182640149B1BAD3FD1BA06C308D81D51E6E48A7C083AB3E4E5F844E7F24C52788
D937AB79E27443FE6E8079B7C5B87C787DFA1CAC784908765A197E7C2E665B64F41F51D1316752129F710DE488C71FBCDB8F7A2DA5EEF29AFEA1A7897C35AE2BAEF196DE6F15C52F6B4589D944A57CF102355E4372A7BFF77FF64DE64921A8DD56318FD9
30052EE3688BD387FC9419CAA2E3714CE7E296EBCA82B5D52B9F0F53FE9FE3B5A35E421E3700AC8FE946B2677141E5DA328587127D21577B32C26E58CEBAFC48DFDF75D291504D2F8F24413B150487DC1EECB7EC8C2A0CD43227B7E00D2558C1BCDF854E
E51D93CFA94F34FDC25E5F478B5F226998C57B7205B0CEF2176CC0CB69E8360C0EFCCDD756C36AF8CF614F6752A74896F8645146DCEB6609BD749422C4F57427AFA97D8758F2FCF4C717CFE3D117DF2EB8872C215E6E0AE86D77AEA597326F43013140F3
67A10D51D5A2CBC4EA982794ADFE002D4775FE6E077B2769BB7C58C9123BF0476F461701432969FB116767B5FE1B97CEB3FC274715134E26D4EB009A1DB8046B1E7FBF0E628D4C64C68D1470C5D4E377D23AA90A2EE2D13AE4030743070F999CC970A310
470572C0DD80DF55D3F7573636658B3A6C629AAA1977FE6376BFB37FF4E3065D7C93F5A3177192F4322839F4B2EDE0D0A1CF00609809927E37F65A0E450F9FAB1669A34230C6264DF50DAC9745434C288D3AB3D084E6191714EA3CBAE513DC4F7CA98296
BB41A19B5FCF695657905CCFAE90BC434FBAA4793067D027285A491D945F3605F0D5CB15FC9863E41450D7D1EE8FB37BD7F1EC23D16239E07E89AD09AAFD0B499FF190E2E4B4C7503A404E324184E33B5D8A8DCCF68F611BD6CBAD3FC3ADD542E7217C1E
2BBF49C2E91705292282558E83EEB42C452E572D7934E091651D47F9D35E3FC6F0EC957B8D8AE23EA40A7A3F91B5F693BC9CCBA8267389738CC08E88E5E6F3FCD4DE739A1832AE6BB1D9A723C273DBA6EDEF70BB884E18B608F4B6C9F6A2256E0EEB02BE
7E274B5DCADE4D732E496D8F2229E91CC42D5BBDCA53634A5DB0E863A14800974E7A78EC75D61568D2F1A629DC84D636602FBED7E05C3D5741408DC317B726614E38F56C69D84EB35447745721166725AB385AE36361A262BE8421D25635AC100F0863F9
1628DBAF804922ED61A6B4CA7EF4FDFD6D2FBD5551544612246492E034B28BF8F18E99175DF7A64303F3D8956D99434545DA6871D62E8A8B4983F30E0AFC4F66301E1E482FE76904727BCF6AABFD0418296F8D18FBE9C8960624B90FF4F306EB5D35C4B2
FB7D1827F67879C4A3EAF5DF6CDE6570F54D9ACFB67BB83BBAEC878C71BC0F596D98BCD5B77027DB0C45B2C8ACA5A10F07D5765A1DABF9A52BD5C597265AA409DFD7B1F2C1065D76F086C93E480E5F6BC2F45C5749C73218CC9C0AB67498108ABEDAD3E7
2321E2DFD0066528B5510A9859D4AAF312D54D92E2394943F1EE5D25559F48C3915925A996904ED25B8FA299F2D95117A060304F0452E71FDF7CB1F13D8BC85F02AF98B88E86A9EEB2133B7A1F14CB0DCA4F1DB76068632D7EC8B28563955B439C0CD9D2
234AC5AAD767E4293D9BC59B4A45FFF37F1C80B9874E3EF6339ED242C4EA9986C7B3F7AE5926BBA65905C6900AB4A2FEF221946F188307401DECA6753788FAFC4B7E38183483A9122952EB59B55AD794AF5E8FF914B1A33A9E7DB8C63A8078448133EB93
54E9D06F22B4EC64A9D0B13166858C8EB5CCDDC53533E2B503E0BA63AF2DD5BA2251A61C0775CA0FF6EF79CFE366B2CA63DCC3F3A3BB15BBFE7136D5FC4D7DBA92C447086E61745BA8E3E50E866A2D1B56E7AF8E03A4C843F7D1A7C603378E37860FAF2A
F85A3DC88EFB7FEBF6A9645758D928465E02462A523CCBB823846B901AC537FC7DADB5A27D25205F3FD6BAC06D2AB2DFE683D01277ABAB27D7EE5F389F83E59C52634F0C50B539F80FD5C13AA10418B529616A797CA48B97E60BEBE8871D76C6F16BDD79
2B0EE980E0CDFD23EB4AF748D245586AB84DB048F03D91AC5592115759A8E910FF8DF385B049AE6F91228B0CE17D46CE981E8ED95419DC5DA81DE38F4DCFF8E391431BEE7931ACF96DFE398316909C779F907977E6A1C54E1686848CA21356ECECA52A2B
85453B47787F3052BA1537237940E01B4FBD89B27EF6E0ABB75885C0BA59581328EBC47781D5136E00B3EDD5E8F8E68F23824136E640DD103B3423DD407FBF0E4F1898F9F247AD7A5052E0F6164316A6DDBD9BEABF44B21179D974A14C3E36DA4AC5B7F3
6E1E40CDB19558C5F7BDBD33030B26C6D8F3FBA797E5A2EF865CCC5419971CD1C1A7775125D6C07479D168F85373E962984EC40581D4478A4944E68C6AAD8F05F9C6B8A2EF10728D25FB1132AF671D2BAA164F85E7EF648B4238791EA16738386DBE40FF
FE486F2DC8A4EF00075713EF4E7EB257AAAEB5C769A63A098E52476505A21593A495D8BB91BA0C89ED4CCE605EE918D745D018FA22BBAE3DD00B45F14942AD5EB99DAA1061C34631342DD9EBE25E9F2DA5A5130A16A2C68AEC075A3607A2A5EA6BD93431
D5C0EBDC6F68FC4DD499DAEF3B11DC4283F39E0F17A8699EFE6864D7672DDD3261AE8B708167B4125FEFDAA62199D2453C63643EDDDF1A383BFB8043859C2651B1699A562FDCEBE0044F5B65CE874DFED650C3FE7C2D8761DBEF067091AA3E875F51C651
9840FDFEEF3308BD32D1F928CCA0ADF86302BC0FDD38DA1E86BD21DACB22FBF649830D3446F67783E2923EE52C72481075735F37B59D69CC0CBF73A5B9F31FDF799F269609C4BAF2BA371762B79095488FC8593B9BBA92ABCD75C0FA79C543CDDE0DB13D
71CC3C8E4B39D697EDA3926A1B92E1EDFE036B57D93F89A7228BCC6C591FAB09D14B862A9D783B7348A7B7098C82AEA6A8C5E5B34D78B91E25FBE2ACDFC1CDE139DA4CD2FF4567D2E7FE339ADD5780EE31E732E3EFDF630349C57C877630F331EA556576
4E0E9FBB3A8905E7C2B8CE79DA990A1C5B28D03B2F8AD3CDDC6C2236107FEE91BF5FECF9DDF434805923305600D43F70C25AAF5551210438E9F0AA078FC6EBA6970F5FB1B676F7E8F0C9732F684C38208BB22ABD2DF8BA982FD528664B47A3641DB5E6D4
74EFAAD9D93303966F368DB0AE2B364DF7F88CB8AB0D5F87914A06F6CE09E016011711AB103E41DDE94CF8EE1E2DDEA77B0241088E02BFC9CA2D7D3CC106B3084F54C86F3BC00CD96DCDAB90DB23E551482C0D261CE4FEDFB2700D3F644FB8470B97DDA7
9E496666959D3DC5C3119F8208DF7544FE72134AD61653AF467A8BA80871F4E02EE65DD1D12B748F29459C9CE8D5F037CDD4E31A5B8AE1CEB4795717E8ADF2D6F174FA8DB1148722C99C976B715F99A55A80A1F65E455E431F843B37200482C1A7104CB3
485BFB9CD110AF22FA1F25741611ED3CE30BF839FB5B067FF6035EEDDD4B0CCAA415571600546300F8D5E51DA5A3C69F222095D9AB6761F7392A07AC1AD0B7A33A8D6B5846F3800B7E3EC7783F5DD3316B5F0C57AC65C2369F7FC36DC54571D0B68A20ED
FD715890F3DFCD158D3F8DF4AFD0D26C072EDE86EE3EEE713A11E7F4ADEBC54B994D167F26A7A73F21A129A79C516EF18CB79174B2ED183BE45FA82AB74B1980CCF890A921BBD230A8177A746AAC9F851A1D90FE674FDB701CEC8542778EF8EA38C0D214
BA33A19B6C567700AA68E74869574E7162E49DB6AF18A83F8A23106C99066CF0E905AEA7AFA14A7909FDADE21099D516F566B2D3A03D7668C2C7C2EEFD0EB78C895908C1C5F4FBBC61C417C0AA3647BEA347BBE74599175AF584B018AFBF408A86D40306
1D98D81E9FC81A0B970E2C73747FD3613F500682A1CB6E10ECE119C044ABCB454C80DB669B5C99689535C44476C77C300B96FB940ECBF7F21649E8E98E946073A8DE8DC29235D08835550ACF3E6A20E2720C766537F314B32C2DAC413DC114EDC41A8DAD
44CF549BA85667D9D1155DEB481CC43EF9818F73F9B1F26C4BB9FCE31B874EE645AE66D1CB850940A41D84A5A4051C48939B9AEE10E01DC8B0A939937D89EAFE8D3353C72A45A00C59EB9D023BE1C100CBCA8B1694A8A34D1B72F32067C7AF5634FA7AA3
C377EB6316A954EA82D6E87601F1C4F87B700373732EE2D26B214AD0A171ECD6DA82A2E21EBBBB1607D2AD219C572F0DA59C058755D9BBC9B3C240BD10DEF4DA2F1A949DEBF2004FCB52D7AA55E6CAD948EF2CCFA382E6058B025F6EB4687C13C16BD916
2A81468A10C86F3AB01C730EAE0CA3D6A7E19A27072E6D437BDB821D8C9BB791B56AAE8BDE3E835E65DF93787E30EB255A71AC2DA2DF1647F087911566AAD3D4DD551A39AA7DF3182DC672A575018079EF7A6108FC86569AB52F586CDED4DB0DFC1872C6
B882F658F74FB862C6221F034C0C57CF47F2B0E05216FBFC7A155D23A0B0A6D26A172FB438266C054235440A34CA3C8FEB2AF9D45CCC5B9EE51192A0C6DEB13033B2E27DF17788CE6C7E7A7CF461B987C5DBADA3C5AB1AF8DDF2E6CCD6E9C236DDD34691
54C96C26619A88B03DF962F07600D3B617CC39A3D7FDC3163F04A7D84F21DCABC5880C068F2B4C4BD27261CC82D9718FE4054370BEC1E6F6B7C2089C50FDF3F9E22C69BC8B7DCDEA797917FCC8885C898951605B90B29B0B0227EE401F07CDB44A7008D2
4D555AC355514719472697DF1EEC443F1B514FE30D4004755C569B94CEC43210579B9D75F9412BC7E6D45A69EA7AC8EAA32746090D4950D84F4FA4C76FB777142572C4B3DC57BDC9D9F919E624FCD38E7C30D382560F1CFB97EB65495387B33C73BB9F98
A52BD279EBA43427B90069E8406B8AAAE050EDAE7857C1BDA0C46F420E217363FC63388DBBDF60428EBC4C855AAAE9F9897F55EFCE683941D79ED3D8FF782C7B048D89A5EAA2F9D4B58FC9CCDE4E7FA032D2B437E83FBF041261AB29DD5E2A412D808DA7
63416B775B6426370B76F1D617D6CDB0603E42CC09B1D58D2BD7F91BEA030AA2A2BC2EB9C3CE222C2A0698B24660FAB6A9EA71EDDA3BEFE751A544BEA68838A409C16BAAB58A9960BBAC101C41862279A99EB1E3D6B13CDB8707994D23B423E304633CE0
EEE189C052EAA395B0F9198BFA8D4723BF92EF9A5F21341FCF3121D4723E2BFFAAC732F7A45E1199AD21E61186964C42A25ACAFF93C10A3751A5F6FF29B9C253AAA475EA84244C97FD695E51BEE3D7A25452D81D8402907120634A77EB8F92D68A91F306
B32892083B431ABAA03B25EF0D5575AFB2FC5FCCC5ADB96D2A0814481921E5A2506A5762750AAE09BABB2CC34F3EB5C59FB0C7F2ACB0BE38CE3F2B67FB044A7B2D2FC7EA3839E88A7BEAD9F890AEE9199C46F5EA13EC70EFF6D5142365342927A42CC046
336AE7947BCE773A03F0E9E7B15AA7636FA634604FE7C7669DA1E0D9AA59789CF84350BD1A963213472C190C913F8BAAEC5F9FF94C23B985BB764043371A45431DAA581289B19F14E86FAD0CE84E5AE90934ADCF56E3FED0BC159A801D15CA776541F517
86D356E04E6A5B9C9EE2EE52CBD22FE3943F9880B5940775D5D7DDA4101390199F9E4D66C85D0C843479D6E41ADECE546CCDC132D619595928D88BD169C63D358698AEFF3C2D35EA7134F88B165E618ED31E0964B408B101C7DE57D112466821ABC51A0E
501030475D20D5860BB18EC9457C63A535742EA2ACBAD608FD96D0EF2652188B663DECB8E7D3CC906515D0F8C503334F8D90B3A5E0D2A3718B93D829EB5C82E4F2F87278D46B4247596A83807C434C93F5BA1B57F07F40D9B94404589C86DBF71F001F9F
1A38C0559CF92541EF897A19DD917AC31DD32143097A3E95922852C965C41597133C14D0BFFCD82F305E71998690A01C6E3E1BDDA6878F5CF657882EEF358765B3FDDD72DA5C742D22EF79B0F5D7A4AB28AA4F826C951C1359BF74BCBDDC6060D2213C4E
58B5C442E98CD364277DF831D83D022DB8FED6BFE5A7080BF9C34585FE7D9D29E9B7518DF917F3C5FF5E8010A16D6CF256C3D1A1516D1ADC9215475778184D6047E219CF2B3ABC3999FB9E2B109E3A32E4EDE8818CF45FE25896F7AD5A58806FF14179D5
BD84BB56A3DDBD5E66392EB9924BA923DBF3C28426584E2B3EB6D0F7E6DC2E05116D6CCB6B596B14F80AA95C5237374AB195BA16EF1D663C6D8FD39BFDBE7F289EED74CFD96E4248606757B0A546E3F9ACAD17E05895CB448288557B52A7BCB779DE1CD0
AFF85BFCA0F2808D468154B4999FEF7472B08ED8D13C081D1126D2BD7B7F9FCBDF9DC2BD166BCF048D20B803A411689FBE8FAC17AE94810A2317104FEA35DCD423B2AFA028A0CCD7E336ACDDE9B830676B778742521614E336F1198E3FAB6402776B6195
BEC50D37935179CF3899406B4D423CEC130AFFC3346B1A07A538CE38EF5E1F3C4F9E3F6B6BD7F25677F9D9411BD8FAB0A26AACB8BB968E537FFDB7A1FBA7F53BF1450738DDCA946F9EAC852B0913ABBBC91127245AA9F05D0122FEE26BCF66A9DF6F3EAC
1A9530F01CE209315AA32FBF3AB9DDD7A04F58322179A225B47DF2891DD8F6DFD8EA8D949A623DAA41CA49423CD42082AA1ACC0570137F7D620D6DED021168BEFE996069C4B584564D05A832F6CC1EBDEC18BDD150D98893F5DC4E26F90764A99AFEBE61
1D54377F82A6D326BC5517C8E95395299C35989425A4D333636F62E16CB144B864B20FDA263470740284A57EF9BF8BAB8ACE9082722B54DB9200313B2A96790F109DA278691F34F25B2FB13376F45987E95CABA58F1EC7C29A746D48E828B7E62B8B2D1B
1964BCA54E7367F040206D256218573B35C031C84EB1ABC4FBE88B9E1B023DF4DD8E304B43B5DA72B58B55BC5E1706D9DA9E2D3A46B278FEA8E452130B28D60C8FCB8BBB5FC24080030B83135CFF196C59717DF8FEE2ECBBB16DD596CCB06A000B0DD689
F83F19AF6A06E6C9DB5F4715BF4F32B43EB02A06071DDDE7727E1F9C108E9C074F3BCF4EF0DE2022C56C2EC8E7AF5C53C72C74DF9B9969BC1663AF5CFAF9F66327C44ED98E26291C8F908D66CF2D5754393F22CB93BDFF929213800DAA63AF61D4F82D4C
DDA5DE8AADED462F42993E8ADC9E2DEF9E6B81118558F580C87D27024434BC3FA2C982AF08EF98AE056C580D27B3AF8A6D90017ACC2961EC55E3ACC72DD47018D28BC02A94BF96C0491B867A7725B0C1E1E78FFEF1300975280529DBA896A8B667008FF5
1440C5E480EAC42BC07148E430E061A48728FD770DBAFB62602CF349F8FE62EEBB0A129281B5F63E4387FC84E0D417B8CED89AE0E82FCA69D54C3A56D7ED67692158B6A01B03F22A1E435B6F4659EC44BC0D746543A699DE9CD6241FEAABE94C62E46294
D172EA657121F05E5EF887BB9331F25547DA535FE1CA59E4D2AEDAAD9D51AB6D9EB783C14635206A7A402B3BADB73BFD70ECDA05C0AA1639D7D887B525FBF2F82A92AF25EA46E9FB1F0A65907FBD1E1FFA384DE322CF386F2F37B31DA1A229EE2FF48924
58EC8B72E0BE3CE32F0C188F0CEA4A05D478093C71CE54F61C80468A39A4291F9237461043EFF9FACE4830A1A556AC18984FC36236097258E068432D1ED8A08B0B198595791DA0B7E30E440698C94F7B08D90FCA55170349FE25B4F805ED4469A588CE39
4F62BA6C1DB3D5828B9E1F5F29C47CE4DCEB950856CF2C841647695B8AB2E5CAE441C07A4CF1615C1AD95D1DD70BEB886439F300CA3869389929533AAF532BCD85BF72E4CCE8F0394C28CB8983169BB86E8757E93BF5D66A6534C2B3E0EEB29BFB2F61F5
91064B4B9CE2172BD3C160DB8EDFF6259CA92C465B5F694A8583C6E237588348E9946FEF16A064B30E0900835BBDBEC5D057598561A4B8715494A88E7630975BD77791F6419A028062F67E1AA7C5CC418BD532982BD53C4CAB1445B76AC5852263B3EA7D
C8EEEBFDCB3534D47DE5433192A60E93C42D959DBD6013C0DFAE333FA52F10832258C7B1368D1F0D8E2345004F4234489BEB9A0CA5EEE7E3C59953F04EF77E8099FC757E9AB0BAEA319723E672297B43C482C039731A0968F2FA25945202B4A61F0B06AD
0B1D11BF2434B7045A42AF9B8052C434D3968825B1192A325D8829C48C3F95A90D10DDD4A9EF3D143C8D3647613BA552ED22FEBBDC1D1276430AB71BEB389DC81893873F3C3A04E236AE698055AFA564B6265A30787B7F05C807DD49C008ED8CFB056787
4BF3F3948AA637753452ED68EFD2E82CBC73C046398D7842013F68654FC3A04C9229BAAD8FC9A20E42FA8A55CD300D746B5CD8895D6F058403116E5A38F573C11AAA8A055949081E6D26AFE50FB0291873190D1C574ADF826A4EDA9CCE7A838310B8E490
1CAC65C610C01116BC483763F5837C792492BD852AF92870335AEA8D37D5175F999C6CA1C059118EB9D351BB41F3676B1B3E561A562B74FC4B1D71579B055463A7B8E13FE6F8701429BB1845F34352AA300C47D7B8F239293A1C78110FBC1C885033E3A0
251192C0B56B881188EA553ABC36BEBCCDF0F671420E8DBDF64ECAB371FD7FDA2B2DD88E6FDB2D2B4413BF74F0D942831FAD98BB28FB9A9B3DABF523E23B856F7FB887D9D2D0EA8291AC28B9CCE881E3F46AA36FAFF16BEDE1D3C5717649CAF2C14CD926
0E1DDFEB34487B43C9C3EC8EDF46D6F29A24C307510C5CC8E620B2A988387BC1D37AB245D7763CD78CC72741F2A718A7EEF6D623CF7656FFE3ECF9569BD601D20D91AED9207C3A367BE0D494870B59BD94EB9FD510A22B21A153D0BB5DE479691C6FA0B4
E18DA5722CCF9123D39B10CBEF56C77A4239182FAD12FAD58B0D771A313B8D44C8CE4E01B0DF5291BC8B467E750E89BFC85A7688C056C914F7F902D1CD7A3D9641F333C22ABAB60B0440CCA699DBD8F26623BB4498ADB0752CD5ECDB7BF28107661B499B
3FCB5565166F6FA1BB9C70C279E95BF13A29210A57865B17EF6EAB6EC0990B6EF2E978F28881D35C97AA80858F65B76585EF9B1FA9D47F1117C43FEAEFA040A8985982DEE5C4C96E5535635D4E034C1E5278C9BC000C06449BF2B2122423A7306BB06669
8263BB5350A8BC445AB2767AAA8AFC9E6A3957DE17E51F17FC8E24FFDE7DBBC4241D128E856E88B06639B69050345D57D0DD544792B4BB24CA2E472824F77BD1F254ED594DA1E339A413B79AF72C2A4455EE4364EAF8111CAAD4A6AD9C3249F53A2BB1CD
D669F4379A95395285C51D0254199656043066D66B6566729875D82BB2936EE2AC136CE45EEBFBEBA352ADADFB845AA457B499A792B2704D33413DA87029285F9A26DAB41F85784F2180633546FD7B1E3D5E2903BFC3C225837E45E92C46C1B6C82623C3
6859F48B5B14A386C0B08F3F565AAD986445B5A2FEF2F11560F7CFC31923216FB373717F56A70247485554456C84E59FB657A7E219B91FD7FC2580460BBFF56F6A42BCFD39BFF2B9F467B2115234D5DFB44A3668EC5AA117C243896ACC731A8A9D9CDFF2
71D8B2FC974734AC93646917DB83EE46E781F1F507F830D13417154BE4E03C0BDEDED20CDA9950C94FD2CF7AE7F2E3086366A18DC0C28AA4E43ED30895BF3B285673716A0C8407EB77BCB97E095EA37FE4206DCF33AD478D81AECDA91B0B13CB0843E604
E1B623C9FE8A9433533181BCC92D5A8DFAD43D67CF304335586256B88EAE26E4A48FE124FE8E9C8B7722723F2E46D50D6751FC9F64C3706460837B06732371FBF8FF17E38F96DB264016D4B493EA0585D4A905E92E112A770B8B0E867A25BCCDE9F116BB
A62FE66BD5B8BDE82097E1B3BD29DF746954EC212288A7E1D7BE0FA7BBBCBE7903C7BC6FDAFE46A420971BCC6A96F45A7F8263573565D5E65720F6104808DA7B9ADC43A48698B92B5A338F0BF2D2C1DB8C2A27BCFFF8B0762BE3D83F3097073F2DAA1147
D1F7551AB0504D33C4FC5753D2C6E7EF2E24A8EAED1A6654507ACC76D8090F7595008A4766D00651C651C29BC00450CEF71589BE9D9C293BEB4C98AA6916455F739C1B47F50503A91058D6E81AA76315FA90D5A7A1F4B6FBDDEA2CEF2006FEBA7B591711
B67829B5BFA637492DF57FF5A51B78A8B414766CCFA5087156518F63E1F6F54F5211818312B904037211706A0E31ABA8D390A80879E972AA86409FEC6556B849DFF883B98356F01D8BEB12E1F20CB79A994E05994A4B70564CCF42EFAE8BA4F959AADBB6
A5298A30BBBB560D86B4B8E9867203A8D2099FB937D612B7A08D7AFDB22F486D33CBDA9A2DB6D148019DF94DC8B7B765FAFF31D4351E678323C81F68FF20826170507FB28DBE7ABF027074ACA7D2DF67CA6D695D71662D999498F88A4C147665293CBC24
A9E55A055FCF0A4BC5F63D78D62751B605EE2F85661C3ED48D915B1615359D3FE74BC5BA7F20F1CD3C7F22B1181F3A86ED65F1D7504EBFE0CC85123DED2902CDE6AB990AC0B1F4584E051DE3108B1F33F2311789C69DBD1BD0413FFA101F1AB42DC1FDD1
4BF1314CA6EEBA256A4F00E21704D7D54FA33276B7FADE2E05E435B5CB4ACBE8B62677C04AC6D760C4FD20DFC82074E5A2C9529796E96EC09705E934AD1855CE4422FE2A0253C0D5330E92363681AF0E81E27B6C9A55CB1A736E1E5659DD864C747234D7
56734D9B9EB7B0798834B8608059557EC039C35FD3E2A542BB0498EDEC4548D40F4D0AC14B04A0FA73355E58A4B565755CC7FDD4581934AD7E28D072D6A191E16B3DCDE0DB3AEC90348D3D4CC531C58709EB12351AD25F792E5EF0A9586998C6CFCA36CF
A9CC351E7F26ACF2051F18C27AC37057E0BA8DD0CEF87364242D8C964ED7A7CBC94B84D8AA922BE46C3B96E81A520AB8B2861B23D208B60029CE441314158B9EA519CBC69A9E3BD2B8BE8B2EEF8E936255DED4769E0C3948D7A1C48FC7FC50B57A60B6DB
87A97EBCB5081F9348CAF5DDF055F72795AC7B4EA4ED1003AF8B2043CB9859343F33983ABBCD710F5B78FCAA035CB9BFF9214317B54EC5DF338C8FC4CB124473857532B58CD9376BF61D72889BE329D437B2A421F1B66CFF152E2043AC63E7FC14C4F5A2
96A30BD88B3D9F11A25BD449CF187FA08BF332B68D32C9179C64D3D7D16CF095CE10A7F733A82669CABB958526A0A7BE23A0FFF75C94A2224ED39096EA903CA185842FDA1E886C65773B3AA9BE63B11ECD37F8416954C31F96E98150D9405949E91AD80F
3ED43ED8BAA5D8612B0D65D81641A7FA93AC7022301D3E91F4C1D4930F19C52B7F931747A73613CB2D93CD81EC045D270D7C0BE7767ED9BB8F64032C5EA3C3B27DA821314014F9B8496E09387A75AF13106ACFB182E96008DEE2FCE5823642E9BB863D11
624DCC1DC07C5AC022AACE13BB30867AEC3857982CEF165436069DC56C6924AB98D4112FD92B45E870BDBCD3235CF05534B4A876AB10CF34EC4FA3F259C72145B31CEA7D47EF063E70C091ED6FE58EA85CEBA76566B6E0B6A7E55627C0A4E87376060253
E453B07F67AE639DE0E9D3FD9A087E9D74574CFD079C39C252F9FECEF9EC7C772E63F7CFC398F466159F5F7018739FFA341816F344C79B853DC431EF877DB6E12238C78AD1DCCC1559A3B6D4E1FF6455616F12B2DE74330A894CE8FE9896544B78761156
4660AC29581151EE469D654B231DEC1041FF806888045D83E3EEC51C528DEF9504175F2ED24BEF77102D955F3464E262767629BB94941E36FCC59C72F113AEBD37FCCC86DA0FD731324294D99BBDD06A44C09DBEDEA6C339DC4DADF81C455BCF6EAB39D1
1F3E756F0112E7F98D986FA20A7927099CAC2C78E918D6F28D2F8DB304AE4874FD81C17DB5B3C52B950D0BCC8089AA0C83509DD3E9E4A2AF449506BE7511D4BA46A8046E5ED8FC2516664B26A1DB1D5047678AEDC831CF2227312B75A5E0C8C46D5D73AB
821D5829E43E34E803A372B75377C2FD75F548E7F99C44319970582C5496F0444C88C364CEAE7AE162388F5D4320D90A367A385F0D74816E5E28A3CE2D067E2B94F3341DB231067B6EBA96F0F361190B45B8C56F397995F42C473DD45405C79476DA5EE6
D88F4E91DBEA3DD654E2086F691480F5B8E6D2E0CE7555B5F85FC5877BF5A5353D7BD0C7F5346F47671CDA26B28F2613BC4FDD9CC30887770C580D0FC2C81F46C17F945E07408457009FEE2D950383C84B781A5B9F2871A7979527A68DA060ACF04262C8
2E500CDD8D9D5DE0D30BB7C8E246967D325B9E92E92114D8A33286572AAF9DD2FE5730014D800D23A68AAF1FBFB24EB2E5B6A7F8E2DE72A1AD9A21964080FE28F5F7E90779E41367A121E14F7AB3B1311FCDCA0DAB3772AA7E478B93A2FDC4C40D10B5D4
6B132DDD45FE6872FA89CC6513CDABF92C18CDBED22C10FE4892561B64B81E575B2DB1944F62E56C988FADFC0F9690766AA6FECAF44EFDFB326672655552F0CEAF881C7B7FD743A64972A77C6578474D80BA59169E7B12389B678D1DA69267E21FEAD0ED
B33EBC9D8794192FF49CC569724E2E862391BC1D4B00C733A57D107EB6AFE198E72D306718D91E11379D54A6CA5F38FBD0BB30B5A652CE68EE54D4C72CBBCE338FBE34C1B764DA526AA928015AA135E3FB062BE14F4394E09FE03F0AAFEBF44A35B26122
C7FC5C2D3EEEE6973A8BAED995D28DC2FB9C065E871098EFDE4CD5811DC8281923994C53DECDE9713174B453183AB298407EAE5D3E49BCA4DE33F1576E7C6EDBA247AB1D1E0BAE274B2AC96492447D1FDEE1636813D3E503FD027143CC520B8CB82685D9
283D1F15FF0B591D3E319F61998B59BF4A6EA1ABDCE13C827201A73C2E2714F4B54D42E4551287BC3339A154E34E428108D34F92B920031466B8FF8EC515064252B6F10D166575040A99FC8D1FE474A36E3D7040993E2C86CF7DB69D6660B8988FF25C6C
BD68F70492F804EAFD0CD478E0860AEF6F8EF961571479B50961D4466175E28C4A438BF447B27F45F2DBA5459F72CD5C1F6B52D66256FA49112EAF0F656115D12A59DC749538698C80D1AC8C8F0E54577DD688FEC1CD7920C83C89AD7DE22B49F1103551
0CCFD3489745917A64F999CF98A313B0E42B1B9FDDD65C8D0EF3A8E43FA001C83C83E988AD5F4AE03657275135B2204AC20FBA92524A22083F10DEC22061B6C6DC0FEF8FE8B0884FD220633F7DAA779786B227D9DD2A4BDD3B4588E6D4416383669758DA
EB95E6984BEDB282D6E5A3664239328EFF0B335AEA5A917A94D4FBB1C2322B73F4D3B3B041FE691EA7F96C18F799CB6E28AF2CC532890546316CBC260C1182C11EE40FE244F504D16A137005356BECB5D756D5917C8EF3D1BA341CC42B1673BA44C061A8
8FAC8E3EC6A0A7596F810C8BEBB39A23851CF143F180731FF9143649CFCD435E2628A754D748B17419592B01771368C7B2ECF009CE8ADF32F3A816DED1507822F5185508731F45A179AF793F08D3E5F8B7076273981A24ECC6476ECA6D9489536FC7FFFE
7D0437F91C1DC93207741E1AC73286E1E235B7C20526023D4FF5207D0CFAC4D761C299DDBE8708021BF26B418B193F367E73C1D18B0B1225EDE93492A0C42EDA43637932F9575F830EF99B03F0F392DF118F8FEDEC267F6EC440AB5F1FE9F45D6507FFA1
BCF047A7393A345C631F1A662A18A6B6C348F639BEFFA75F0C96F4EB74042F60B1076F46FEB2F0EEAD46F76635AB3DDAE16EE234EE7C43B18A47BDEDF7685777CE1CFCCFBB8B90C87299EB46A4A4598687848A095F095C7ECD42AEE07F73B736EE4F6806
21C23756EFDDCA0755B3550C1BEC5A3AEBBE39601CB1555D394B3D61241A5C416D18AE79CF271C1B77BFBE1969D3ABD99621FD700BBBC889F6E8085F57F8DAED2E9DD568273874145059DCC70BD3459A781E8F1DF84C5AC5BC70343EAE7422C3AD381B7E
465531469C8931F8835BFF0F43295D60B838CDB276F0840456482A94D376850C6CB9469DDFE91E4C3C2D205A929B4DE83C4332980441EC741EF154359DFA421925DA97383D05FEB9BDCB95D17440306A145A53D480D4020D5E9F64E749ED20793121D5EA
2CE58F83CAEBB6E31666795402F974B7F9E00AC9F984E8D7544FA623DBA2771720AFC9F633CFE83EB36F31FBF6EDD01B9406CE6E56CB0F9A161642E8AF1E6E7DAD7C8ACE7E9769A22AC115C34CE42E75BE5B80A6323D6E7E930221CE9A19135D0407D233
E082AD78EC4D3E17ED2CCD0E49ECD387617DA9BCFE848F8F238784F34A48F3CB24FE92EE850BEF981D7D3BC96E580587B054EC7F2535FCF66BD1DBD5941AEB6F656461810D6388857DCB75178F71C74D1944D0EF9087FE662F7FB3C63B11E9C5AA72D138
CAC08C881905D0B3A45EA96C159951B6FF9F5AD50AA4B5AFA501B14C1191F8C3D4E524A7CB401803D788E4A2359599361DCB27D5A3B6603CDB84A4CAF61B9D8D4F09DC48E2AAA16481A9CA6565CFE3BBBFC0689C66F1CA1871288458298BBDBC4CA7656A
DC58AD647E32B89E363ADC94EE4A5CF107BCF7AFAB14190B174130ECA13EB59E5CA67B7BB9CFCA81936A462D3A90D5C5B91AA394BABD66DC1C8BAA06013648B3E88C8CFE93C9A9DCAE1A0326E1D5D6366DA4D146D982631A8786CEE27C8A08609DD47A0A
95DC7300EB2430128C32F33386C83A1F0915BDE8F74D4B4F05E49741469667FC977151A5D7424904F5A52AC615951F0409CC4B9790665EC4D38A3977DF146709B145FAC6A8DA4F7036B54A23E3EDCA2D12EF02E3259CF84C6A23C1AE75F1DC99660A179A
AFB59EF25F9E051CE5D22FE37E00DFEC2AE34DB0FD34FCF491978BE2101033B722C5E35EF8E3CBBF749C56018C4F40FB0413E89ED94858DE88FC2EFF017D095B964C99BEB6E87E815E20DD01B8E1240EF152C495CDC0D0C7BD9E6273BAB07F692C4DFF18
4D47FA8CFA237E74C5460C799D28B4283BF679B5E94631F519CF7B7E3634D001820A00CB8063768F93C0366F6BB7B7B08457FDB24B91A54D328978E5D36FC3E0C83C16ACE3495949F6276E1F19D1DB4F8E571B8CA4F9D81A625D36B7EC0C1A57016B7080
F9B5EAD362964E1EA55B3F73BE055120C1865129CC7E4EDC4F2C16A0F700E606BD88773D2393C4EF61A7D160BB336DE76CA33C51701D77DA26904EC80362AA94C9AB5DDCCBAE4A7B9C7D208ACDE1D7BC3537FE40FBD6C7AF65DAD4C21FF7980894CF316A
330EDB63C3E941AD692720BD088FED031BB24ADE13D199952660F7285D11AA522C33B7A1C11513597299C7E3D90257A6C4403DB6D979FF08E7CC5433A770548C622410DC4A8934A44CFE895516C4B07579DB1F2EC9DBACFA0CE772CB6042E35E0CF263DF
B8830E3D48A7A2A215FB176EEA2B6343DC8A4C467BDE0299F500E7728FC7B9E97224FB1DF54DEF431088DC8D8BFD096B2F9616F344E7B3118E6E15557439FC0E1BA1E5F5C3DDE34F5532E14E051347C1D3C661DBF762F2698F89A1DC4CDC424CAF8176A4
15D3E3C688F70CFCE62A9FE4089A998B35661851F730326EAE277B3E162408B0EEFA7295E2FC21C18652FB74CE1C3C4C26C4CA29BE53F19A9374A77AE0BCEF3B04CD9887EC47393DA418E5861619B7855D49D4D07A736E0C978E6588BD6DC0EC236A7819
0A588D9893653670B4461E3434BAFADD8345AA237C139AFFB45AD2FF8DBA1F7AB3E67AB7A7DD34D07F8FA1C1D1F303F3536846BC2657CAA656A718671473EF07FB757D72E0B1C8E6370612FD0E7E20AFBF0BF9CAB9F8D43D3AAA81CC7427ABCB0DDC41AF
7F4B6AA34C392B79D91A1B477C9F28AB162D97F8B58899BA0B12FC68A4E5B4C1BCB80AC9FC5D8D27C4519AF6C2B8BD88B92EDE18BD93689BEDFDBD27349EFFACD088C9CEB516A096A95F795878F5CA0EA348EBDC7B822E461DB5E6DC16AD37188466A421
7B1CB5FD1115D2C6239DB0204F9D7B6E6D444E128156440FA18F42616C70291930D81A195C9B05120CC195ECCDF12152F1BB0DFC4CA9E872B42F5708571E26C103E4BC2AD2C8219C83C8C148F5B6CCD5EF1CEFF607B9AF3AEAF522A76D272EB58C7ADB83
FB0005E04FA05861E57A1BF7F2E858F444652CE1A6115DC36150DA9BA4BFF2876192362D7F6B1D42ADAD5C1113A9BDCD74E9F67F17E4E9C9FC97C73AB146C89E29309061D535FB61BC763A47A47064DC83348D4EAA4EEC908CD1E82D245722FFF89042A5
DA6160A6794F861909A4BF260DB5320A7BA3F3B10B09A9DC63ED89FBCB3C07DFD477D2FCC381DB085DF0A3C1F62F8AA0C77D0D1C2EE24A8B7568656A9D1E0FC7B335B02120BDE816B44698B91651A0C9EB365DA3142572345B84D42496EA11FB16EA1DB5
A30989461542C8FED5AE53E9027E5EE89EC985BABB5D5BDF87BC8BD7EDBA02E92F8770C97A1BB4E0404495AFE3311AAFC377D5B98DBCF479DB05ECA291113049DC3459A520A837AD4EB1F63CD326D9FB6112415132C8F908AEC2CD612D17895D9284E8AA
6A7A485CF9D7A7AEBB9EF73EB1257319F2ACA7F3023FA03EBE53CFAA50E6944A3ADE990C83896D9CE2D412B6FE26CB653C7E6C749CC77E39AC69B5C871384958243E956F3935BD3820B869DB7AD9CA4D9C04A46020E22212EF354F0B03AD3E31A236C280
34C16A6A7FB381AB0E86D58D1B77B9D351884621D1A56E5563A6E53A6EE9BE50B20006B2728208EF74D0B77B17DEB498BB9551FA8009A72834F2DA75E912DDB98E712A1E99B9D741FB8599F73D54BCB50CDA7EBF4C0C9DE9D940E78191CA081B8D0419C9
1D03938A50ABF6AFE03A49DD2447574A13B999F3F7B458DFB2A2B8406010BEA3E62592E3324603460D2E85F5388623DF0A4F051E81EFBDE4A05366FEFB3DFDB43B4DB89A245E89C228F63B510A8BE9787FC40174E1C8F9F12997511713B9C67799576F6F
0C2E5BA6F77B139F7C31A8AAF8FDBA4F1739976E2E5CD870772C4033CD84937B7A0287CEECA7C3F864DAB20526D2912C636BA36A4BC6600C8D5F14E2B0CDCA682293974C04E24E434E4C9BA488F8AA10A4F0E5FC507C9996AE88E07AE57E836E6CC36E7D
D2480E5E84D19EE17A212BB36596C5CBD9FCBE9E4D2D4446E7F92213207323B6251414685B34B95B3AC76CF7D4D90AF880974D05F27215EE05C3D84ACC814A3E31851740A813D84515AB599014045E964BE0AE47FFEDBB74939FE21A4B663A6B39A37426
7DE4CD0A88847A01996CA4DAA8C650F75306089B5A2EE16C15D8D9B70604DE8936015D5166521C1C25A1A52EF3F67E538013D0314A5487DB139EBC5BD11CBB5A2A8C680B6AFCBE73BF34F92CF2570DC083ED717E2D54B52FD8D074332CC33378DCCC8EB8
13450013E474ECF0C74411733E86240B3188979E4D2BC002DBA4955C47031DBF80D10483448413CF07240D5A6C6D61A13316371C8D1D636DE48F115377C360CABF93A1595608599F913BE3CBC15170DBD0F7F67CB2D6B063CC31B50410320F8A05EFB8E4
571EB196F1B3A905E9DC7D056AD81F00C45F4A21A73A6665E2EECE00571464DAC683EADF5298F0E5AC6D7975AECC70B4BF978ED4591498DB601D8820DA99138F7D177D5587DBFE6D2120EAB0C93950019B938BD923F49173D5E05594636E9F29B2BA9F37
94881A9BF64DFC8D94D530195DA5DD49CCEAF453E8F35E7851F6C251BCC1864D10F6A2DC902ECB367F2B292883ED21A5E81A28C774D614FB7D9C8427D805F997F88686DABA4ECDF017AAB2861E5B720C7663AD12D3C1E23BC4509B24F93B4F59D4144AB8
47BE8D32772FEACC738E75B7E27717F2B2D4C6F9620C4C16B8E8C9BBF9E4C6DCEDA9CAA739D48F3D4D34E84F9B19938CE94F878A65DA532F2ECEC7FEDA637F7CC93CA05AAB6F4567BDD5FAC7B75B9AA49C3104B49DA4F8FC51CF91BA1E6B4E7053110E4A
AD4702D550AB513412F1E4D35033094E10936048A9573DA8C84A3942121B4D9329627D5D2B900F85C03B3295D568F0FBCB2CA2829B2FE6E906BE69CCC6793F9BD49DD098949BE84EDC13BB430711C843C1114E4BA823DBC41E9881B82BF924AB33B70BA2
C281B536496C2BD83A26808FE1E7ECF6EF0AD9E63EF389829C79EF0A1E77B9802B2139B47891091044382F3241648967A558CE6C0F8A38DF99FFA369A5C78917D187C349BFA75229E0EB790776EA633A73B085760FB0D67696E273841E617775088CEC54
3A3CDAC96FE0DC559426E5AE72C99107C2473E83CDB5FDC991517A0EAF3C37505685452F9E53F71312C627818C153C08CA0F79830EC81032AE206283B5D3266F60FC1D04B0D6B77CB027971878ADED18DC3437345E3CEA7060F326F495897E8CB5011286
80B4B23F5561BB5ACB1B253795370D3152643A3B8CBBD5596076A95606C33B5811F099E75498B2154FD85DBF3C8AA2A2F68CB5526D5800253E5B250E447F338ACC9CACB7F00B5C26A03DA2C886F8D26D575AB301E9F9552800415199B1D19E0FBA46E498
53AAA97905D42E6D444CC95AEAC53704121DF37FA2EA097C39375D1BB573F0B85E72F1629F4A0ABEF5CCB14761A2AE007DDCA0B6F17E50CCBF71929FB32A845E92CCEDDC270DC6B34D93C1FCD4D2C6AADE3B81F45F76A14D350F3B0D847ADBCB95D3DF38
70B407B5978D42152826D40530E0467343ED95BF07863641580FCC12899A99268431121031A5B1E2EF8DE8638682D721D02237A1B56D4DE06C299400EF6735344688F9B9CF975EB17F4EF44A01D0B24A79F3C0D6AD6AB23F97C47784F40B3222EBE14743
CF669FE617E10C6D6C9B9066BF1A9EE50A82ADAAA5BA677814582DA5482BB1DA3E1E327BDE16686E691E7D1EB0F7F0944AE56BA28C593CEF44F9971E9F34F38E16BC8DE21260C209742B734BFCA90A7EF8B0084BA61CCD2097D73BF7C3FC194FEE9B6658
0AA40CE8E85D2B27851C72189FE48C77CA4A6632A08C64938C71AA77CF604EB6C31E9AF22BDDDC4DB32C8C2D1A14C7FF4BF1D644A695E6E543584C9FD5F92C98DACD998E83E86A9DE88212666831E43BB29A5E56CE9C8CD53CFD8E02D983255F18A7CAC3
BB62F1F4D961AD9E199436D6F8BC32100582215172439ACD38659985AAD30D1F179E1CE49E1FA8C594CF7FD4803D4171
//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "AddEventToPLC"
	Revision           = "1.0"
	GUID               = "{34860F7E-0C37-4246-92F2-FDAAA3029666}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(480,240)"
	Comment            = "class for adding an event to the EventQueue (by using the CallBackReceiver methode)">
	<Channels>
		<Client Name="coEventQueue" Required="true" Internal="false" Comment="object channel to EventQueue"/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek"/>
		<Dokumentation Revision="1.0" Date="2015-09-22" Company="Sigmatek" Description="Creation."/>
	</RevDoku>
	<Network Name="AddEventToPLC">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{25A4ABF8-5E76-44ED-BE67-FED89F7AC201}"
				Class      = "TCPComReceive"
				Position   = "(218,120)"
				Visualized = "false">
				<Channels>
					<Server Name="ClassSvr"/>
					<Server Name="ID_Source"/>
					<Server Name="sRecvCnt"/>
					<Client Name="toDataManager"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.ClassSvr" Destination="_base.ClassSvr" Vertices="(1006,210),(834,210),"/>
			<Connection Source="this.ID_Source" Destination="_base.ID_Source" Vertices="(1006,270),(834,270),"/>
			<Connection Source="this.sRecvCnt" Destination="_base.sRecvCnt" Vertices="(1006,330),(834,330),"/>
			<Connection Source="_base.toDataManager" Destination="this.toDataManager" Vertices="(218,210),(38,210),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using TCPComReceive

AddEventToPLC : CLASS
: TCPComReceive
	TYPE
#pragma pack(push, 1)
	  _PLCEventData : STRUCT
	    EventType : UINT;
	    no_para : UINT;
	    Para1 : DINT;
	    Para2 : DINT;
	    Para3 : DINT;
	    Para4 : DINT;
	    Para5 : DINT;
	    Para6 : DINT;
	    Para7 : DINT;
	    Para8 : DINT;
	    StringSize : UINT;
	    aString : ARRAY [0..24] OF DINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
  //Servers:
  //Clients:
	coEventQueue 	: CltChCmd_EventQueue;
  //Variables:
  //Functions:
				//! <Function Comment="Is called whenever data is received. Overwrite this method to process data. &#13;&#10;NOTE: I the optional CMD parameter is used when sending, the method CallBackReciverCMD() has to be used for receiving in order to correctly receive the CMD parameter." Name="CallBackReceiver"/>
	FUNCTION VIRTUAL GLOBAL CallBackReceiver
		VAR_INPUT
			DestinationID 	: DINT;
			SourceID 	: DINT;
			size 	: UDINT;
			pdata 	: ^USINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: BOOL;			//! <Variable Comment="TRUE .. erfolgreich Empfangen .._MNG_Recived &#13;&#10;FALSE.. Fehler beim Empfangen .._MNG_GlobalReciveError" Name="CallBackReceiver.retcode"/>
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd EventQueue


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB AddEventToPLC::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_ADDEVENTTOPLC
1$UINT, 0$UINT, (SIZEOF(::AddEventToPLC))$UINT, 
0$UINT, 1$UINT, 0$UINT, 
TO_UDINT(1884785641), "AddEventToPLC", //Class
TO_UDINT(4066382941), "TCPComReceive", 1$UINT, 0$UINT, //Baseclass
//Servers:
//Clients:
(::AddEventToPLC.coEventQueue.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2896066780), "coEventQueue", TO_UDINT(915169004), "EventQueue", 1$UINT, 3$UINT, 
END_FUNCTION


#define USER_CNT_AddEventToPLC 2

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_AddEventToPLC] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION AddEventToPLC::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= TCPComReceive::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= TCPComReceive::ClassSvr.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, TCPComReceive::ClassSvr.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_AddEventToPLC;
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #CallBackReceiver();

#pragma warning (default : 74)
	TCPComReceive::ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF TCPComReceive::ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL AddEventToPLC::CallBackReceiver
	VAR_INPUT
		DestinationID 	: DINT;
		SourceID 	: DINT;
		size 	: UDINT;
		pdata 	: ^USINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: BOOL;
	END_VAR
  VAR
    tmpEntry : _PLCEventData;
    tmpVarNo : UDINT;
  END_VAR
  
  if size = sizeof(_PLCEventData) then
  
    _memcpy(ptr1 := #tmpEntry, ptr2 := pdata, cntr := sizeof(tmpEntry));
    
    if tmpEntry.EventType = EVENT_VALUECHANGE then
    
      tmpVarNo := VarList_GetVarNoByID(x0:=to_udint(tmpEntry.Para1), x1:=0, x2:=true);
  
      coEventQueue.AddValueChange(udVarNo :=tmpVarNo , dOldValue:=tmpEntry.Para2, dNewValue:=tmpEntry.Para3);
      
      retcode := true;
    
    elsif tmpEntry.EventType = Event_EventEntry then
    
      //_memcpy(ptr1 := #tmpEntry, ptr2 := pdata, cntr:=sizeof(_PLCEventData));
  
      coEventQueue.AddEventEntry(uiCategory:=to_uint(tmpEntry.Para1), uiIndex:=to_uint(tmpEntry.Para2), pText:=#tmpEntry.aString[0], bUnicode:=to_bool(tmpEntry.Para3));
      
      retcode := true;
    
    end_if;
    
  end_if;

END_FUNCTION

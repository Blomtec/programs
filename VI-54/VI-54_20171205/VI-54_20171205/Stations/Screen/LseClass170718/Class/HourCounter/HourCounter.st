//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "HourCounter"
	Revision           = "0.0"
	GUID               = "{59DA0DE5-6A08-4987-8046-D85867494CE8}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "true"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(840,120)">
	<Channels>
		<Server Name="ClassSvr" GUID="{6B485314-0106-4ACE-AB5D-4C54CC22EA1C}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="GraphActive" GUID="{97B420C7-AB36-4EDD-BCA9-D1AC7D4CE2E6}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="File"/>
		<Server Name="ResetData" GUID="{6F6A8D57-74BE-4651-A2E9-F0038D57C313}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Client Name="iClock" Required="true" Internal="false"/>
		<Client Name="Standard6" Required="true" Internal="true"/>
	</Channels>
	<Network Name="HourCounter">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name           = "Standard6"
				GUID           = "{1FBCC852-4D47-43B9-87BC-3F2FD9416A83}"
				Class          = "Standard"
				Position       = "(270,390)"
				Visualized     = "false"
				BackgroundTime = "1000 ms">
				<Channels>
					<Server Name="ClassSvr"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.Standard6" Destination="Standard6.ClassSvr"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
HourCounter : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	ResetData 	: SvrCh_DINT;
	GraphActive 	: SvrCh_OptiesEnum;
  //Clients:
	iClock 	: CltChCmd_DateAndTime;
	Standard6 	: CltChCmd_Standard;
  //Variables:
		HourStr 	: HourCntrStr;
		NbrOfPackets 	: DINT;
		MinutsOfRunning 	: DINT;
		OldMinute 	: DINT;
		OldHour 	: DINT;
		ActRunStatus 	: RunningStateEnum;
		ActNbrOfPackets 	: DINT;
		ResetCntrs 	: DINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Background
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION GLOBAL GetValue
		VAR_OUTPUT
			Data 	: HourCntrStr;
		END_VAR;
	
	FUNCTION GLOBAL GetRunState
		VAR_INPUT
			RunState 	: RunningStateEnum;
		END_VAR;
	
	FUNCTION GLOBAL GetPacketCntr
		VAR_INPUT
			Cntr 	: DINT;
		END_VAR;
	
	FUNCTION GLOBAL ResetCounters
		VAR_INPUT
			ReadReset 	: DINT;
		END_VAR
		VAR_OUTPUT
			Reset 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using Standard
#pragma usingLtd DateAndTime


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB HourCounter::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_HOURCOUNTER
0$UINT, 0$UINT, (SIZEOF(::HourCounter))$UINT, 
3$UINT, 2$UINT, 0$UINT, 
TO_UDINT(611340533), "HourCounter", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::HourCounter.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::HourCounter.ResetData.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3788075490), "ResetData", 
(::HourCounter.GraphActive.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(3357191758), "GraphActive", 
//Clients:
(::HourCounter.iClock.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(379089208), "iClock", TO_UDINT(817179225), "DateAndTime", 1$UINT, 1$UINT, 
(::HourCounter.Standard6.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(299410791), "Standard6", TO_UDINT(3603188683), "Standard", 6$UINT, 1$UINT, 
END_FUNCTION


#define USER_CNT_HourCounter 1

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_HourCounter] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION HourCounter::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_HourCounter, pCmd := #vmt.CmdTable);
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Background();

#pragma warning (default : 74)
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ResetData.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF ResetData.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	GraphActive.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF GraphActive.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

FUNCTION VIRTUAL GLOBAL HourCounter::Background
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR
  VAR
  	xxx : Dint;
  END_VAR



  // Reset the data
  if ResetData = 1 then
    for xxx := 0 to ((sizeof(HourCntrStr) / sizeof(CntrStr)) - 1) do
      HourStr[xxx].MinutsOfRunning := 0;
      HourStr[xxx].NbrOfPackets := 0;
    end_for;
    ResetCntrs := 1;
    ResetData := 0; 
  end_if;
  
  
  if ActNbrOfPackets <> NbrOfPackets then
    NbrOfPackets := ActNbrOfPackets;
  end_if;
  
  if ActRunStatus = eRunStatus then
    if OldMinute <> iClock.Minute then
      MinutsOfRunning += 1;
      OldMinute := iClock.Minute;
    end_if;
  end_if;
  
  if iClock.Hour <> OldHour then
    HourStr[iClock.Hour].MinutsOfRunning := MinutsOfRunning;
    HourStr[iClock.Hour].NbrOfPackets := NbrOfPackets;
    // reset the counters
    ResetCntrs := 1;
    MinutsOfRunning := 0;
    NbrOfPackets := 0;
    OldHour := iClock.Hour;
  end_if;

	state := READY;

END_FUNCTION


FUNCTION GLOBAL HourCounter::GetValue
	VAR_OUTPUT
		Data 	: HourCntrStr;
	END_VAR
  
  Data := HourStr;

END_FUNCTION

FUNCTION GLOBAL HourCounter::GetRunState
	VAR_INPUT
		RunState 	: RunningStateEnum;
	END_VAR

  ActRunStatus := RunState; 

END_FUNCTION

FUNCTION GLOBAL HourCounter::GetPacketCntr
	VAR_INPUT
		Cntr 	: DINT;
	END_VAR
  
  ActNbrOfPackets := Cntr; 

END_FUNCTION

FUNCTION GLOBAL HourCounter::ResetCounters
	VAR_INPUT
		ReadReset 	: DINT;
	END_VAR
	VAR_OUTPUT
		Reset 	: DINT;
	END_VAR
  
  // Reset counters
  if ReadReset = 1 then
    ResetCntrs := 0;
  else
    Reset := ResetCntrs;
  end_if;

END_FUNCTION

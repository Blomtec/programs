//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "SaveLoadUSB"
	Revision           = "0.0"
	GUID               = "{7BAB4EE0-0F17-46BF-83B8-6C15FC69CA49}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(540,540)">
	<Channels>
		<Server Name="Copy" GUID="{A70A26EB-9889-4C2D-8067-0C7680FED02D}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="ResultFileCopy" GUID="{E1EF6B85-A314-4593-8757-248F985DF0A9}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="UserUSBLinked" GUID="{5272B8A7-FFC0-40FF-94FC-9B840B1C10F5}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Client Name="FileOs" Required="false" Internal="false"/>
		<Client Name="System" Required="false" Internal="false"/>
		<Client Name="vLevel" Required="true" Internal="false"/>
	</Channels>
	<Network Name="SaveLoadUSB">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{D3D5BE76-C932-40E6-8DB5-5F011DAD4F63}"
				Class      = "_Global"
				Position   = "(218,120)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Server0"/>
					<Client Name="Lse"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.Server0" Destination="_base.Server0" Vertices="(690,210),(518,210),"/>
			<Connection Source="_base.Lse" Destination="this.Lse" Vertices="(218,210),(38,210),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using _Global

SaveLoadUSB : CLASS
: _Global
	TYPE
	  CharArray : ARRAY [0..100] OF CHAR;
	END_TYPE
  //Servers:
	Copy 	: SvrCh_DINT;
	ResultFileCopy 	: SvrCh_DINT;
	UserUSBLinked 	: SvrCh_DINT;
  //Clients:
	FileOs 	: CltChCmd__FileSys;
	System 	: CltChCmd_System;
	vLevel 	: CltCh_DINT;
  //Variables:
		CodeOk 	: DINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL IF_WindowRun
		VAR_INPUT
			whoami 	: ^_WHOAMI;
			pic 	: ^void;
			event 	: ^_EVENT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Copy::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd _FileSys
#pragma usingLtd System


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB SaveLoadUSB::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_SAVELOADUSB
0$UINT, 0$UINT, (SIZEOF(::SaveLoadUSB))$UINT, 
3$UINT, 3$UINT, 0$UINT, 
TO_UDINT(4108667253), "SaveLoadUSB", //Class
TO_UDINT(3788417926), "_Global", 0$UINT, 14$UINT, //Baseclass
//Servers:
(::SaveLoadUSB.Copy.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2066699830), "Copy", 
(::SaveLoadUSB.ResultFileCopy.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3536532805), "ResultFileCopy", 
(::SaveLoadUSB.UserUSBLinked.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2901458497), "UserUSBLinked", 
//Clients:
(::SaveLoadUSB.FileOs.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(523274688), "FileOs", TO_UDINT(545279513), "_FileSys", 1$UINT, 18$UINT, 
(::SaveLoadUSB.System.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(968218125), "System", TO_UDINT(968218125), "System", 0$UINT, 1$UINT, 
(::SaveLoadUSB.vLevel.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(3230249975), "vLevel", 
END_FUNCTION


#define USER_CNT_SaveLoadUSB 44

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_SaveLoadUSB] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION SaveLoadUSB::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= _Global::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= _Global::Server0.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, _Global::Server0.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_SaveLoadUSB;
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[2]		:= #IF_WindowRun();

#pragma warning (default : 74)
	_Global::Server0.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF _Global::Server0.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Copy.pMeth			:= StoreMethod( #M_RD_DIRECT(), #Copy::Write() );
	IF Copy.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

FUNCTION VIRTUAL GLOBAL SaveLoadUSB::Init

  //call method from base class
  _Global::init();

  if _firstscan = 1 then
//    DiskSpace := FileOs.GetDiskSpace(Drive:="c", BytesPerSector:=512, SectorsPerCluster:=, TotalClusters:=, FreeClusters:=);
  end_if;  

END_FUNCTION

FUNCTION VIRTUAL GLOBAL SaveLoadUSB::IF_WindowRun
	VAR_INPUT
		whoami 	: ^_WHOAMI;
		pic 	: ^void;
		event 	: ^_EVENT;
	END_VAR
   
    //call method from baseclass
  _Global::IF_WindowRun(whoami, pic, event);
  
  if event^.ftype <> _EVENT_NONE then
    //Check if there is some action on the usb-port
    if ( event^.ftype = _EVENT_LASALOS ) & ( event^.scancode = 8 )then
      if event^.modifier = 1 then
        UserUSBLinked := 1;   
      elsif event^.modifier = 2 then
        UserUSBLinked := 0;   
      end_if;
    end_if;
  end_if;
  
  // check code..
  if IsClientConnected(#vLevel ) then
    vLevel := vLevel.Read();
  end_if;
  
  // bij juiste level is saven ook mogelijk
  if vLevel >= TECHNICIAN then
    CodeOk := 1;
  else
    CodeOk := 0;
  end_if;  
  
  
  
  case Copy of
    00:
    
    01:// from ETV to USB (eventjournaal)
      if CodeOk = 1 then
        if FileOs.CreateDirectory(dirname:= "E:\eventjournal") >= 0 then  // "c:\product\*.csv" 
          Copy += 1; //  
        else
          Copy += 1; //   can't make dir. (dir already exsist)
        end_if;  
      end_if;
    02: // copy EventJournaal
      ResultFileCopy := FileOs.FileCopy(pSource:="C:\export\eventjournal", pDest:= "E:\eventjournal", udOption := FC_SUBDIRECTORIES);
      Copy := 0;
      
      
      
    10:// from ETV to USB (toolcat)
      if CodeOk = 1 then
        if FileOs.CreateDirectory(dirname:= "E:\Toolcat") >= 0 then  // "c:\product\*.csv" 
          Copy += 1; //  
        else
          Copy += 1; //   can't make dir. (dir already exsist)
        end_if;  
      end_if;
    11: // copy
      ResultFileCopy := FileOs.FileCopy(pSource:="c:\Toolcat", pDest:= "E:\Toolcat", udOption := FC_SUBDIRECTORIES);
      Copy := 0;


    14:// From USB to ETV (toolcat)
      if CodeOk = 1 then
        if FileOs.CreateDirectory(dirname:="C:\Toolcat") >= 0 then
          Copy += 1; //  
        else
          Copy += 1; //   can't make dir.(dir already exsist)
        end_if;  
      end_if;
    15:
      ResultFileCopy := FileOs.FileCopy(pSource:="E:\Toolcat", pDest:= "C:\Toolcat", udOption := FC_SUBDIRECTORIES);
      Copy := 0;
  
  
    20:// from ETV to USB (SpareParts)
      if CodeOk = 1 then
        if FileOs.CreateDirectory(dirname:= "E:\Spareparts") >= 0 then  // "c:\product\*.csv" 
          Copy += 1; //  
        else
          Copy += 1; //   can't make dir. (dir already exsist)
        end_if;  
      end_if;
    21: // copy
      ResultFileCopy := FileOs.FileCopy(pSource:="c:\Spareparts", pDest:= "E:\Spareparts", udOption := FC_SUBDIRECTORIES);
      Copy := 0;


    24:// From USB to ETV (SpareParts)
      if CodeOk = 1 then
        if FileOs.CreateDirectory(dirname:="C:\Spareparts") >= 0 then
          Copy += 1; //  
        else
          Copy += 1; //   can't make dir.(dir already exsist)
        end_if;  
      end_if;
    25:
      ResultFileCopy := FileOs.FileCopy(pSource:="E:\Spareparts", pDest:= "C:\Spareparts", udOption := FC_SUBDIRECTORIES);
      Copy := 0;
  end_case;



END_FUNCTION
FUNCTION VIRTUAL GLOBAL SaveLoadUSB::Copy::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	Copy := input;
 	result := Copy;

END_FUNCTION

//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)

//{{LSL_DEFINES

//}}LSL_DEFINES

//{{LSL_DECLARATION

(*!
<Class
	Name               = "_LMCProfileLog"
	Revision           = "1.2"
	GUID               = "{DC89AFDF-7ED1-4F89-BD1D-5D8A84C7D7EC}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	IconPath           = ".\Class\_LMCProfileLog\LMCProfile.ico"
	SharedCommandTable = "true"
	Objectsize         = "(350,120)">
	<Channels>
		<Server Name="ClassSvr" GUID="{B3033A27-7B37-4161-BE18-1FC66B15005E}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Client Name="cStdLib" Required="false" Internal="false"/>
	</Channels>
	<RevDoku>
		<Owner/>
		<Dokumentation Revision="1.2" Date="2016-03-22" Author="FucHer" Company="Sigmatek" Description="1. Improvement: the LMCProfile and the LMCRobotBase initialize now just one buffer"/>
		<Dokumentation Revision="1.1" Date="2015-09-25" Author="RauAnd&#13;&#10;SatChr" Company="Sigmatek" Description="1. Improvement: Logging for new commands added"/>
		<Dokumentation Revision="1.0" Date="2015-07-15" Author="FucHer" Company="Sigmatek" Description="creation"/>
	</RevDoku>
</Class>
*)
_LMCProfileLog : CLASS
	TYPE
	  _LMCLogCmdList :  //! <Type Public="true" Name="_LMCLogCmdList"/>
	  (
	    CEmpty,
	    CSetBasicParameter,
	    CLockProfile,
	    CUnlockProfile,
	    CMoveLinear,
	    CMoveCircle,
	    CMoveRelative,
	    CCircleDefinition,
	    CStopMove,
	    CSetAxisParameter,
	    CReadAxisParameter,
	    CSetGroupParameter,
	    CReadGroupParameter,
	    CSetProfileParameter,
	    CReadProfileParameter,
	    CProfileInPosition,
	    CReadPosition,
	    CReadProfileError,
	    CGetStartPositions,
	    CGetSlowestAxis,
	    CSetTimeBase,
	    CGetMoveFinished,
	    CGetBufferData,
	    CReadPosOffset,
	    CSetPosOffset,
	    CCalcResidualTime,
	    CCoupleGearAbsolute,
	    CCoupleGearRelative,
	    CCoupleGearVelocity,
	    CCoupleCurveTab,
	    CCoupleUserPos,
	    CCoupleProfilePos,
	    CCoupleGearPolynom,
	    CReadAxisState,
	    CReadCmdIndex,
	    CSetDynSWEndPos,
	    CReadProfileActValues,
	    CGetBrakePositions,
	    CChangeCoupleSettings,
	    CCoupleAdditivePosDiff,
	    CGetRemotePoint,
	    CLockProfileRestart,
	    CLockProfileStartLineNo,
	    CSetRestartPoint,
	    CReadRestartPos,
	    CContinueNCProg,
	    CReadRestartInfo,
	    CGetStartPositionsRestart,
	    CReadCommonCalcParas,
	    CSetProfilePositions,
	    CRobotOn,
	    CRobotOff,
	    CRobotIsOn,
	    CMoveLinearBelt,
	    CMoveRelativeTCP,
	    CGetRobotPosition,
	    CReadRobotParameter,
	    CSetRobotParameter,
	    CAxMoveHand,
	    CAxMoveEndless,
	    CAxMoveAbsolute,
	    CAxMoveShortestWay,
	    CAxMoveReference,
	    CAxMoveRelative,
	    CAxStopMove,
	    CAxTuneAxis,
	    CAxSetPosition,
	    CAxQuitError,
	    CAxReadAxisError,
	    CAxReadParameter,
	    CAxReadSWEndPos,
	    CAxInPosition,
	    CAxSetParameter,
	    CGetAxInformation,
	    CLockProfileStartFileOffset,
	    CLockProfileRestartFileOffset,
	    CSetRestartPointFileOffset,
	    CAxReadPosition,
	    CAxSetFollowMode,
	    CMoveCurve,
	    CMoveCurveBelt,
	    CAxSetAdjustment
	  )$UDINT;
#pragma pack(push, 1)
	  _LogStruct : STRUCT  //! <Type Public="true" Comment="Log buffer entry" Name="_LogStruct"/>
	    CmdCode : _LMCLogCmdList;  //! <Type Comment="Identifier of the logged method" Name="_LogStruct.CmdCode"/>
	    RetCode : _LMCPROFERRORTYPES;  //! <Type Comment="Return value of the logged method" Name="_LogStruct.RetCode"/>
	    TimeStamp : UDINT;  //! <Type Comment="ops.tAbsolute" Name="_LogStruct.TimeStamp"/>
	    CmdParameter : ARRAY [0..140] OF SINT;  //! <Type Comment="Method parameters.&#13;&#10;Use structure definitions from _LogParCalcResidualTime to _LogParStopMove to access the data.&#13;&#10;E.g.: if the CmdCode is CMoveCircle the fitting structure definition is _LogParMoveCircle." Name="_LogStruct.CmdParameter"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogFile : STRUCT  //! <Type Public="true" Comment="Command logger data type" Name="_LogFile"/>
	    LogData : ARRAY [0..MAX_LOG_BUFFER_INDEX+1] OF _LogStruct;  //! <Type Comment="Log data ring buffer" Name="_LogFile.LogData"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCalcResidualTime : STRUCT  //! <Type Public="true" Name="_LogParCalcResidualTime"/>
	    Mode : _LMCPROF_RESTIME_CALCMODE;  //! <Type Comment="Modus of calculation of the Residualtime" Name="_LogParCalcResidualTime.Mode"/>
	    ResidualTime : UDINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParChangeCoupleSettings : STRUCT  //! <Type Public="true" Name="_LogParChangeCoupleSettings"/>
	    AxisNo : DINT;  //! <Type Comment="Number of the selected axis, beginning with 1." Name="_LogParChangeCoupleSettings.AxisNo"/>
	    CoupleMode : _LMCPROF_EXECUTE;  //! <Type Comment="Time of couple command execution" Name="_LogParChangeCoupleSettings.CoupleMode"/>
	    MaxVel : DINT;  //! <Type Comment="Maximum speed of the axis for this movement [Application units / s]" Name="_LogParChangeCoupleSettings.MaxVel"/>
	    MaxAcc : DINT;  //! <Type Comment="Maximum axis acceleration / deceleration [Application units / s²]" Name="_LogParChangeCoupleSettings.MaxAcc"/>
	    DeltaPos : DINT;  //! <Type Comment="Position difference between the master axis and the slave axis [internal units]" Name="_LogParChangeCoupleSettings.DeltaPos"/>
	    GearMul : DINT;  //! <Type Comment="Multiplier for the gear ratio" Name="_LogParChangeCoupleSettings.GearMul"/>
	    GearDiv : DINT;  //! <Type Comment="Divisor for the gear ratio" Name="_LogParChangeCoupleSettings.GearDiv"/>
	    MaxJerk : DINT;  //! <Type Comment="Maximum jerk of axis [Application units / sec^2 / millisec]" Name="_LogParChangeCoupleSettings.MaxJerk"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCircleDefinition : STRUCT  //! <Type Public="true" Name="_LogParCircleDefinition"/>
	    CircleDef : _LMCPROFCIRCLEDEF;  //! <Type Comment="0 --&gt; Linear movement&#13;&#10;1 --&gt; Circular movement" Name="_LogParCircleDefinition.CircleDef"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParContinueNCProg : STRUCT  //! <Type Public="true" Name="_LogParContinueNCProg"/>
	    PosWindow : DINT;  //! <Type Comment="Position tolerance window [Application Units].&#13;&#10;The axes must be at the start position / restart position plus or minus the PosWindow." Name="_LogParContinueNCProg.PosWindow"/>
	    DelayTime : UDINT;  //! <Type Comment="Delay time in milliseconds.&#13;&#10;The axes will start moving after this time." Name="_LogParContinueNCProg.DelayTime"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleAdditivePosDiff : STRUCT  //! <Type Public="true" Name="_LogParCoupleAdditivePosDiff"/>
	    AxisNo : DINT;  //! <Type Comment="Number of the selected axis, beginning with 1" Name="_LogParCoupleAdditivePosDiff.AxisNo"/>
	    pPosdiff : ^DINT;  //! <Type Comment="pointer to the positiondifference" Name="_LogParCoupleAdditivePosDiff.pPosdiff"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleCurveTab : STRUCT  //! <Type Public="true" Name="_LogParCoupleCurveTab"/>
	    AxisNo : DINT;  //! <Type Comment="Number of the selected axis, beginning with 1." Name="_LogParCoupleCurveTab.AxisNo"/>
	    CoupleMode : _LMCPROF_EXECUTE;  //! <Type Comment="Time of couple command execution" Name="_LogParCoupleCurveTab.CoupleMode"/>
	    MaxVel : DINT;  //! <Type Comment="Maximum speed of the axis for this movement [Application units / s]" Name="_LogParCoupleCurveTab.MaxVel"/>
	    MaxAcc : DINT;  //! <Type Comment="Maximum axis acceleration / deceleration [Application units / s²]" Name="_LogParCoupleCurveTab.MaxAcc"/>
	    DeltaPos : DINT;  //! <Type Comment="Position difference between the master axis and the slave axis [Application units]" Name="_LogParCoupleCurveTab.DeltaPos"/>
	    pMaster : ^MasterStruct;  //! <Type Comment="Pointer to the master axis information. Use method _LMCAxis::ReadMasterInfo()." Name="_LogParCoupleCurveTab.pMaster"/>
	    GearMul : DINT;  //! <Type Comment="Multiplier for the gear ratio" Name="_LogParCoupleCurveTab.GearMul"/>
	    GearDiv : DINT;  //! <Type Comment="Divisor for the gear ratio" Name="_LogParCoupleCurveTab.GearDiv"/>
	    Mode : _LMCAXIS_CURVETABMODE;  //! <Type Comment="Slave axis operating mode" Name="_LogParCoupleCurveTab.Mode"/>
	    pCurveData : ^_LMCAXIS_CURVE;  //! <Type Comment="Pointer to the curve data" Name="_LogParCoupleCurveTab.pCurveData"/>
	    MaxJerk : DINT;  //! <Type Comment="Maximum jerk of axis [Application units / sec^2 / millisec]" Name="_LogParCoupleCurveTab.MaxJerk"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleGearAbsolute : STRUCT  //! <Type Public="true" Name="_LogParCoupleGearAbsolute"/>
	    AxisNo : DINT;  //! <Type Comment="Number of the selected axis, beginning with 1." Name="_LogParCoupleGearAbsolute.AxisNo"/>
	    CoupleMode : _LMCPROF_EXECUTE;  //! <Type Comment="Time of couple command execution" Name="_LogParCoupleGearAbsolute.CoupleMode"/>
	    MaxVel : DINT;  //! <Type Comment="Maximum speed of the axis for this movement [Application units / s]" Name="_LogParCoupleGearAbsolute.MaxVel"/>
	    MaxAcc : DINT;  //! <Type Comment="Maximum axis acceleration / deceleration [Application units / s²]" Name="_LogParCoupleGearAbsolute.MaxAcc"/>
	    DeltaPos : DINT;  //! <Type Comment="Position difference between the master axis and the slave axis [internal units]" Name="_LogParCoupleGearAbsolute.DeltaPos"/>
	    pMaster : ^MasterStruct;  //! <Type Comment="Pointer to the master axis information. Use method _LMCAxis::ReadMasterInfo()." Name="_LogParCoupleGearAbsolute.pMaster"/>
	    GearMul : DINT;  //! <Type Comment="Multiplier for the gear ratio" Name="_LogParCoupleGearAbsolute.GearMul"/>
	    GearDiv : DINT;  //! <Type Comment="Divisor for the gear ratio" Name="_LogParCoupleGearAbsolute.GearDiv"/>
	    MaxJerk : DINT;  //! <Type Comment="Maximum jerk of axis [Application units / sec^2 / millisec]" Name="_LogParCoupleGearAbsolute.MaxJerk"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleGearPolynom : STRUCT  //! <Type Public="true" Name="_LogParCoupleGearPolynom"/>
	    AxisNo : DINT;  //! <Type Comment="Number of the selected axis, beginning with 1." Name="_LogParCoupleGearPolynom.AxisNo"/>
	    CoupleMode : _LMCPROF_EXECUTE;  //! <Type Comment="Time of couple command execution" Name="_LogParCoupleGearPolynom.CoupleMode"/>
	    MaxVel : DINT;  //! <Type Comment="Maximum speed of the axis for this movement [Application units / s]" Name="_LogParCoupleGearPolynom.MaxVel"/>
	    MaxAcc : DINT;  //! <Type Comment="Maximum axis acceleration / deceleration [Application units / s²]" Name="_LogParCoupleGearPolynom.MaxAcc"/>
	    pMaster : ^MasterStruct;  //! <Type Comment="Pointer to the master axis information. Use method _LMCAxis::ReadMasterInfo()." Name="_LogParCoupleGearPolynom.pMaster"/>
	    GearMul : DINT;  //! <Type Comment="Multiplier for the gear ratio" Name="_LogParCoupleGearPolynom.GearMul"/>
	    GearDiv : DINT;  //! <Type Comment="Divisor for the gear ratio" Name="_LogParCoupleGearPolynom.GearDiv"/>
	    sMaster : DINT;  //! <Type Comment="Distance travelled by the master axis during coupling [application units]" Name="_LogParCoupleGearPolynom.sMaster"/>
	    sSlave : DINT;  //! <Type Comment="Distance travelled by the slave axis during coupling [application units]" Name="_LogParCoupleGearPolynom.sSlave"/>
	    MaxJerk : DINT;  //! <Type Comment="Maximum jerk of axis [Application units / sec^2 / millisec]" Name="_LogParCoupleGearPolynom.MaxJerk"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleGearRelative : STRUCT  //! <Type Public="true" Name="_LogParCoupleGearRelative"/>
	    AxisNo : DINT;  //! <Type Comment="Number of the selected axis, beginning with 1." Name="_LogParCoupleGearRelative.AxisNo"/>
	    CoupleMode : _LMCPROF_EXECUTE;  //! <Type Comment="Time of couple command execution" Name="_LogParCoupleGearRelative.CoupleMode"/>
	    MaxVel : DINT;  //! <Type Comment="Maximum speed of the axis for this movement [Application units / s]" Name="_LogParCoupleGearRelative.MaxVel"/>
	    MaxAcc : DINT;  //! <Type Comment="Maximum axis acceleration / deceleration [Application units / s²]" Name="_LogParCoupleGearRelative.MaxAcc"/>
	    pMaster : ^MasterStruct;  //! <Type Comment="Pointer to the master axis information. Use method _LMCAxis::ReadMasterInfo()." Name="_LogParCoupleGearRelative.pMaster"/>
	    GearMul : DINT;  //! <Type Comment="Multiplier for the gear ratio" Name="_LogParCoupleGearRelative.GearMul"/>
	    GearDiv : DINT;  //! <Type Comment="Divisor for the gear ratio" Name="_LogParCoupleGearRelative.GearDiv"/>
	    MaxJerk : DINT;  //! <Type Comment="Maximum jerk of axis [Application units / sec^2 / millisec]" Name="_LogParCoupleGearRelative.MaxJerk"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleGearVelocity : STRUCT  //! <Type Public="true" Name="_LogParCoupleGearVelocity"/>
	    AxisNo : DINT;  //! <Type Comment="Number of the selected axis, beginning with 1." Name="_LogParCoupleGearVelocity.AxisNo"/>
	    CoupleMode : _LMCPROF_EXECUTE;  //! <Type Comment="Time of couple command execution" Name="_LogParCoupleGearVelocity.CoupleMode"/>
	    MaxVel : DINT;  //! <Type Comment="Maximum speed of the axis for this movement [Application units / s]" Name="_LogParCoupleGearVelocity.MaxVel"/>
	    MaxAcc : DINT;  //! <Type Comment="Maximum axis acceleration / deceleration [Application units / s²]" Name="_LogParCoupleGearVelocity.MaxAcc"/>
	    pMaster : ^MasterStruct;  //! <Type Comment="Pointer to the master axis information. Use method _LMCAxis::ReadMasterInfo()." Name="_LogParCoupleGearVelocity.pMaster"/>
	    GearMul : DINT;  //! <Type Comment="Multiplier for the gear ratio" Name="_LogParCoupleGearVelocity.GearMul"/>
	    GearDiv : DINT;  //! <Type Comment="Divisor for the gear ratio" Name="_LogParCoupleGearVelocity.GearDiv"/>
	    MaxJerk : DINT;  //! <Type Comment="Maximum jerk of axis [Application units / sec^2 / millisec]" Name="_LogParCoupleGearVelocity.MaxJerk"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleProfilePos : STRUCT  //! <Type Public="true" Name="_LogParCoupleProfilePos"/>
	    AxisNo : DINT;  //! <Type Comment="Number of the selected axis, beginning with 1." Name="_LogParCoupleProfilePos.AxisNo"/>
	    CoupleMode : _LMCPROF_EXECUTE;  //! <Type Comment="Time of couple command execution" Name="_LogParCoupleProfilePos.CoupleMode"/>
	    MaxVel : DINT;  //! <Type Comment="Maximum speed of the axis for this movement [Application units / s]" Name="_LogParCoupleProfilePos.MaxVel"/>
	    MaxAcc : DINT;  //! <Type Comment="Maximum axis acceleration / deceleration [Application units / s²]" Name="_LogParCoupleProfilePos.MaxAcc"/>
	    Mode : _LMCPROF_RECOUPLEMODE;  //! <Type Comment="selecte the mode for the recouple" Name="_LogParCoupleProfilePos.Mode"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParCoupleUserPos : STRUCT  //! <Type Public="true" Name="_LogParCoupleUserPos"/>
	    AxisNo : DINT;  //! <Type Comment="Number of the selected axis, beginning with 1." Name="_LogParCoupleUserPos.AxisNo"/>
	    CoupleMode : _LMCPROF_EXECUTE;  //! <Type Comment="Time of couple command execution" Name="_LogParCoupleUserPos.CoupleMode"/>
	    MaxVel : DINT;  //! <Type Comment="Maximum speed of the axis for this movement [Application units / s]" Name="_LogParCoupleUserPos.MaxVel"/>
	    MaxAcc : DINT;  //! <Type Comment="Maximum axis acceleration / deceleration [Application units / s²]" Name="_LogParCoupleUserPos.MaxAcc"/>
	    pMasterPos : ^DINT;  //! <Type Comment="Pointer to the command variable containing the master position [internal units].&#13;&#10;The command variable has to contain set positions." Name="_LogParCoupleUserPos.pMasterPos"/>
	    DeltaPos : DINT;  //! <Type Comment="Position difference between the master position and the slave axis [internal units]" Name="_LogParCoupleUserPos.DeltaPos"/>
	    GearMul : DINT;  //! <Type Comment="Multiplier for the gear ratio" Name="_LogParCoupleUserPos.GearMul"/>
	    GearDiv : DINT;  //! <Type Comment="Divisor for the gear ratio" Name="_LogParCoupleUserPos.GearDiv"/>
	    Mode : _LMCAXIS_COUPLE_GEAR_MODE;
	    MaxJerk : DINT;  //! <Type Comment="Maximum jerk of axis [Application units / sec^2 / millisec]" Name="_LogParCoupleUserPos.MaxJerk"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetBrakePositions : STRUCT  //! <Type Public="true" Name="_LogParGetBrakePositions"/>
	    Pos : _LMCPROF_POS;  //! <Type Comment="Brakepositions" Name="_LogParGetBrakePositions.Pos"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetBufferData : STRUCT  //! <Type Public="true" Name="_LogParGetBufferData"/>
	    index : UDINT;  //! <Type Comment="index which should be copied" Name="_LogParGetBufferData.index"/>
	    MoveData : _LMCPROF_MoveData;  //! <Type Comment="Buffer data" Name="_LogParGetBufferData.MoveData"/>
	    RetCode : iprStates;  //! <Type Comment="READY ... copy is okay&#13;&#10;ERROR ... copy is not okay" Name="_LogParGetBufferData.RetCode"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetMoveFinished : STRUCT  //! <Type Public="true" Name="_LogParGetMoveFinished"/>
	    index : UDINT;  //! <Type Comment="Buffer index of the movement that should be checked" Name="_LogParGetMoveFinished.index"/>
	    RetCode : iprStates;  //! <Type Comment="READY ... Movement is Finished&#13;&#10;BUSY  ... Movement is Busy&#13;&#10;ERROR ... Wrong Index No" Name="_LogParGetMoveFinished.RetCode"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetRemotePoint : STRUCT  //! <Type Public="true" Name="_LogParGetRemotePoint"/>
	    RemoteDist : DINT;
	    RemoteTime : DINT;
	    ActualVel : DINT;
	    RemoteVel : DINT;
	    ActualAccel : DINT;
	    ProfileAccel : DINT;
	    Tjerk : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetSlowestAxis : STRUCT  //! <Type Public="true" Name="_LogParGetSlowestAxis"/>
	    Dest : _LMCPROF_POS;  //! <Type Comment="End positions [Application Units]" Name="_LogParGetSlowestAxis.Dest"/>
	    usAxis : USINT;  //! <Type Comment="Number of the slowest axis (0 in case of no locked axis, 1-9 otherwise)" Name="_LogParGetSlowestAxis.usAxis"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetStartPositions : STRUCT  //! <Type Public="true" Name="_LogParGetStartPositions"/>
	    StartPos : _LMCPROF_POS;  //! <Type Comment="Start positions [???units]" Name="_LogParGetStartPositions.StartPos"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParGetStartPositionsRestart : STRUCT  //! <Type Public="true" Name="_LogParGetStartPositionsRestart"/>
	    StartPos : _LMCPROF_POS;  //! <Type Comment="Axes positions [Application Units]" Name="_LogParGetStartPositionsRestart.StartPos"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParLockProfile : STRUCT  //! <Type Public="true" Name="_LogParLockProfile"/>
	    Axis1 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfile.Axis1"/>
	    Axis2 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfile.Axis2"/>
	    Axis3 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfile.Axis3"/>
	    Axis4 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfile.Axis4"/>
	    Axis5 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfile.Axis5"/>
	    Axis6 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfile.Axis6"/>
	    Axis7 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfile.Axis7"/>
	    Axis8 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfile.Axis8"/>
	    Axis9 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfile.Axis9"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParLockProfileRestart : STRUCT  //! <Type Public="true" Name="_LogParLockProfileRestart"/>
	    Axis1 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileRestart.Axis1"/>
	    Axis2 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileRestart.Axis2"/>
	    Axis3 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileRestart.Axis3"/>
	    Axis4 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileRestart.Axis4"/>
	    Axis5 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileRestart.Axis5"/>
	    Axis6 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileRestart.Axis6"/>
	    Axis7 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileRestart.Axis7"/>
	    Axis8 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileRestart.Axis8"/>
	    Axis9 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileRestart.Axis9"/>
	    PathOffset : DINT;  //! <Type Comment="Offset along the path [Application Units]" Name="_LogParLockProfileRestart.PathOffset"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParLockProfileStartLineNo : STRUCT  //! <Type Public="true" Name="_LogParLockProfileStartLineNo"/>
	    Axis1 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileStartLineNo.Axis1"/>
	    Axis2 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileStartLineNo.Axis2"/>
	    Axis3 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileStartLineNo.Axis3"/>
	    Axis4 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileStartLineNo.Axis4"/>
	    Axis5 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileStartLineNo.Axis5"/>
	    Axis6 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileStartLineNo.Axis6"/>
	    Axis7 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileStartLineNo.Axis7"/>
	    Axis8 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileStartLineNo.Axis8"/>
	    Axis9 : DINT;  //! <Type Comment="Couples axis &#13;&#10;0    --&gt; not coupled &#13;&#10;1-6  --&gt; coupled to assigned group" Name="_LogParLockProfileStartLineNo.Axis9"/>
	    PathOffset : DINT;  //! <Type Comment="Offset along the path [Application Units]. Must be within the start line." Name="_LogParLockProfileStartLineNo.PathOffset"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParMoveCircle : STRUCT  //! <Type Public="true" Name="_LogParMoveCircle"/>
	    Positions : _LMCPROF_POS;  //! <Type Comment="Pointer to the absolute end position of the axes [Application Units]" Name="_LogParMoveCircle.Positions"/>
	    MiddlePoint : _LMCPROF_CIRCLEPOINT;  //! <Type Comment="Pointer to the absolute position of the middlepoint of the circle [Application Units]" Name="_LogParMoveCircle.MiddlePoint"/>
	    InterPoint : _LMCPROF_CIRCLEPOINT;  //! <Type Comment="Pointer to the absolute values of the inclined position of the circle to define the circle-pline [Application Units]" Name="_LogParMoveCircle.InterPoint"/>
	    CircleDef : _LMCPROFCIRCLEDEF;  //! <Type Comment="Defines which axes should perform a circular movement" Name="_LogParMoveCircle.CircleDef"/>
	    CmdConfig : _LMCPROFCMDCONFIG;  //! <Type Comment="16#01 --&gt; Rapid traverse&#13;&#10;16#02 --&gt; Move in clockwise direction (CW) in case of 2 dimenional movement / dromic direction in case of 3 dimensional movement&#13;&#10;16#04 --&gt; Move in counter clockwise direction (CCW) in case of 2 dimenional movement / antidromic direction in case of 3 dimensional movement&#13;&#10;16#08 --&gt; Feed rate interpolation&#13;&#10;" Name="_LogParMoveCircle.CmdConfig"/>
	    Velocity : DINT;  //! <Type Comment="Path speed (feed rate) for the movement.[Application units / s]" Name="_LogParMoveCircle.Velocity"/>
	    Accel : DINT;  //! <Type Comment="Acceleration for this movement [Application units / s² ]" Name="_LogParMoveCircle.Accel"/>
	    Decel : DINT;  //! <Type Comment="Deceleration for this movement [Application units / s² ]" Name="_LogParMoveCircle.Decel"/>
	    TransMode : _LMCPROFTRANSMODES;  //! <Type Comment="Transitionmodus during rounding" Name="_LogParMoveCircle.TransMode"/>
	    TransRadius : DINT;  //! <Type Comment="Radius of the tolerace-sphere during rounding [Application units].&#13;&#10;&#13;&#10;Parameter is only necessary for modes _LMCPROF_SMOOTH_PARAB + _LMCPROF_SMOOTH_CUBIC. " Name="_LogParMoveCircle.TransRadius"/>
	    Jerk : DINT;  //! <Type Comment="Jerk for this movement [Application units / sec^2 / millisec]" Name="_LogParMoveCircle.Jerk"/>
	    SetCoordSystem : DINT;
	    ActiveTool : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParMoveCurve : STRUCT  //! <Type Public="true" Name="_LogParMoveCurve"/>
	    Positions : _LMCPROF_POS;  //! <Type Comment="absolute end positions of the axes [application units]" Name="_LogParMoveCurve.Positions"/>
	    CmdConfig : _LMCPROFCMDCONFIG;  //! <Type Comment="16#01 --&gt; Rapid traverse&#13;&#10;16#02 --&gt; Move in clockwise direction (CW) in case of 2 dimenional movement / dromic direction in case of 3 dimensional movement&#13;&#10;16#04 --&gt; Move in counter clockwise direction (CCW) in case of 2 dimenional movement / antidromic direction in case of 3 dimensional movement&#13;&#10;16#08 --&gt; Feed rate interpolation&#13;&#10;" Name="_LogParMoveCurve.CmdConfig"/>
	    Velocity : DINT;  //! <Type Comment="Path speed (feed rate) for the movement.[Application units / s]" Name="_LogParMoveCurve.Velocity"/>
	    Accel : DINT;  //! <Type Comment="Acceleration for this movement [Application units / s² ]" Name="_LogParMoveCurve.Accel"/>
	    Decel : DINT;  //! <Type Comment="Deceleration for this movement [Application units / s²]" Name="_LogParMoveCurve.Decel"/>
	    TransMode : _LMCPROFTRANSMODES;  //! <Type Comment="Transitionmodus during rounding" Name="_LogParMoveCurve.TransMode"/>
	    TransRadius : DINT;  //! <Type Comment="Radius of the tolerace-sphere during rounding [Application units].&#13;&#10;&#13;&#10;Parameter is only necessary for modes _LMCPROF_SMOOTH_PARAB, _LMCPROF_SMOOTH_CUBIC, and _LMCPROF_SMOOT_QUINT. " Name="_LogParMoveCurve.TransRadius"/>
	    Obstacle : _LMCPROF_OBSTACLE;
	    Jerk : DINT;  //! <Type Comment="Jerk for this movement [Application units / sec^2 / millisec]" Name="_LogParMoveCurve.Jerk"/>
	    SetCoordSystem : DINT;
	    ActiveTool : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParMoveLinear : STRUCT  //! <Type Public="true" Name="_LogParMoveLinear"/>
	    Positions : _LMCPROF_POS;  //! <Type Comment="Absolute end position of the axes [Application Units]" Name="_LogParMoveLinear.Positions"/>
	    CmdConfig : _LMCPROFCMDCONFIG;  //! <Type Comment="16#01 --&gt; Rapid traverse&#13;&#10;16#02 --&gt; Move in clockwise direction (CW)&#13;&#10;16#04 --&gt; Move in counter clockwise direction (CCW)&#13;&#10;16#08 --&gt; Feed rate interpolation&#13;&#10;" Name="_LogParMoveLinear.CmdConfig"/>
	    Velocity : DINT;  //! <Type Comment="Path speed (feed rate) for the movement.[Application units / s]&#13;&#10;" Name="_LogParMoveLinear.Velocity"/>
	    Accel : DINT;  //! <Type Comment="Acceleration for this movement [Application units / s² ]" Name="_LogParMoveLinear.Accel"/>
	    Decel : DINT;  //! <Type Comment="Deceleration for this movement [Application units / s² ]" Name="_LogParMoveLinear.Decel"/>
	    TransMode : _LMCPROFTRANSMODES;  //! <Type Comment="Transitionmodus during rounding" Name="_LogParMoveLinear.TransMode"/>
	    TransRadius : DINT;  //! <Type Comment="Radius of the tolerace-sphere during rounding [Application units].&#13;&#10;&#13;&#10;Parameter is only necessary for modes _LMCPROF_SMOOTH_PARAB + _LMCPROF_SMOOTH_CUBIC + _LMCPROF_SMOOTH_QUINT." Name="_LogParMoveLinear.TransRadius"/>
	    Jerk : DINT;  //! <Type Comment="Jerk for this movement [Application units / sec^2 / millisec]" Name="_LogParMoveLinear.Jerk"/>
	    SetCoordSystem : DINT;
	    ActiveTool : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParMoveRelative : STRUCT  //! <Type Public="true" Name="_LogParMoveRelative"/>
	    Distances : _LMCPROF_POS;  //! <Type Comment="Relative distance of the axes [Application Units]" Name="_LogParMoveRelative.Distances"/>
	    CmdConfig : _LMCPROFCMDCONFIG;  //! <Type Comment="16#01 --&gt; Rapid traverse&#13;&#10;16#02 --&gt; Move in clockwise direction (CW)&#13;&#10;16#04 --&gt; Move in counter clockwise direction (CCW)&#13;&#10;16#08 --&gt; Feed rate interpolation" Name="_LogParMoveRelative.CmdConfig"/>
	    Velocity : DINT;  //! <Type Comment="Path speed (feed rate) for the movement.[Application units / s]&#13;&#10;" Name="_LogParMoveRelative.Velocity"/>
	    Accel : DINT;  //! <Type Comment="Acceleration for this movement [Application units / s² ]" Name="_LogParMoveRelative.Accel"/>
	    Decel : DINT;  //! <Type Comment="Deceleration for this movement [Application units / s² ]" Name="_LogParMoveRelative.Decel"/>
	    TransMode : _LMCPROFTRANSMODES;  //! <Type Comment="Transitionmodus during rounding" Name="_LogParMoveRelative.TransMode"/>
	    TransRadius : DINT;  //! <Type Comment="Radius of the tolerace-sphere during rounding [Application units].&#13;&#10;&#13;&#10;Parameter is only necessary for modes _LMCPROF_SMOOTH_PARAB + _LMCPROF_SMOOTH_CUBIC + _LMCPROF_SMOOTH_QUINT." Name="_LogParMoveRelative.TransRadius"/>
	    Jerk : DINT;  //! <Type Comment="Jerk for this movement [Application units / sec^2 / millisec]" Name="_LogParMoveRelative.Jerk"/>
	    SetCoordSystem : DINT;
	    ActiveTool : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParProfileInPosition : STRUCT  //! <Type Public="true" Name="_LogParProfileInPosition"/>
	    Mode : _LMCPROFINPOSTYPES;  //! <Type Comment="Mode, defined by the Enum" Name="_LogParProfileInPosition.Mode"/>
	    RetCode : DINT;  //! <Type Comment="0 ... FALSE&#13;&#10;1 ... TRUE " Name="_LogParProfileInPosition.RetCode"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadAxisParameter : STRUCT  //! <Type Public="true" Name="_LogParReadAxisParameter"/>
	    AxisNo : DINT;  //! <Type Comment="Number of the selected axis, beginning with 1." Name="_LogParReadAxisParameter.AxisNo"/>
	    ParNo : _LMCPROFPARAMETERAXIS;  //! <Type Comment="Number of the selected Parameter" Name="_LogParReadAxisParameter.ParNo"/>
	    RetValue : DINT;  //! <Type Comment="Value of the selected Parameter" Name="_LogParReadAxisParameter.RetValue"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadAxisState : STRUCT  //! <Type Public="true" Name="_LogParReadAxisState"/>
	    AxisNo : DINT;  //! <Type Comment="Number of the selected axis, beginning with 1." Name="_LogParReadAxisState.AxisNo"/>
	    AxisState : _LMCAXIS_STATUS;  //! <Type Comment="Status flags of the axis" Name="_LogParReadAxisState.AxisState"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadCmdIndex : STRUCT  //! <Type Public="true" Name="_LogParReadCmdIndex"/>
	    Mode : _LMCPROF_CMDINDEX;  //! <Type Comment="_LMCPROF_LASTLOADED : Returns the index of the last movement from the user which was successfuly loaded&#13;&#10;_LMCPROF_ACTCMD : Returns the index of the current move command&#13;&#10;_LMCPROF_VORANZ : Returns the number of entries in the buffer remaining&#13;&#10;_LMCPROF_SUMINDEX : Returns the number of entries in the UserBuffer remaining" Name="_LogParReadCmdIndex.Mode"/>
	    Index : UDINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadCommonCalcParas : STRUCT  //! <Type Public="true" Name="_LogParReadCommonCalcParas"/>
	    CalcParas : _LMCCommonCalcParas;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _logParReadGroupParameter : STRUCT  //! <Type Public="true" Name="_logParReadGroupParameter"/>
	    GrpNo : DINT;  //! <Type Comment="Number of the selected group, beginning with 1." Name="_logParReadGroupParameter.GrpNo"/>
	    ParNo : _LMCPROFPARAMETERGROUPS;  //! <Type Comment="Number of the selected Parameter" Name="_logParReadGroupParameter.ParNo"/>
	    RetValue : DINT;  //! <Type Comment="Value of the selected parameter" Name="_logParReadGroupParameter.RetValue"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadPosition : STRUCT  //! <Type Public="true" Name="_LogParReadPosition"/>
	    AxisNo : DINT;  //! <Type Comment="Axis number 1 - 6&#13;&#10;" Name="_LogParReadPosition.AxisNo"/>
	    Mode : DINT;  //! <Type Comment="0 ... Application Units&#13;&#10;1 ... Internal Units" Name="_LogParReadPosition.Mode"/>
	    Position : DINT;  //! <Type Comment="Position of the selected axis in the specified units. With an invalid axis entry, 16#FFFFFFFF is returned." Name="_LogParReadPosition.Position"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadPosOffset : STRUCT  //! <Type Public="true" Name="_LogParReadPosOffset"/>
	    PosOffset : _LMCPROF_POS;  //! <Type Comment="Zero point offsets (Geometric reference points) [Application units]" Name="_LogParReadPosOffset.PosOffset"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadProfileActValues : STRUCT  //! <Type Public="true" Name="_LogParReadProfileActValues"/>
	    Mode : _LMCPROF_ACTUALVALUES;
	    ActualValue : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadProfileError : STRUCT  //! <Type Public="true" Name="_LogParReadProfileError"/>
	    ErrorInfo : _LMCPROFERRORDEF;  //! <Type Comment="Error Structure" Name="_LogParReadProfileError.ErrorInfo"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadProfileParameter : STRUCT  //! <Type Public="true" Name="_LogParReadProfileParameter"/>
	    ParNo : _LMCPROFPARAMETER;  //! <Type Comment="Defines the wanted parameter" Name="_LogParReadProfileParameter.ParNo"/>
	    RetValue : DINT;  //! <Type Comment="Value of the Parameter" Name="_LogParReadProfileParameter.RetValue"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParReadRestartInfo : STRUCT  //! <Type Public="true" Name="_LogParReadRestartInfo"/>
	    sRestart : LREAL;  //! <Type Comment="Accumulated path length [Internal Units].&#13;&#10;This is the path length from the beginning of the NC-program to the point where it was aborted." Name="_LogParReadRestartInfo.sRestart"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _logParReadRestartPos : STRUCT  //! <Type Public="true" Name="_logParReadRestartPos"/>
	    Positions : _LMCPROF_POS;  //! <Type Comment="Absolute positions of all axes at the restart point [Application Units]" Name="_logParReadRestartPos.Positions"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetAxisParameter : STRUCT  //! <Type Public="true" Name="_LogParSetAxisParameter"/>
	    AxisNo : DINT;  //! <Type Comment="Number of the selected axis, beginning with 1." Name="_LogParSetAxisParameter.AxisNo"/>
	    ParNo : _LMCPROFPARAMETERAXIS;  //! <Type Comment="Number of the selected Parameter" Name="_LogParSetAxisParameter.ParNo"/>
	    Value : DINT;  //! <Type Comment="Value of the selected Parameter" Name="_LogParSetAxisParameter.Value"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetBasicParameter : STRUCT  //! <Type Public="true" Name="_LogParSetBasicParameter"/>
	    VMax : DINT;  //! <Type Comment="Maximum path speed [Application units / s]" Name="_LogParSetBasicParameter.VMax"/>
	    AMax : DINT;  //! <Type Comment="Maximum path acceleration/deceleration [Application units / s²]" Name="_LogParSetBasicParameter.AMax"/>
	    Tjerk : DINT;  //! <Type Comment="Time for the path acceleration/deceleration to attain its maximum value [ms]." Name="_LogParSetBasicParameter.Tjerk"/>
	    TangError : DINT;  //! <Type Comment="Maximum tangential error = 1/10000°" Name="_LogParSetBasicParameter.TangError"/>
	    PosOffset : _LMCPROF_POS;  //! <Type Comment="Shifting of the null point for the axis (Geometric reference points) [Application units]" Name="_LogParSetBasicParameter.PosOffset"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetDynSWEndPos : STRUCT  //! <Type Public="true" Name="_LogParSetDynSWEndPos"/>
	    AxNo : DINT;  //! <Type Comment="Axis number 1 - 9" Name="_LogParSetDynSWEndPos.AxNo"/>
	    pSWEndPos : ^DINT;  //! <Type Comment="Pointer to the dynamic SW end position.&#13;&#10;To delete a dynamic SW end position set this pointer to NIL." Name="_LogParSetDynSWEndPos.pSWEndPos"/>
	    Mode : _LMC_DYN_SWLIMITS;  //! <Type Comment="Choose maximum or minimum dynamic position" Name="_LogParSetDynSWEndPos.Mode"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetGroupParameter : STRUCT  //! <Type Public="true" Name="_LogParSetGroupParameter"/>
	    GrpNo : DINT;  //! <Type Comment="Number of the selected group, beginning with 1." Name="_LogParSetGroupParameter.GrpNo"/>
	    ParNo : _LMCPROFPARAMETERGROUPS;  //! <Type Comment="Number of the selected parameter" Name="_LogParSetGroupParameter.ParNo"/>
	    Value : DINT;  //! <Type Comment="Value of the selected parameter" Name="_LogParSetGroupParameter.Value"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetPosOffset : STRUCT  //! <Type Public="true" Name="_LogParSetPosOffset"/>
	    PosOffset : _LMCPROF_POS;  //! <Type Comment="Zero point offsets (Geometric reference points) [Application units]" Name="_LogParSetPosOffset.PosOffset"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetProfileParameter : STRUCT  //! <Type Public="true" Name="_LogParSetProfileParameter"/>
	    ParNo : _LMCPROFPARAMETER;  //! <Type Comment="Number of the selected Parameter" Name="_LogParSetProfileParameter.ParNo"/>
	    Value : DINT;  //! <Type Comment="new value of the parameter" Name="_LogParSetProfileParameter.Value"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetProfilePositions : STRUCT  //! <Type Public="true" Name="_LogParSetProfilePositions"/>
	    Mode : _LMCPROF_SETPOS_MODE;  //! <Type Comment="Mode defines how we get the set positions." Name="_LogParSetProfilePositions.Mode"/>
	    pApproxPos : ^_LMCPROF_POS;  //! <Type Comment="(approximated) positions, where the profile positions may be set [application units]" Name="_LogParSetProfilePositions.pApproxPos"/>
	    pCallbackData : pVoid;  //! <Type Comment="pointer to some application data, which may be needed when executing the callback for getting the right set positions" Name="_LogParSetProfilePositions.pCallbackData"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetRestartPointFileOffset : STRUCT  //! <Type Public="true" Name="_LogParSetRestartPointFileOffset"/>
	    PathOffset : DINT;  //! <Type Comment="Offset along the path [Application Units]. Must be within the start line." Name="_LogParSetRestartPointFileOffset.PathOffset"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParSetTimeBase : STRUCT  //! <Type Public="true" Name="_LogParSetTimeBase"/>
	    udTimeBase : UDINT;  //! <Type Comment="Time base in µs" Name="_LogParSetTimeBase.udTimeBase"/>
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _LogParStopMove : STRUCT  //! <Type Public="true" Name="_LogParStopMove"/>
	    Mode : DINT;  //! <Type Comment="1 --&gt; Stop the current movement&#13;&#10;0 --&gt; Continue a stopped movement" Name="_LogParStopMove.Mode"/>
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
  //Clients:
	cStdLib 	: CltChCmd__StdLib;
  //Variables:
		AccessNo 	: DINT;			//! <Variable Comment="Index of next free entry in the ring buffer" Name="AccessNo"/>
		LogMode : BINT
		[
		  1 LogMethodCall,  //! <Variable Comment="Log move commands and write commands only" Name="LogMode.LogMethodCall"/>
		  2 LogReadMethods,  //! <Variable Comment="Additionally log request method calls" Name="LogMode.LogReadMethods"/>
		  3 LogMethodCallPlusParam,  //! <Variable Comment="Additionally log the method parameters" Name="LogMode.LogMethodCallPlusParam"/>
		];
			//! <Variable Comment="Specifies logger behaviour" Name="LogMode"/>
		pLogFile 	: ^_LogFile;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Logger
		VAR_INPUT
			CmdCode 	: _LMCLogCmdList;
			pMethodPar 	: ^void;
			RetCode 	: _LMCPROFERRORTYPES;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL GetLogPtr
		VAR_INPUT
			pLogIndex 	: ^DINT;
		END_VAR
		VAR_OUTPUT
			pLogEntry 	: ^_LogStruct;
		END_VAR;
	
	FUNCTION GLOBAL SetLogParameter
		VAR_INPUT
			Value 	: DINT;			//! <Variable Comment="0: logging off&#13;&#10;1: log move commands and write commands&#13;&#10;2: log move commands and write commands plus request commands&#13;&#10;3: log move commands and write commands plus the method parameters (default)&#13;&#10;4: log move commands and write commands plus request commands plus the method parameters" Name="SetLogParameter.Value"/>
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL InitLogBuffer
		VAR_OUTPUT
			pLogFileOut 	: ^_LMCProfileLog::_LogFile;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd _StdLib


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB _LMCProfileLog::@CT_
0$UINT,
2#0100000000000000$UINT, //TY__LMCPROFILELOG
1$UINT, 2$UINT, (SIZEOF(::_LMCProfileLog))$UINT, 
1$UINT, 1$UINT, 0$UINT, 
TO_UDINT(2883857672), "_LMCProfileLog", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::_LMCProfileLog.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
//Clients:
(::_LMCProfileLog.cStdLib.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(2073677046), "cStdLib", TO_UDINT(3689364044), "_StdLib", 0$UINT, 0$UINT, 
END_FUNCTION


#define USER_CNT__LMCProfileLog 3

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT__LMCProfileLog] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION _LMCProfileLog::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT__LMCProfileLog, pCmd := #vmt.CmdTable);
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Logger();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #GetLogPtr();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[2]		:= #InitLogBuffer();

#pragma warning (default : 74)
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
//{{LSL_ENCRYPTION 16#800
DEED445EF342212FF2412A957A14F9953B8BA7D962B931C2529906ABF63CECF857C5100D946DD5C9FD817D9AC0F9BC4C000C1B858FA472270AFCF29A2ADE07B9ED3E617C1162095C2C4CE4BBCD587EF9CC69E68DD0743E4E8D8FAA7E0265ED6065C74440
AB15D12209D12B6DF0BD54FB0B4E88D77444CDC416916E63C5855F3BE5637D937ED3E9AB3D93CD2A08217791448B1A72167B3095BF352554F2687F85252EDD3903529C3EF7B267DD1FD1E3033AC4AB946A5CAE393899166B64C8D9C2699901971722DE1A
D1C167B33136172E8894A03AA529D27C8C950FD960E540052DAE4FEC6A330CEFE8B1EAD05AB5B3DD0AFA92B312A426875227363034F05AD38F83DCCCD7336109F6210F87D5B34EDAE90CF704DEDC50F8F64124BB57A6DC443BEB3BA04A8563E6842E1F2E
A0800D2903188A4E78A24C9E9D93F516A79451AE802A179795D2A4D118510B3586BECCE84CAC4E344041FDAB5D9BB57F7663E8625467B97A10A6A97292B38C53E37DAEC904A19AD55F645C57A016954149179626506623CAC0BE430121F6C6E968B86384
DB202AA1F2CB1486AF51933A924139F4F7037834A1ECD4B35EA4BA0323248138860785C8DE501AFAB9BDB11633236CA6B5B92EC20ED69A8DF9E7586343AC0D668CEB0743639D950478F9605FC98643C7F418515A4DA8B83A88402774A65E75DCEED3A5B1
B683BCDE4CE2E760471A07847CBDB45413AEE0BA10B5BBD66EFDA7685DFE6BEC9E062550618461363E79CCD693E89F74F69222A9CB63436ED320AA944C5DC575DAAA20FB1C0860A7C5C2131FDDC7131FC4CDFE66F242D7B39DED9306FEBD5B94CF061744
8E932595FF7ECF1013B0DE5C4F577A61EF571719DE424788E7049535C9668BC313045CE8BA3379969F750277269CEAB0BA4333D363928A0216C084447B014DFDBDC7EEE77FB4FA6B93F417930FACFF72DE38E818F16C141CC8E5002592FE5D5EE4823F40
28B084F07BD66655F19320E6A558C48BE5172FC75C0FED7E9E75E11B035855A1955151D551365287AC1B61EBF065311E62FF972DEFAD886789EF269E44A78E1809D389CB61B93B1406227A620AF8F4E161E198467020BF194EA0AD5C0FC8D82D0982317F
22BA985BEA59A354FFCD9C90FE6883C3A236A5F162D072C692CF4D4BC4E76F9627DEA0E5B1C7D3FB8A005AFBEA4F30E30CEC343D4C9691209AA2D1F929B5CC1C8AADF86EDFA24CFF2A26799CD69E9268A8C3129FA32341FC828F45F8127D775094160517
6A5F817FEB437D8A594E4912E334996F8BBEB77E0C5BB4B0D9A2135B492EAC8F60DDC843A227CCF19701F523A836389A6BFA870BE55488706B6DCB88006D52F6A225F1A6A34F29259F9A2018431813AB2BDDCDBF2F425D65D03266E9051F8BBB55269BD3
0FB80E3D71044FA41777500791CB6E3483A95B40DE16129A40053F1109D02D1B259D0B9B03F32F20B6572EFE3A498D7027F9F7AE527176755EF9447FD8076DAC8EEE2B22BFA1A92EE484D011524690401EC20D8ECA15227399B11AE34C8D745D3B1E8B33
72379F636012384536F266617570B7FF42B15833B3DD87DEA2AD9CD8D4BA5BA0841F91C612034FA10C3B6FB729A7BF85C0544D140FACBEF8435B3F0D9469ACC65CC402FEF6CA7AF05003C23FC067666404BE7465409B44A46C6FF2BBDC67D19DA4E65CB1
666650E25B1B7DC0F68D88F513F026D0C09EA65C2D588BF1EAD319CDD214A4CDBF4B269D41E5A4D19ABEE8A7B478BC0D324CE1E3A23AB13825C128BB32D2C6EA0E29D66E91953F02D0D203B7EC5C618B41B0D29C1A5DF829E8486FC76FA49C11D5B887CF
599450D08B145D3B1F990BF208F62EBBC40BCE456F49DCF6EDB964890DF97404BBF9CAECE90EB992454332507F456E546DE3D0EA92EDEC3F46823FB0E1DAB68C2123AEAD5A17E67B2BA263BF8477FD47F3F0D307AA6244CDE3EFD2F813572D1A21909E82
8D71DA6F8BA74BB72B99476236FA08AD88A04159FC4266875D9F7A74539CC6C110F50986759CFE9343602567E808D83963AE8B200A07E5C5B3923F49B98392541881B3BD1AE7C4353EEB738F2A12EE7C1AA21027272834157B62B508770082F125329A8E
8D27F824A07791AED6EFC6EE01117F99AEF27C1575D1F3E6FD82D23BF171524EA7767634681B10C0B0D5EB8834D594333852B1A6498616200D6448337D94C9830258648738A7F247F6E3ADF6D519FD239225AC0B50F248E94DB2D0E0C572069C00A33A26
1928104AB6EF681CCDF866CC154EE1DCA6D24BE7D57701441D13C1FB157549C03C0BF1C30FE300194FB0893100F0136ABDEB5BF3D99C2DBE38F8E4539FF7E7015EC50C3DD4852F7D39867D5A818090BD4D6095850B64866771AD03575C2172551C24362A
E666304E7C5A02FCB81F0E538539B486186335BDB50B977F90F5EB3FA1B15873D15204C7CCC475211B3C866CE2ACB075227EEB2FC96143FAA82AF20FCC8E8388B57252BA705FBFA313384B0500E7EA4DC4AF64E200B89DE5FEDF332F3DBD921FE08349C3
0F5FFCBC442CBF489E24944D55708085CF27AF54653F18D81C3B5443634E8D00F2A6387E2A423C6453915BC33B8B8FD60F7B8C20177BA0D8FEC44D0377BBECB87C2983C9952C79C463354BFBC9D5C5524F81CFC6CC9DBB5897BEE148ACFF643F196766D7
6FDAA9A00A6A6D6C275551C77F5B3BE31DFB6A9A2FFA0FADA07FF835FEF3C6BBD23ED42112BBFACF985B3585A84CFE267DABCB9C50F4835A61BD9BB8BEFB88387DAD5083F4DEA033F566804BD2BD49D38F0AD266FCF6448577E5048780FFD2C8E034CDB1
AA913168EA4C21EC046D15A065B672F0754C4463B40641A051B1F5B86EB2A489D439415F15E8B32A329C6568A22D2D6EA74F7F55AC23827D16DF56097E4814FACED90732004A988F637EA725A0815A5E4072AEE9E6CDD67921417CB3DC81B1770D828EA6
0BED761051F4ADC10DF5D60BE63F318DFBB8302D664852045166B12FFDE18E0F8B49919964DEB24DA974630128EBD7409289C3308ED4E924278191124CA387D80A81A7411DFB5D1624C1DFCBE39841F753FF0187CDFBA6A3FAA14A8C33F8FB745909429A
6620DFF0B99E1720B04142DEA57AA65A84B6D92D1B771931F8CD203142126914217488F6D396BD2A43790EBB73F81B0811BC7757B9B0892890F4F009793C9D25E5CA81F014746653ABD9993CC8A68F740ACBF67B783F9755CA87883DB7507920B879B7D1
F357FE536220C481CAF031B4B529BB59ECEDCEFFDC4265590B8FAE2B4FD9D21D7256EB54A64490073A517DE11F23BEC12A189AB27B4981CCC39FB3AFC20915A361DF8DB333BEC5EDBBD394240640B47DF173548E05E9C5E5F16A432CF1238FCABFB73342
6D2F114EA8137C17B06C36CF4DF3EE2ECF472479A88132F8C1629F153C2DB0A17F4E8FD2DBFF002E9EAC047B05CA3AE1F4BAA964C6A900F73BE7491A379C7ACA09F2F6D2069410985D5422CA047C1A5825EFC464F6C7817DA91C6BA893697ACBB5418030
4A822F2D965076EAF1E0A8F0681BFA952F37E62129774A3B049429E3D93F063DC0B46D9726A95C7DFE49CA3A9F317BFF8BFCAF0D02FCCED5DB1248CB02265FC3854E67CA571EDFBA6EF70D8B90C4ABB45C2C06774B5991152FBDBF404EEFDAB6C6301F40
C54F19A19B42B69EAE45DE67654B1B41C3C69D8BB723C39CF967FD276F399FE270F7D86C80423EE97966908AA5629617C9AA9DAF7D222510D76E931E630F7FB4BAFF60EB32A12C733A77C945E34BCF99E328653D8BE130BD169263570AFC6056B7DC49F7
AE923FDEE9701D0F461617851DA440B604071509C783B8874F87D18C7B7F6FDA5FEBE4A80A433F4B54EADC76AC6873B44FE9E146888F868ADF40526F5BFE7206EC89456DD318E051DF2563C4BEA43CAA6AF713D246916BA4FC8343876636CFFD6A067F2F
279EFE88BE761B6C7CD26EA78114C058DE033CC7133799B2B8BBE6CBE1584FD5F67897517C6496EF4BDE439F996A67BC1358E13DDD7B83687B0A56758FABDA363FED3F75DF78F3C24047500325D8892F6DC7879779BCDC54A9749249163EC86F1A50A50C
ED27529DD5389B805D4D144532F9FBD2E08BDA45791763D403CB7BC940AF6687D90A3E467671670E60F2FEDDAC9010B100B8CF3BBF6DDAA439C3ACA3B5D59E7F8B3F532C9960DC11B6DDDBE2650111F43F6856940D289721836A308B0B3DD9BA851D3208
B7F40A0374B9BB0DEA92C938F2D48ACF2C85F95AA03986CF4CA8ACDA8EB312EB4AC45F7CDBC3CDB6432BDB997664DBEAC15C0EC975B9BB7C074535C7701EF663827C777B0298C9146D683E7F5450D193FC625C398804EAFE521DB9FCD1E737409ACADEF1
A915491D5419A0ED43F50E8BBC29DFDE8F363C59D8E81BBAA0D626B3EC6625244AE03168C78EA656F361B5E6FDAA25DCD0D4EB44B60608F4901BFE7E660C6A24096C111525C74F98CC0BC2F388DFA272A5886F67B6026E3924BDC59C652FE41687B2FDFC
1955DE178693193EE24671982C4FEEC31B7DC00ED54CBDD3442244932F1CD2D623D4CBF2A41C2BA67CD096FCD964F452C70C6B7DE2D07D3D113219648DFD58AA431927D4E0642B3D90ACE98CEB991B4348069FA3A5A735EE7F5C7D762DCCE2A2089E06B8
E4DC5EF03D783DA621AC6FFD0C1377D326344325DA71EF6FCD6CA5AA48F7B4F998C55429E75ACB91FF75B60EC795FCC8CEE417E9F9771ED57BC50248216A04F732AF19CC237DC39EC0122EDF65BD4DAF1A4CB60CDCA93A80FF9840563016E4C9F91306BA
F4C563FE053EC640D9455CB0C3BF046968CE31991E81B49929B8E0DCAECBFEB23A32208B35B82FEB643A25A3F6030B9CF58E62F98DF3776D576842203A6757E03CEF3730F87E72E3A29896F8F4BAF6122A25D130C2DAD68EAB4B75FEE4C19300205B63C9
F411C06BA27F460AD53DBC425F6DF85CF35D7B5D72B3E0BEE6D8EEB504778FD2A666F2197F5FB7FDE4DF02DC188B8232F6BA1313C040A143E1B579ACB65811FF1AC839A2ABABC16C01DD8009AB4141F641EFBFA22A159FEDBA7C8A04CAA0A79ACBA394CC
57BC25855EB629D7B88D414B7546EA389FDF38FB641B03C63F24BB7251ABE7726154DDEFC476D1E9B6FE37386B72060DF4AD0F41A067D5E862C7604F0611A7AE02D7FFAD0D08112DA9189C705591E8F47175B32F37A2BDE294C6206EB96620D2E631141F
8AC013BC1087C338E25618A2BF7C9CC0E2F8685E870CB2413F3F3FEC945E8B5EEB81AAEEEB55BCB000896ECF78CBBB0718CFBC48DC5EAD0861D6D6FCCD0A82520D5EE1825F913DEA53A0A119DCED2EEBA147FB8661F940D6A290D7CC7E23EFB0E7B1C48C
154FD30051B7C79B8807E2008EB9C2C1BB26E34888DB870138407EE1300D7337214C42B3D69E6B3D15BAEE321CBC7F649A21DA0BDF9477557077AC90638D87A63C80406DDCCC63213BB296B725F82E7E504EA4BBFB63600765AC6DCB7FCE4E00034869B3
204E3DE354397D622BAF466B1254F69592AE1A572467761B7D6500771869022781033B2BACBB284CBDD8E5864550AC7B7421989D82709C903E9EB3A76ED1DD760005570FF6AB68870E142B6B8032204C9B72D7EEDCEC799572985F8DCB2EB6ECE66C4AE8
18840837B3701273D3626B0A13BC4474D481CDB5060DDFFCC912F771EAB6CF62ABAE1AF3E368ED9BFB93552D332A653C3465FB9670E24D1D5BCD143C06E03FF1331E6EC0B562B6B9A730858CE0EC2DC520E5A2072F60653B8ECE527A5EAABB3B66C773EF
EA664683543B5DF97229BDBFEBE0C9DCA417038CE5F0E3587BA549C0ED45FC76EE62B2105B65311CBBFBF643857044277E38B33D9105D18E844895C7A8E4AE3C7A1C1D71769019AD7538B20415C644C887CF998442CDDBB67AA18F9DD59CC618B29A36CB
ECDDCD921C4180EAD29E21048BBF343A54D91052C066E8EA1F08A1FC0B468950F510A8329CCB84D7ABF6D98D1AF31223B192E04061CF4C87A035FE445B3EC2E101365E6E0314D77B7EBC9A6AB502276F80C68088B4725EED327C16EB86F54146BD554841
D960003062548F433AC217B927D9D035421B295D46371E10C42BF0BAF76D54BF6EE18E43141DE9B9E7821BCAC7F1A7921FDBEE6F8A1E6690888E59A34ED9A6757AEDF1F1880F90AE87260ABFC3ACD0BA961DAF302E936EBB43341091967A751BACE0BA05
72DAB7739F08ADB28D2D9174E4CFBBFA1B1AC734AA3E515D7877A76C6ECC8E366D88CF5345012F556859596394001586C89A1F37371C9A878ADFA6661F4C9AF38670DF411465D90DF59719265FCA34106A2EE1CA420F4B79F864245548BE847AEFC8C7EB
78F344841B45DEFC404A4D3B9F170D8EBC5340605683B1AFF4BE69D20E6446979047D7773F48EFF1D4CED81FF45E2F03E9C88768A55637D8A34C5565CF7C5BD35AB002153D5DBDAEC26D4673EC6746D3FFEFA5B871F887FCA8B961CB702567F8FA840FA2
3BAD2B12C5F24868CECA869AA1C6563B493283637EDBC11EB969FA227628207F9E58DE6007DFB84FC177E19E0021F43FF40C91DEB27882C262441F2DB4F76C63100B18A3FE90EDA7061449D3A6ADF3C745D4A71253F59137224800C09EAA075701199DCE
5C3AEDB58C96705C40C6635D80F983DBF6A1B325B6528A53D870808F1C5DADDC84016F22949D0773DC771026B125D3DCBB81F7AF65DF9A86E3F0128859B5BCD427B00FD98D9C8F2C6C6AFC47D37B66BF8A247A00DA898C820F1D714257F0CA223141B993
F6119F1CEF2B193244427E51F5850BDF870108BC3FB9A1C8A0026F3A8C57DCDC695F9A0028B9C0119E2AF4EB47B1EBAE43CD910ACC58988B69AD9578E0C52169C8C3F9EAA05218DDCAB63F9AF6A4B6C5DF5A25CDE453F1C81B4639D219225F33A4AAE5E4
64AB7482EA6F6352CD8E27B2B8142FFEA94D3FA025E34FD66BF729EE8D8DA56498BD36533EA38CAAC52B33BEFDC8240EC5CA1F4CFFE2E796C69DC52F1E1C81B3FC7AD9CE60A72785A5F46BF0F12F25A3F3A965F85C2D11B51BCC070AA23B81811294F55A
0536BD9D42CCA07EE27F8AACB43260F7EF70B35DFA8072479089ACB0A188462D03B155C7416361FC3F895C97E5690B7B4C0CF9F89773DD0E812E4C7B4E612C77BA9A07A40C609807ADBA302E498CE683B042A2F219FD4C2A25E3D083CA9FBF7A49715F1C
46FF2421242057F6A4D78F4DC739C399DED5D76DD85F8ECF575E70D494CFEB32E098C31D91646F8AE055D303FD47064664B10790837AACDB27562B544D9E5CC065932D876519B71E53463A3E88FA46AA761F20A96FAA051895BFE035D8AC22BFA9A8C7D0
37FF54FD2871064999A83B734951282292E69D3AE62364C9C498EB1D0E638F033D73C3E4687DE5733521026D0537EAE77F0D77A3FEC270A517052022800A884148DD3EAF5EE366BF1C1A049401848973E0BB0F77886A298E01D1FFAF671441739DC3D838
F48445D7C20C8C294ECF9D340BBDBA380C3AA89F345EEB75961BBFBB05ADC9CEF05943A264F87C32EDEC625B51DFF090E3E9FD48FC2B37E04DAE1D22772A224D5E2ADDDE09017CD9FA6C77F4856DAC3EA04AA22D448B32573EBDF5357732B35285101C40
BB8C824C40103150A5D562EE10347813B20A69725D84FD60790DE2BA3A8012A230066CDB5E20D51D6E9F10120D5A5C929A5C08D70575AF6972692308910BBDE809EE922227F5B3EAC1548DAE7020423D4B62030EB1CA06ADF9E308F262E206961EB1056A
FC965F854CF89DAC461107686707B51E39E01C0546677ACB287C5B33D356AC6EE773F7408BF00D92EC77A31DA3C20444C4FA9674BC9AB1F7BD1E5DF47F6D8ADE0FAAA0D35EA59D63513D01234309FEB476078EFF453BC0D959EBADE1B90AE536E51345F2
C702DB0C96E311AB1DCF0B7BFE69E15B322BC750918F0C0F4DA327EF839AE61C5681F190DC3F7ADC308A339202ECC3D4D2977811D164B98E0BBF69AD9295B67C1200A2E6E47FF593724BE3296BE355BE0E8637169E3A85871DEF29181DB7EA4B0B28D90D
E881AFD2DA8929530645FC6A58F9ED61D04357BF09839A190748EFB396E6F5214E1AD829E055898A9ED4A34761BFD84948E49F8CF4BC1E1DC8FADC6B2EEADE73ECBD43E63153280A8B2870CF1037C120FC2C84583A6A2FA73306CB4442E958406F46F28B
C9A6CFD2E26C4EA9E52EA04E484BF52DC30FB9367161B937F52D1CBD122710F62F03EF337F09B12D48D82A723284AAFBDE8AF09640849EC4B93D363E52B7AD23909F37A4DCD9F0203698887F77A32F7D52C648A1EF36891F1A5AE0CD029AC46A8D837907
04D335FADEC227F99F32EFD9C946C7EBDBB7646A3524928B45418770AF0359D5B181A88462B2C852699113B0277F936267194A73941036BE91245A0B55CAB19A085CC5DD58F5E4E19CDD4C42D06B4AC7EFCFD1C87354A14C8AE8865CBFE7EB066C24342D
DE943A15BBFDAB799A0770F520635EC28C0128DDEE32C444D73D693C99990D935B76A1624F2251493791E1B7AAE40D4500DC6CEFE09133B68B42298E7A2A75170CB6A1779F285D0C061F636330A09B7BE79802CEECBA8D2BD189E208CFB2E157B9D194E5
8EDA20D5D8EB6E8ADE15F87DCCDE9585BB0BF712609BDD383D001D7DB9BF9599CC3D70E3C3645BEB47B53129C6D27C9A842EB46B9577AD0F6F0D708D31A938A7792D0C094056404F7DC67B66F552551FE86E0FFE86D472FCE40BE273B4F1D26F2F3F4B5D
4298B3029C2454CCF12BC0A6F7A433EA3399568D9D7C581A5B7F125E052CD69EB86DCCDDA625C3A62737A63146A6A1F995A28839423F21AA66D6696B18DA78B93EBE4520E9773DD263CDD0A0881C83D0BBF8FDC16AEBCFDB59F1BE0A13A39FCE4EA3471F
A91CAC2B9FEA70AD58156EA69977B18D8646E35A8B7B2465F7EE6AAA057279249D11971F6F65060A9A1D12233B376D03D3AF6BB3E46159510B613774D98BE3DEEF50ECE3D31BF0F06826666114D20B2EC256D45143F52AF0E33D22C73E7D1F905C401B07
021F9030CDC49B53F98413F4E927E179101B4593072FB6C5DB960D0536D254429F84539A006C972B841CFBFFC312383FFD3ACD28C71E26CFF7CB235A307A4A2B32C4A02A9DA15F4C5788CDBCFCDC1D154F9B7252901B28DDF91268D13D9CA98FD740C1E9
E9E1A225DD6D2D673FE19DD76A668D497F5DA21A75936C13F23EEBE823202538E5DD3F9F01B56EC1EACA735D7C087D4FD4881FE49F9DF22A5F4CEA1AB95E73A1BECE1934D1AEE75AB114472C3404E012D7DB8C82044BEB246C6E9D16D290E06E4FE78D8E
4C88373F15E49E42A1A1C784B9ED12A6E7E04E4EE50CB829BFF9CB670592F27A969BFF9C83F6673EEC823559A193513D6612162EE69E8D2F5E01457973E3A1825C5574E7302E3F888629C40E361EF96EA67655D11755AD922D00494C12E1962065F780E3
E9AC1E632582D2551AA49A2F3CB1C0C9D5CBB49C24AB2CDDF4D190C64AF60336A67111F93E8366E0006C0EB66BAAE01BD2A7B0E0C0CE614A0A58B41A9E103EF7BED313372E80501906D3D38308D25A0983BB061EE91C0F1D8722480D249D5B5AC2469443
551AC3F20480CE6BAFED872FD79697566A600D75E9A1CB42900BD9FEFE128224D6E0FB49DD139D7C62711493FB7817A27BD8EC42CCC9875E0D675468EDD0B6E8EF26EF23B12D0ADE4304FA77B6046025FCA77489DFE8489EAF067E51AEE9D73F39CC937C
7EAEB29ACA25B099E6A2A636EBC965B31539A75B545583DC1179DEE1BF86257E5D5709C3F0C2B7A0FC223EAF349E4A9AB94F9056992A620876D019DB805E26A630306DB5E1B3EBFAD8117597CD56D7C1732DE736B9F3FEF42A83F7F604E92706D20E7810
AABDDDEC0B79C5EB467B8A5210EAB6FACA18E06FC2BE07708226E5960F044FF7D3802773A891D46C93258E2A4C69C1F949DC631411AE0AB4F2C45936D7A398DED1074B111DDF571BAA6100EE626014B82EDB6A60EAE74C1BDBFC89B9B64C51454D5B67FF
9CF58D841C1290EF1089DCEE72DD60A2B68D6C99599439591AB3978B5CB0C588AF8181B61E25D56AAE6675B9EFD2664AFD1016E854DB43ECC4F0FBC4B3CD14D8A2D325F85CCFF82E17853AE2F645621713B5261D3D978D3580582E6118F3F9C6B8C943C3
198A699BD7DFE4ED679CE91E14496D18577673B4BB8F3C60D79C974EE03B62FA63FD18FC474BD19DC2C5CDBFB75256B8F9FE2AA8EE7926A9D227FCA71DE3F8FBCD1C755A7EFA591019BC381FFECA21409F2B7B44F3F361FBBFBCB93FC29492D939F08E92
D7CB025DABCB35A0044632F96E526557654DFBEA78B967EE416A942C844B3165E75686B1EDA4CF08B5A32756E9E1A486F073BF25F71ABF98035D0AC8905C8AF8F26009DA1D9A2C2F093E0B02234467513C841A6BB87FC42D4B88E22C5ED754D17AEF1604
1CA3DA1E2B1653CDB53B0B17F82941CDD7E2760E3DE546EB4ED5B2959564970B306CE81D8D739355405F5A1731ED89E7B33904A971CCB73D4B10BD4BA1C69239C3D09A41D7ECB7619333D9251BFB2B39AD217A9D3D6956126DF8F8E2E5A6D8AE4D70B2CA
77FDA41CC2B7FBF43E28300177C7386DADA25B050ABA6E13EFFC7048EFF26D6FE87A340941F4A79ED56878008C8E49A1389E4BE3D525DDC7A8653028628D4CB2DEBB4AC24FBE69DA15E7ABAA90B2D57FA9C5A85FE64A023FD3F8B1E1B1C8041E8A59E7D1
BA31CB00F9A3CE69BBCBD1125197F435F3981164364289E85A34719AA594217E4A0170CED11C70E1E70F91BE09F27CC4AC41AD91003FEF601BEB2DD60C37C6680124ADC24A34BC9009EE65BB5760A53AFB8DFC6F1CDC396EA889AFB3B792AE1B933E9ADA
6183BE72D5DC34947B4F04CBDAC7DC0B551C8778646135C1EFCF531A8D8C65A0AB5FA6652D2A64F5C34F73E5F65106D3BA7F4A4FE6E403F47E8038F7EB338D4486E535E13ACBA056A6BCDD7C532AEA2D69CFF7A4E2B882C792E75F4F2EA506C04A0D33AD
99E62D622F1D307B8B0B13DE267E3C3967A74C59FF7B4276D6B1C4F28C6D28B799207F89266B529784F901DDBA9C7D90A6F3F4B97633F6F4BEE067984F76536499D474093FE965E87012A796AF17E1E36A7471B1A0545BFB0F1D5A2160C863AFEA2F0DB0
9A6517B057C27415BD013E37E13DD0AA3B8FE8A89750C6A68CCDFEC2D171054B3E7F85776625B8F2DF71CA8C3E785AB13ACEE1CAA9CAF023923BF612691018547291BF1790E8CA7535D4B78308BC43B7623E336395833886059A40500A66A785848AC7EC
46E82476E018EB1A4D59D324BD59442F318CB00E4DBB72BCA2509B48C714B09C88D06519EE0221D87901F25B6D7EAD376BB5D70C08E8DC301CA8BF7ACF3883477B19F6AB705AE43BE252113B86ED81ACF2F904473E6A0FACC5B615788F22EE2705B5FE89
7DD3593064096F5B73BD32A5DD0544126C31DAA987678F130DAE0A05C190E1D6B1EEBA4A21CD5E0DF051DDD86A6A002A680A2A697965681BAAFABD85D5071F766647100C1C2C03DFA2A19BB250CD54FA4819F7E981CD9879576B0A2436CD7A5A8D187C87
7EBF83400786010D8658B548F06E286374EEA2F470DD51C55F8F03FB147595C18BDE28F343384E5C6E34B34BEE9A73D3BE9218CEFA5F637DC837C588BDE2CB15CF26D2259E17033E93BF4F270C99EA643FA7051D38B0565D7C76EA8BC0BC4D8795B2BFCB
ED69910F933F6A8882D992C0C18DE9530D94A41521DCE8EB793815F09D0B05758A9792FBC57A634A58E8C592E8E41DC85100028D4358752837A5D7EBE0DB694F7F913CD482856C72907365AB6E9BF6A68949937E5DC2DD9B3F5A14E83229E23BB9D0979F
5E823BF21ECA23E8C030E4B82C2A25818D4DF3464633401D7D27ABF8BA91CB73FC6EBC8183BC6AB33A1FB8EFF6ECB4A75670B60D0E10AB72098DD37EB2AF59D05730A59B12518014449C369108D6A38B7BCB76D3FF6BB195C07F70B54D66420CE3AD68F2
8413911E788F9A6D96353EF82147E5053EA1A9E739D74DF2D51ED4B3
//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "DiagnosticUserFunction"
	Revision           = "1.0"
	GUID               = "{E7F777BB-EC0E-4AA1-9169-4A0F08654AB7}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)"
	Comment            = "Use this class as base class for new functions.">
	<Channels>
		<Server Name="sStatus" GUID="{37B98E1D-7D6C-41FC-8B79-AEC6F85DC00D}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="Actual status."/>
		<Client Name="cSigCLib" Required="false" Internal="false" Comment="Object channel to SigCLib. Does not have to be connected."/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek"/>
		<Dokumentation Revision="1.0" Date="2016-06-02" Author="HötAnt" Company="Sigmatek" Description="Creation"/>
	</RevDoku>
</Class>
*)
DiagnosticUserFunction : CLASS
  //Servers:
	sStatus 	: SvrChCmd_iprStates;
  //Clients:
	cSigCLib 	: CltChCmd_SigCLib;
  //Variables:
		Fault 	: _DiagErrorCode;
  //Functions:
				//! <Function Comment="Use this method to set the drive path." Name="SetDrivePath"/>
	FUNCTION VIRTUAL GLOBAL SetDrivePath
		VAR_INPUT
			pDP 	: ^CHAR;			//! <Variable Comment="Pointer to the data with the drive path." Name="SetDrivePath.pDP"/>
		END_VAR;
				//! <Function Comment="Receive data." Name="ReceivedData"/>
	FUNCTION VIRTUAL GLOBAL ReceivedData
		VAR_INPUT
			size 	: UDINT;			//! <Variable Comment="Size of the received data." Name="ReceivedData.size"/>
			pdata 	: ^USINT;			//! <Variable Comment="Pointer to the received data." Name="ReceivedData.pdata"/>
			OptCMD 	: USINT;			//! <Variable Comment="Optional command." Name="ReceivedData.OptCMD"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: BOOL;			//! <Variable Comment="FALSE..Error&#13;&#10;TRUE..Data received" Name="ReceivedData.retcode"/>
		END_VAR;
				//! <Function Comment="This method will be called cyclic when the diagnostic export is started." Name="WorkMethode"/>
	FUNCTION VIRTUAL GLOBAL WorkMethode;
				//! <Function Comment="Get the actual state." Name="GetWorkState"/>
	FUNCTION VIRTUAL GLOBAL GetWorkState
		VAR_OUTPUT
			retcode 	: iprStates;			//! <Variable Comment="Actual state." Name="GetWorkState.retcode"/>
		END_VAR;
				//! <Function Comment="Get error code." Name="GetErrorCode"/>
	FUNCTION VIRTUAL GLOBAL GetErrorCode
		VAR_OUTPUT
			retcode 	: _DiagErrorCode;			//! <Variable Comment="Error code." Name="GetErrorCode.retcode"/>
		END_VAR;
				//! <Function Comment="Is called when the work method finished." Name="EndWork"/>
	FUNCTION VIRTUAL GLOBAL EndWork;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd SigCLib


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB DiagnosticUserFunction::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_DIAGNOSTICUSERFUNCTION
1$UINT, 0$UINT, (SIZEOF(::DiagnosticUserFunction))$UINT, 
1$UINT, 1$UINT, 0$UINT, 
TO_UDINT(487743715), "DiagnosticUserFunction", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::DiagnosticUserFunction.sStatus.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(3043700589), "sStatus", 
//Clients:
(::DiagnosticUserFunction.cSigCLib.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(1539399991), "cSigCLib", TO_UDINT(77440046), "SigCLib", 0$UINT, 14$UINT, 
END_FUNCTION


#define USER_CNT_DiagnosticUserFunction 6

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_DiagnosticUserFunction] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION DiagnosticUserFunction::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_DiagnosticUserFunction, pCmd := #vmt.CmdTable);
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #SetDrivePath();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #ReceivedData();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[2]		:= #WorkMethode();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[3]		:= #GetWorkState();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[4]		:= #GetErrorCode();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[5]		:= #EndWork();

#pragma warning (default : 74)
	sStatus.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF sStatus.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

#pragma warning(disable:73);
#pragma warning(disable:76);
FUNCTION VIRTUAL GLOBAL DiagnosticUserFunction::WorkMethode

END_FUNCTION


FUNCTION VIRTUAL GLOBAL DiagnosticUserFunction::GetWorkState
	VAR_OUTPUT
		retcode 	: iprStates;
	END_VAR

END_FUNCTION


FUNCTION VIRTUAL GLOBAL DiagnosticUserFunction::GetErrorCode
	VAR_OUTPUT
		retcode 	: _DiagErrorCode;
	END_VAR
  
  retcode := Fault;

END_FUNCTION



FUNCTION VIRTUAL GLOBAL DiagnosticUserFunction::ReceivedData
	VAR_INPUT
		size 	: UDINT;
		pdata 	: ^USINT;
		OptCMD 	: USINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: BOOL;
	END_VAR
 
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL DiagnosticUserFunction::EndWork

END_FUNCTION


FUNCTION VIRTUAL GLOBAL DiagnosticUserFunction::SetDrivePath
	VAR_INPUT
		pDP 	: ^CHAR;
	END_VAR

END_FUNCTION

#pragma warning(default:73);
#pragma warning(default:76);
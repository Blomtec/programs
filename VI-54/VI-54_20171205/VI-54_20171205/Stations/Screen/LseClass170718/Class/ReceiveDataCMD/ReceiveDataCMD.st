//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "ReceiveDataCMD"
	Revision           = "1.0"
	GUID               = "{0AAF1522-D4A9-432D-AF62-7B57C9D436B0}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(518,120)"
	Comment            = "This class receives data and gives it to DiagnosticWork class.">
	<Channels>
		<Client Name="cDiagnosticWork" Required="true" Internal="false" Comment="Object channel to DiagnosticWork."/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek"/>
		<Dokumentation Revision="1.0" Date="2016-06-02" Author="HötAnt" Company="Sigmatek" Description="Creation"/>
	</RevDoku>
	<Network Name="ReceiveDataCMD">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{36376179-82D0-47CC-9728-DD12C88F530D}"
				Class      = "TCPComReceive"
				Position   = "(218,120)"
				Visualized = "false">
				<Channels>
					<Server Name="ClassSvr"/>
					<Server Name="ID_Source"/>
					<Server Name="sRecvCnt"/>
					<Client Name="toDataManager"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.ClassSvr" Destination="_base.ClassSvr" Vertices="(1006,210),(834,210),"/>
			<Connection Source="this.ID_Source" Destination="_base.ID_Source" Vertices="(1006,270),(834,270),"/>
			<Connection Source="this.sRecvCnt" Destination="_base.sRecvCnt" Vertices="(1006,330),(834,330),"/>
			<Connection Source="_base.toDataManager" Destination="this.toDataManager" Vertices="(218,210),(38,210),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using TCPComReceive

ReceiveDataCMD : CLASS
: TCPComReceive
  //Servers:
  //Clients:
	cDiagnosticWork 	: CltChCmd_DiagnosticWork;
  //Variables:
  //Functions:
				//! <Function Comment="Overwrite this method in order to receive messages including the optional CMD parameter." Name="CallBackReciverCMD"/>
	FUNCTION VIRTUAL GLOBAL CallBackReciverCMD
		VAR_INPUT
			DestinationID 	: DINT;
			SourceID 	: DINT;
			size 	: UDINT;
			pdata 	: ^USINT;
			OptCMD 	: USINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: BOOL;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd DiagnosticWork


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB ReceiveDataCMD::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_RECEIVEDATACMD
1$UINT, 0$UINT, (SIZEOF(::ReceiveDataCMD))$UINT, 
0$UINT, 1$UINT, 0$UINT, 
TO_UDINT(2311390549), "ReceiveDataCMD", //Class
TO_UDINT(4066382941), "TCPComReceive", 1$UINT, 0$UINT, //Baseclass
//Servers:
//Clients:
(::ReceiveDataCMD.cDiagnosticWork.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3290294248), "cDiagnosticWork", TO_UDINT(435391692), "DiagnosticWork", 1$UINT, 0$UINT, 
END_FUNCTION


#define USER_CNT_ReceiveDataCMD 2

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_ReceiveDataCMD] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION ReceiveDataCMD::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= TCPComReceive::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= TCPComReceive::ClassSvr.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, TCPComReceive::ClassSvr.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_ReceiveDataCMD;
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #CallBackReciverCMD();

#pragma warning (default : 74)
	TCPComReceive::ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF TCPComReceive::ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

#pragma warning(disable:73);

FUNCTION VIRTUAL GLOBAL ReceiveDataCMD::CallBackReciverCMD
	VAR_INPUT
		DestinationID 	: DINT;
		SourceID 	: DINT;
		size 	: UDINT;
		pdata 	: ^USINT;
		OptCMD 	: USINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: BOOL;
	END_VAR
  
  retcode := cDiagnosticWork.ReceivedData(size, pdata, OptCMD);

END_FUNCTION
#pragma warning(default:73);

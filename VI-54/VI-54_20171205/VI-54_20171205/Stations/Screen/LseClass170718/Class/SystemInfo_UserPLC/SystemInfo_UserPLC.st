//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "SystemInfo_UserPLC"
	Revision           = "1.0"
	GUID               = "{5DD6CA62-0F55-4637-A4D5-CEEF74195EA7}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(510,300)"
	Comment            = "This class is used to get system informations. It gets PLC type, OS-version, loader-version, serial number, ip address, subnet mask and gateway address.">
	<Channels>
		<Client Name="ocNetworkConfig" Required="true" Internal="false" Comment="Object channel to NetworkConfig. It is used to get the IP address, the subnet mask and the gateway address."/>
		<Client Name="ocOSVersion" Required="true" Internal="false" Comment="Object channel to a string with the OS-version."/>
		<Client Name="ocPLCType" Required="true" Internal="false" Comment="Object channel to a string with the PLC-type."/>
		<Client Name="ocSerialNumber" Required="true" Internal="false" Comment="Object channel to a string with the serial number."/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek"/>
		<Dokumentation Revision="1.0" Date="2016-04-25" Author="GreJoh" Company="Sigmatek" Description="Creation"/>
	</RevDoku>
	<Network Name="SystemInfo_UserPLC">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{3D7DB6C0-2380-452C-991B-79916ADD3F1D}"
				Class      = "DiagnosticUserFunction_PLC"
				Position   = "(218,120)"
				Visualized = "false">
				<Channels>
					<Server Name="sStatus"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.sStatus" Destination="_base.sStatus" Vertices="(946,210),(774,210),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using DiagnosticUserFunction_PLC

SystemInfo_UserPLC : CLASS
: DiagnosticUserFunction_PLC
  //Servers:
  //Clients:
	ocNetworkConfig 	: CltChCmd_NetworkConfig;
	ocOSVersion 	: CltChCmd_String;
	ocPLCType 	: CltChCmd_String;
	ocSerialNumber 	: CltChCmd_String;
  //Variables:
		ssw_SysInfo 	: DINT;
		Fault 	: _DiagErrorCode;			//! <Variable Comment="Variable for error." Name="Fault"/>
		IPInfo_PLC 	: _Diag_IPInfo;			//! <Variable Comment="Variable for the Ip infos." Name="IPInfo_PLC"/>
		SysInfo_PLC 	: _Diag_SystemInfo;			//! <Variable Comment="Variable for the system information." Name="SysInfo_PLC"/>
		udLength 	: UDINT;
  //Functions:
				//! <Function Comment="This method is called when the command to start the work is received. The class DiagnosticWork_PLC calls this method." Name="StartWork"/>
	FUNCTION VIRTUAL GLOBAL StartWork
		VAR_OUTPUT
			retcode 	: iprStates;			//! <Variable Comment="Ready..Continue with the work methode&#13;&#10;Error..ssw is in a wrong step" Name="StartWork.retcode"/>
		END_VAR;
				//! <Function Comment="In this method the system information data are collected." Name="WorkMethode"/>
	FUNCTION VIRTUAL GLOBAL WorkMethode;
				//! <Function Comment="Method to get actual state of the class." Name="GetWorkState"/>
	FUNCTION VIRTUAL GLOBAL GetWorkState
		VAR_OUTPUT
			retcode 	: iprStates;			//! <Variable Comment="Actual state." Name="GetWorkState.retcode"/>
		END_VAR;
				//! <Function Comment="Method to get the error code." Name="GetErrorCode"/>
	FUNCTION VIRTUAL GLOBAL GetErrorCode
		VAR_OUTPUT
			retcode 	: _DiagErrorCode;			//! <Variable Comment="Error code." Name="GetErrorCode.retcode"/>
		END_VAR;
				//! <Function Comment="Method to get the size of the the system info data." Name="GetDataSize"/>
	FUNCTION VIRTUAL GLOBAL GetDataSize
		VAR_OUTPUT
			retcode 	: UDINT;			//! <Variable Comment="Size of the data." Name="GetDataSize.retcode"/>
		END_VAR;
				//! <Function Comment="Method to get the pointer to the system info data." Name="GetDataPtr"/>
	FUNCTION VIRTUAL GLOBAL GetDataPtr
		VAR_OUTPUT
			dataPtr 	: ^void;			//! <Variable Comment="Pointer to the user data." Name="GetDataPtr.dataPtr"/>
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd NetworkConfig
#pragma usingLtd String


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB SystemInfo_UserPLC::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_SYSTEMINFO_USERPLC
1$UINT, 0$UINT, (SIZEOF(::SystemInfo_UserPLC))$UINT, 
0$UINT, 4$UINT, 0$UINT, 
TO_UDINT(182822036), "SystemInfo_UserPLC", //Class
TO_UDINT(4200646535), "DiagnosticUserFunction_PLC", 1$UINT, 0$UINT, //Baseclass
//Servers:
//Clients:
(::SystemInfo_UserPLC.ocNetworkConfig.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3454556150), "ocNetworkConfig", TO_UDINT(3068426329), "NetworkConfig", 1$UINT, 31$UINT, 
(::SystemInfo_UserPLC.ocOSVersion.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2618108466), "ocOSVersion", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::SystemInfo_UserPLC.ocPLCType.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2669902286), "ocPLCType", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::SystemInfo_UserPLC.ocSerialNumber.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1422769618), "ocSerialNumber", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
END_FUNCTION


#define USER_CNT_SystemInfo_UserPLC 7

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_SystemInfo_UserPLC] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION SystemInfo_UserPLC::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= DiagnosticUserFunction_PLC::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= DiagnosticUserFunction_PLC::sStatus.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, DiagnosticUserFunction_PLC::sStatus.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_SystemInfo_UserPLC;
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #StartWork();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #WorkMethode();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[2]		:= #GetWorkState();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[3]		:= #GetErrorCode();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[4]		:= #GetDataSize();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[5]		:= #GetDataPtr();

#pragma warning (default : 74)
	DiagnosticUserFunction_PLC::sStatus.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF DiagnosticUserFunction_PLC::sStatus.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION



FUNCTION VIRTUAL GLOBAL SystemInfo_UserPLC::WorkMethode
    
  case ssw_SysInfo of

    // Idle
    //**********************************************************************
    0:
    
    
    // Get data
    //**********************************************************************
    1: 

        // Get PLC Type    
        udLength := ocPLCType.GetLength();
        if udLength > 0 then
          ocPLCType.ReadDataOff(udOff:=0, pData:=#SysInfo_PLC.PLCType[0], udMax:=udLength);
        else
          Fault.ErrorNr := 1;
          Fault.ErrorCode := -1;
          ssw_SysInfo := 3;
          return;
        end_if;
        
        
        // Get OS Version    
        udLength := ocOSVersion.GetLength();
        if udLength > 0 then
          ocOSVersion.ReadDataOff(udOff:=0, pData:=#SysInfo_PLC.OSVersion[0], udMax:=udLength);       
        else
          Fault.ErrorNr := 1;
          Fault.ErrorCode := -2;
          ssw_SysInfo := 3;
          return;
        end_if;
        
        
        // Get Loader version
        SysInfo_PLC.LoaderVersion.usLoRev := ops.uiLoaderVersion.usLoRev;
        SysInfo_PLC.LoaderVersion.usHiRev := ops.uiLoaderVersion.usHiRev;       
        
        
        // Get Serial number     
        udLength := ocSerialNumber.GetLength();
        if udLength > 0 then
          ocSerialNumber.ReadDataOff(udOff:=0, pData:=#SysInfo_PLC.SerialNumber[0], udMax:=udLength);
        else
          Fault.ErrorNr := 1;
          Fault.ErrorCode := -3;
          ssw_SysInfo := 3;
          return;
        end_if;
        
        
        // Get the network settings
        IPInfo_PLC.IPAdress := ocNetworkConfig.IPAddress.Read();
        IPInfo_PLC.Subnet := ocNetworkConfig.SNMask.Read();
        IPInfo_PLC.Gateway := ocNetworkConfig.GWAddress.Read();
        
        SysInfo_PLC.IPInfo := IPInfo_PLC;
        
        ssw_SysInfo := 2;
        

    // Finished
    //**********************************************************************        
    2:
        sStatus := READY;
        ssw_SysInfo := 0;
      
      
    // Error
    //**********************************************************************      
    3:    
        sStatus := ERROR;
        ssw_SysInfo := 0;
    
    
  end_case;
 
END_FUNCTION


FUNCTION VIRTUAL GLOBAL SystemInfo_UserPLC::GetDataSize
	VAR_OUTPUT
		retcode 	: UDINT;
	END_VAR
  
    retcode := sizeof( SysInfo_PLC );

END_FUNCTION


FUNCTION VIRTUAL GLOBAL SystemInfo_UserPLC::GetDataPtr
	VAR_OUTPUT
		dataPtr 	: ^void;
	END_VAR
  
  dataPtr := #SysInfo_PLC;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL SystemInfo_UserPLC::GetWorkState
	VAR_OUTPUT
		retcode 	: iprStates;
	END_VAR
  
  retcode := sStatus;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL SystemInfo_UserPLC::StartWork
	VAR_OUTPUT
		retcode 	: iprStates;
	END_VAR
  
  if ssw_SysInfo = 0 then
    ssw_SysInfo := 1;
    retcode := Ready;
    sStatus:= BUSY;
  else
    retcode := ERROR;
  end_if;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL SystemInfo_UserPLC::GetErrorCode
	VAR_OUTPUT
		retcode 	: _DiagErrorCode;
	END_VAR
  
  retcode := Fault;

END_FUNCTION

//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "SendDataCMD"
	Revision           = "1.0"
	GUID               = "{856AEF96-2948-48EC-A095-39A895406496}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	BackgroundTask     = "true"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(470,120)"
	Comment            = "Class passes the JobState and the JobID to the DiagnosticWork class.">
	<Channels>
		<Client Name="cStation" Required="true" Internal="false" Comment="Object channel to DiagnosticWork."/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek"/>
		<Dokumentation Revision="1.0" Date="2016-06-02" Author="HötAnt" Company="Sigmatek" Description="Creation"/>
	</RevDoku>
	<Network Name="SendDataCMD">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{378DFD46-7C48-4C37-BD78-E70C694EA1DD}"
				Class      = "TCPComSend"
				Position   = "(218,120)"
				Visualized = "false">
				<Channels>
					<Server Name="ClassSvr"/>
					<Server Name="ID_Destination"/>
					<Server Name="ID_Source"/>
					<Server Name="sSendCnt"/>
					<Server Name="sSendErr"/>
					<Client Name="cPrio"/>
					<Client Name="cSendErr"/>
					<Client Name="cSendOk"/>
					<Client Name="toDataManager"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.ClassSvr" Destination="_base.ClassSvr" Vertices="(1006,210),(834,210),"/>
			<Connection Source="this.ID_Destination" Destination="_base.ID_Destination" Vertices="(1006,270),(834,270),"/>
			<Connection Source="this.ID_Source" Destination="_base.ID_Source" Vertices="(1006,330),(834,330),"/>
			<Connection Source="this.sSendCnt" Destination="_base.sSendCnt" Vertices="(1006,390),(834,390),"/>
			<Connection Source="this.sSendErr" Destination="_base.sSendErr" Vertices="(1006,450),(834,450),"/>
			<Connection Source="_base.toDataManager" Destination="this.toDataManager" Vertices="(218,210),(38,210),"/>
			<Connection Source="_base.cPrio" Destination="this.cPrio" Vertices="(218,270),(38,270),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using TCPComSend

SendDataCMD : CLASS
: TCPComSend
  //Servers:
  //Clients:
	cStation 	: CltChCmd_DiagnosticWork;
  //Variables:
  //Functions:
				//! <Function Comment="Is called everytime the state of a job is changing. Overwrite to react to state changes." Name="CallBackJobState"/>
	FUNCTION VIRTUAL GLOBAL CallBackJobState
		VAR_INPUT
			JobID 	: DINT;
			JobState 	: DataManagerPriority::t_e_CallbackState;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd DiagnosticWork


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB SendDataCMD::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_SENDDATACMD
1$UINT, 0$UINT, (SIZEOF(::SendDataCMD))$UINT, 
0$UINT, 1$UINT, 0$UINT, 
TO_UDINT(2500758279), "SendDataCMD", //Class
TO_UDINT(2053161344), "TCPComSend", 1$UINT, 2$UINT, //Baseclass
//Servers:
//Clients:
(::SendDataCMD.cStation.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(4280337330), "cStation", TO_UDINT(435391692), "DiagnosticWork", 1$UINT, 0$UINT, 
END_FUNCTION


#define USER_CNT_SendDataCMD 3

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_SendDataCMD] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION SendDataCMD::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= TCPComSend::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= TCPComSend::ClassSvr.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, TCPComSend::ClassSvr.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_SendDataCMD;
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #CallBackJobState();

#pragma warning (default : 74)
	TCPComSend::ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF TCPComSend::ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
// Ableitung ist notwendig , um den JobState an die Klasse weiterzugeben.

FUNCTION VIRTUAL GLOBAL SendDataCMD::CallBackJobState
	VAR_INPUT
		JobID 	: DINT;
		JobState 	: DataManagerPriority::t_e_CallbackState;
	END_VAR
  
  // Base aufrufen , damit die Standard Server und Clients wie gewohnt aktualisiert werden.
  TCPComSend::CallBackJobState(JobID, JobState);
  
  case JobState of
    //Ok
    _MNG_Received:
       cStation.ResponseJobState(jobid,TRUE);
    
    //Error
    _MNG_NoReceiverConnected,
    _MNG_GlobalReceiveError,
    _MNG_TimeOut:
       cStation.ResponseJobState(jobid,FALSE);
       
  end_case;

END_FUNCTION

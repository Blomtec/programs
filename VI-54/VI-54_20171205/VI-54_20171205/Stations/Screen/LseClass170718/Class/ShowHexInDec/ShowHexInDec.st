//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "ShowHexInDec"
	Revision           = "1.0"
	GUID               = "{AD8DC2B2-A631-4C55-B69E-E321764B5F2C}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(450,180)"
	Comment            = "class to show hexadecimal data in decimal">
	<Channels>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek" Author="Roskri"/>
		<Dokumentation Revision="1.0" Date="2016-02-04" Author="Roskri" Company="Sigmatek" Description="Class Created"/>
	</RevDoku>
	<Network Name="ShowHexInDec">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{3FE3A274-30D2-401F-8B95-69D254B3A188}"
				Class      = "_MyIO"
				Position   = "(218,120)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Refresh"/>
					<Server Name="Server0"/>
					<Client Name="Graphic"/>
					<Client Name="Lse"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.Server0" Destination="_base.Server0" Vertices="(690,210),(518,210),"/>
			<Connection Source="this.Refresh" Destination="_base.Refresh" Vertices="(690,270),(518,270),"/>
			<Connection Source="_base.Lse" Destination="this.Lse" Vertices="(218,210),(38,210),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using _MyIO

ShowHexInDec : CLASS
: _MyIO
  //Servers:
  //Clients:
  //Variables:
  //Functions:
				//! <Function Comment="this method is called everytime when system wants to redraw the io" Name="Draw"/>
	FUNCTION __CDECL VIRTUAL GLOBAL Draw
		VAR_INPUT
			pio 	: ^_IO;			//! <Variable Comment="pointer to _IO information" Name="Draw.pio"/>
			pr 	: ^_RESULT;			//! <Variable Comment="pointer to _RESULT information" Name="Draw.pr"/>
			pv 	: ^_VARIABLE;			//! <Variable Comment="pointer to io _VARIABLE information" Name="Draw.pv"/>
			input 	: BOOL;			//! <Variable Comment="TRUE it&apos;s an input&#13;&#10;FALSE it&apos;s an output" Name="Draw.input"/>
		END_VAR
		VAR_OUTPUT
			retcode (EAX) 	: _DOIT;			//! <Variable Comment="for the returnstatement there are 3 different possibilities&#13;&#10;  _IDLE ..... the system should goon like it is (system goes on)&#13;&#10;  _IDIDIT ... i did it (system is ready)&#13;&#10;  _IFAILED .. i tried to do my best, but i failed (system is re" Name="Draw.retcode"/>
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB ShowHexInDec::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_SHOWHEXINDEC
1$UINT, 0$UINT, (SIZEOF(::ShowHexInDec))$UINT, 
0$UINT, 0$UINT, 0$UINT, 
TO_UDINT(315577591), "ShowHexInDec", //Class
TO_UDINT(2980745877), "_MyIO", 0$UINT, 3$UINT, //Baseclass
//Servers:
//Clients:
END_FUNCTION


#define USER_CNT_ShowHexInDec 17

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_ShowHexInDec] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION ShowHexInDec::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= _MyIO::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= _MyIO::Server0.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, _MyIO::Server0.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_ShowHexInDec;
#pragma warning (disable : 74)
	vmt.UserFcts[3]		:= #Draw();

#pragma warning (default : 74)
	_MyIO::Server0.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF _MyIO::Server0.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION __CDECL VIRTUAL GLOBAL ShowHexInDec::Draw
	VAR_INPUT
		pio 	: ^_IO;
		pr 	: ^_RESULT;
#pragma warning(disable: 73);
		pv 	: ^_VARIABLE;
		input 	: BOOL;
#pragma warning(default: 73);
	END_VAR
	VAR_OUTPUT
		retcode (EAX) 	: _DOIT;
	END_VAR
  VAR
  	diVersionNrWhole : DINT;
    diVersionNrDec   : DINT;
    diVersionNr      : DINT;
    txt              : array[0..31] of _CHAR;
  END_VAR

    diVersionNrWhole := ((pr^.value) / (256)); //calc whole part of the number
    diVersionNrDec := ((pr^.value) - diVersionNrWhole * 256); //calc the decimal part of the number
    diVersionNr := diVersionNrWhole *100 + diVersionNrDec; //add whole and decimal part together
    DToA(#txt[0],diVersionNr, 0x0820, sizeof(_CHAR));
    
    OutTextAlign(#txt[0], 0, #pio^.space, pio^.font, pio^.attrib, pio^.frametype, pio^.coltxt, pio^.colback, pio^.colframe, sizeof(_CHAR));
    retcode := _IDIDIT;
      
      
END_FUNCTION

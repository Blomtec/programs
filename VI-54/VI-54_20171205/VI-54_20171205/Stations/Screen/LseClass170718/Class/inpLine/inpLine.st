//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "inpLine"
	Revision           = "0.0"
	GUID               = "{11BBFBCB-C377-4FEA-9BCE-06E946498DAF}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(840,960)">
	<Channels>
		<Server Name="_______________" GUID="{E6F88B47-8641-459E-96F4-C9ABD46DDA73}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="LineSpeed" GUID="{6145CFDB-3D74-4ACF-822D-607D232444A5}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="MaxAccDecInfeedConv" GUID="{C25CDDB1-9A43-4EB6-BA59-34566D1AFD56}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="MaxSpeedInfeedConv" GUID="{6F3C8D9A-4197-4829-BADE-E63D6BD1EE64}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="TrayLenght" GUID="{BB3617AB-9D03-4D9F-86A6-A8DCCBE74944}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="TraysPerMinute" GUID="{7829D166-DA8A-4657-81E2-5702059A9E62}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
	</Channels>
	<Network Name="inpLine">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{A1E52859-E9E0-422A-BE52-EE7602FFA2A6}"
				Class      = "ReceptBase"
				Position   = "(218,120)"
				Visualized = "false">
				<Channels>
					<Server Name="Refresh"/>
					<Server Name="Size"/>
					<Client Name="Data"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.Refresh" Destination="_base.Refresh" Vertices="(690,210),(518,210),"/>
			<Connection Source="this.Size" Destination="_base.Size" Vertices="(690,270),(518,270),"/>
			<Connection Source="_base.Data" Destination="this.Data" Vertices="(218,210),(38,210),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using ReceptBase

inpLine : CLASS
: ReceptBase
  //Servers:
	MaxSpeedInfeedConv 	: SvrCh_DINT;
	MaxAccDecInfeedConv 	: SvrCh_DINT;
	_______________ 	: SvrCh_DINT;
	LineSpeed 	: SvrCh_DINT;
	TraysPerMinute 	: SvrCh_DINT;
	TrayLenght 	: SvrCh_DINT;
  //Clients:
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL DefaultPara;
	
	FUNCTION VIRTUAL GLOBAL RefreshPara;
	
	FUNCTION VIRTUAL GLOBAL LineSpeed::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL TraysPerMinute::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL TrayLenght::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB inpLine::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_INPLINE
0$UINT, 0$UINT, (SIZEOF(::inpLine))$UINT, 
6$UINT, 0$UINT, 0$UINT, 
TO_UDINT(2273037661), "inpLine", //Class
TO_UDINT(1832340142), "ReceptBase", 0$UINT, 0$UINT, //Baseclass
//Servers:
(::inpLine.MaxSpeedInfeedConv.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4173787072), "MaxSpeedInfeedConv", 
(::inpLine.MaxAccDecInfeedConv.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3299380193), "MaxAccDecInfeedConv", 
(::inpLine._______________.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1048831761), "_______________", 
(::inpLine.LineSpeed.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2643223515), "LineSpeed", 
(::inpLine.TraysPerMinute.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4097909503), "TraysPerMinute", 
(::inpLine.TrayLenght.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4003115046), "TrayLenght", 
//Clients:
END_FUNCTION


#define USER_CNT_inpLine 2

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_inpLine] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION inpLine::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= ReceptBase::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= ReceptBase::Refresh.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, ReceptBase::Refresh.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_inpLine;
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #DefaultPara();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #RefreshPara();

#pragma warning (default : 74)
	ReceptBase::Refresh.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ReceptBase::Refresh.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	LineSpeed.pMeth			:= StoreMethod( #M_RD_DIRECT(), #LineSpeed::Write() );
	IF LineSpeed.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	TraysPerMinute.pMeth			:= StoreMethod( #M_RD_DIRECT(), #TraysPerMinute::Write() );
	IF TraysPerMinute.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	TrayLenght.pMeth			:= StoreMethod( #M_RD_DIRECT(), #TrayLenght::Write() );
	IF TrayLenght.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

FUNCTION VIRTUAL GLOBAL inpLine::Init

  //MaxSpeedInfeedConv  := to_dint(to_real cInfeedConvVmax95proc ToMperMin);
  //MaxAccDecInfeedConv := to_dint(to_real cInfeedConvAmax ToMperSec2);

  // Call init from receptbase
  ReceptBase::Init();
    
END_FUNCTION

FUNCTION VIRTUAL GLOBAL inpLine::DefaultPara

  

END_FUNCTION

FUNCTION VIRTUAL GLOBAL inpLine::RefreshPara

  ReceptPtr^.Machine.TraysPerMinute          := TraysPerMinute;
  ReceptPtr^.Machine.TrayLenght              := TrayLenght;
  
END_FUNCTION
  
FUNCTION VIRTUAL GLOBAL inpLine::TraysPerMinute::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	TraysPerMinute := input;
  ReceptPtr^.Machine.TraysPerMinute := TraysPerMinute;
	result := TraysPerMinute;

END_FUNCTION

FUNCTION VIRTUAL GLOBAL inpLine::TrayLenght::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	TrayLenght := input;
  ReceptPtr^.Machine.TrayLenght := TrayLenght;
	result := TrayLenght;

END_FUNCTION

FUNCTION VIRTUAL GLOBAL inpLine::LineSpeed::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	LineSpeed := input;
  ReceptPtr^.Machine.LineSpeed := LineSpeed;
	result := LineSpeed;

END_FUNCTION

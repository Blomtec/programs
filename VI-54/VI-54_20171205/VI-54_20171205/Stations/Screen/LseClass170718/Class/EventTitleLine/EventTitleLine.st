//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "EventTitleLine"
	Revision           = "1.0"
	GUID               = "{6BE11131-C7B4-4115-9E60-3F3AC2572C1B}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(540,240)"
	Comment            = "class for drawing the title line of the EventJournal">
	<Channels>
	</Channels>
	<RevDoku>
		<Owner Author="KaiAnd"/>
		<Dokumentation Revision="1.0" Date="2016-05-11" Author="KaiAnd" Company="Sigmatek" Description="start release"/>
	</RevDoku>
	<Network Name="EventTitleLine">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{F0F3623D-B183-466A-95EF-E54EAAEA360B}"
				Class      = "TitleLine"
				Position   = "(218,120)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Refresh"/>
					<Server Name="Server0"/>
					<Client Name="ColumnChoice"/>
					<Client Name="coSystemLogging"/>
					<Client Name="Lse"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.Server0" Destination="_base.Server0" Vertices="(942,210),(770,210),"/>
			<Connection Source="this.Refresh" Destination="_base.Refresh" Vertices="(942,270),(770,270),"/>
			<Connection Source="_base.Lse" Destination="this.Lse" Vertices="(218,210),(30,210),(38,210),"/>
			<Connection Source="_base.ColumnChoice" Destination="this.ColumnChoice" Vertices="(218,270),(38,270),"/>
			<Connection Source="_base.coSystemLogging" Destination="this.coSystemLogging" Vertices="(218,330),(38,330),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using TitleLine

EventTitleLine : CLASS
: TitleLine
  //Servers:
  //Clients:
  //Variables:
  //Functions:
				//! <Function Comment="Draws the column texts." Name="DrawHeader"/>
	FUNCTION VIRTUAL DrawHeader
		VAR_INPUT
			pio 	: ^_IO;			//! <Variable Comment="Pointer to the _IO information." Name="DrawHeader.pio"/>
		END_VAR
		VAR_OUTPUT
			bSuccessful 	: BOOL;			//! <Variable Comment="TRUE..Ok&#13;&#10;FALSE..Pointer pio was NIL" Name="DrawHeader.bSuccessful"/>
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB EventTitleLine::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_EVENTTITLELINE
1$UINT, 0$UINT, (SIZEOF(::EventTitleLine))$UINT, 
0$UINT, 0$UINT, 0$UINT, 
TO_UDINT(3245687716), "EventTitleLine", //Class
TO_UDINT(112430022), "TitleLine", 1$UINT, 1$UINT, //Baseclass
//Servers:
//Clients:
END_FUNCTION


#define USER_CNT_EventTitleLine 19

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_EventTitleLine] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION EventTitleLine::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= TitleLine::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= _MyIO::Server0.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, _MyIO::Server0.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_EventTitleLine;
#pragma warning (disable : 74)
	vmt.UserFcts[18]		:= #DrawHeader();

#pragma warning (default : 74)
	_MyIO::Server0.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF _MyIO::Server0.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL EventTitleLine::DrawHeader
	VAR_INPUT
		pio 	: ^_IO;
	END_VAR
	VAR_OUTPUT
		bSuccessful 	: BOOL;
	END_VAR

  VAR
    pString     : ^_CHAR;
    tmpRoom     : _ROOM;
    fieldHight  : INT;
    fontWidth   : UINT;
    fontHight   : UINT;
  END_VAR

  // Übergabeparameter prüfen
  if pio = NIL then
    bSuccessful := false;
    return;
  else
    bSuccessful := true;
  end_if;
  
  // Bestimmen der Position des Texts (Zentriert im Feld)
  fieldHight := pio^.room.xy2.y - pio^.room.xy1.y;
  font_size(x0:=pio^.font, p1:=#fontWidth, p2:=#fontHight);

  tmpRoom.xy1.x := ScrollOffset - 1;
  tmpRoom.xy1.y := pio^.room.xy1.y + ((fieldHight / 2) - (fontHight$INT / 2));
  tmpRoom.xy2.x := ScrollOffset-1;
  tmpRoom.xy2.y := tmpRoom.xy1.y + fontHight$INT; 

  // Prüfen ob Text der Spalte1 dargestellt werden soll
  //-----------------------------------------------------------------------------------------
  if ColumnChoice AND 2#000001 then

    // Text aus Textschema holen
    pString$^void := NewDoScheme(x0 := TEXTSCHEME, 
                                 x1 := 0, 
                                 x2 := ExtVisPara.ParaTextscheme.no);            
    if pString = NIL then
      if (IsCon_coSystemLogging = True) then    // KaiAnd
        coSystemLogging.LogEventText("UserListTitel::DrawHeader(): Keinen Text (Eventzeit) gefunden");
      end_if;
    else
      // Koordinaten bestimmen
      tmpRoom.xy1.x := tmpRoom.xy1.x + 5;
      tmpRoom.xy2.x := tmpRoom.xy1.x + to_int(aColumnWidths[0]) - 5;
      
      // Text ausgeben
      OutTextAlign( p0 := pString, 
                    x1 := 0,
                    p1 := #tmpRoom, 
                    x2 := pio^.font, 
                    x3 := T_SOLID OR T_COPY OR T_PROP OR T_CENTERBOUND OR T_MIDBOUND, // KaiAnd; instead of "pio^.attrib"
                    x9 := _DEFFRAME, 
                    x4 := pio^.coltxt, 
                    x5 := INVISIBLE, 
                    x6 := NIL$_COLOR, 
                    x7 := sizeof(_CHAR));
    end_if;
    
  end_if;
  
  
  // Prüfen ob Text der Spalte2 dargestellt werden soll
  //-----------------------------------------------------------------------------------------
  if ColumnChoice AND 2#000010 then

    // Text aus Textschema holen
    pString$^void := NewDoScheme(x0 := TEXTSCHEME, 
                                 x1 := 1, 
                                 x2 := ExtVisPara.ParaTextscheme.no);            
    if pString = NIL then
      if (IsCon_coSystemLogging = True) then    // KaiAnd
        coSystemLogging.LogEventText("TitleLine::DrawHeader(): Keinen Text (Eventzeit) gefunden");
      end_if;
    else
      // Koordinaten bestimmen
      tmpRoom.xy1.x := tmpRoom.xy2.x + 5;
      tmpRoom.xy2.x := tmpRoom.xy1.x + to_int(aColumnWidths[1]) - 5;
      
      // Text ausgeben
      OutTextAlign( p0 := pString, 
                    x1 := 0,
                    p1 := #tmpRoom, 
                    x2 := pio^.font, 
                    x3 := T_SOLID OR T_COPY OR T_PROP OR T_CENTERBOUND OR T_MIDBOUND, // KaiAnd; instead of "pio^.attrib"
                    x9 := _DEFFRAME, 
                    x4 := pio^.coltxt, 
                    x5 := INVISIBLE, 
                    x6 := NIL$_COLOR, 
                    x7 := sizeof(_CHAR));
    end_if;
    
  end_if;
  
  
  // Prüfen ob Text der Spalte3 dargestellt werden soll
  //-----------------------------------------------------------------------------------------
  if ColumnChoice AND 2#000100 then
  
    //Text aus Textschema holen
    pString$^void := NewDoScheme(x0 := TEXTSCHEME, 
                                 x1 := 2, 
                                 x2 := ExtVisPara.ParaTextscheme.no);            
    if pString = NIL then
      if (IsCon_coSystemLogging = True) then    // KaiAnd
        coSystemLogging.LogEventText("TitleLine::DrawHeader(): Keinen Text (Alarmnummer) gefunden");
      end_if;
    else
      // Koordinaten bestimmen
      tmpRoom.xy1.x := tmpRoom.xy2.x + 5;
      tmpRoom.xy2.x := tmpRoom.xy1.x + to_int(aColumnWidths[2]) - 5;
      
      // Text ausgeben
      OutTextAlign( p0 := pString, 
                    x1 := 0,
                    p1 := #tmpRoom, 
                    x2 := pio^.font, 
                    x3 := T_SOLID OR T_COPY OR T_PROP OR T_CENTERBOUND OR T_MIDBOUND, // KaiAnd; instead of "pio^.attrib"
                    x9 := _DEFFRAME, 
                    x4 := pio^.coltxt, 
                    x5 := INVISIBLE, 
                    x6 := NIL$_COLOR, 
                    x7 := sizeof(_CHAR));
      
    end_if;
 
  end_if;
  
  
  // Prüfen ob Text der Spalte4 dargestellt werden soll
  //-----------------------------------------------------------------------------------------
  if ColumnChoice AND 2#001000 then
  
    // Text aus Textschema holen
    pString$^void := NewDoScheme(x0 := TEXTSCHEME, 
                                 x1 := 3, 
                                 x2 := ExtVisPara.ParaTextscheme.no);            
    if pString = NIL then
      if (IsCon_coSystemLogging = True) then    // KaiAnd
        coSystemLogging.LogEventText("TitleLine::DrawHeader(): Keinen Text (Accesslevel) gefunden");
      end_if;
    else
      // Koordinaten bestimmen
      tmpRoom.xy1.x := tmpRoom.xy2.x + 5;
      tmpRoom.xy2.x := tmpRoom.xy1.x + to_int(aColumnWidths[3]) - 5;
      
      
      // Text ausgeben
      OutTextAlign( p0 := pString, 
                    x1 := 0,
                    p1 := #tmpRoom, 
                    x2 := pio^.font, 
                    x3 := T_SOLID OR T_COPY OR T_PROP OR T_CENTERBOUND OR T_MIDBOUND, // KaiAnd; instead of "pio^.attrib"
                    x9 := _DEFFRAME, 
                    x4 := pio^.coltxt, 
                    x5 := INVISIBLE, 
                    x6 := NIL$_COLOR, 
                    x7 := sizeof(_CHAR));
    end_if;
    
  end_if;
  
  
  // Prüfen ob Text der Spalte5 dargestellt werden soll
  //-----------------------------------------------------------------------------------------
  if ColumnChoice AND 2#010000 then
  
    // Text aus Textschema holen
    pString$^void := NewDoScheme(x0 := TEXTSCHEME, 
                                 x1 := 4, 
                                 x2 := ExtVisPara.ParaTextscheme.no);            
    if pString = NIL then
      if (IsCon_coSystemLogging = True) then    // KaiAnd
        coSystemLogging.LogEventText("TitleLine::DrawHeader(): Keinen Text (Beschreibung) gefunden");
      end_if;
    else
      // Koordinaten bestimmen
      tmpRoom.xy1.x := tmpRoom.xy2.x + 5;
      tmpRoom.xy2.x := tmpRoom.xy1.x + to_int(aColumnWidths[4]) - 5;
      
      // Text ausgeben
      OutTextAlign( p0 := pString, 
                    x1 := 0,
                    p1 := #tmpRoom, 
                    x2 := pio^.font, 
                    x3 := pio^.attrib, 
                    x9 := _DEFFRAME, 
                    x4 := pio^.coltxt, 
                    x5 := INVISIBLE, 
                    x6 := NIL$_COLOR, 
                    x7 := sizeof(_CHAR));
    end_if;
    
  end_if;
  
  
  // Prüfen ob Text der Spalte6 dargestellt werden soll
  //-----------------------------------------------------------------------------------------
  if ColumnChoice AND 2#100000 then
  
    // Text aus Textschema holen
    pString$^void := NewDoScheme(x0 := TEXTSCHEME, 
                                 x1 := 5, 
                                 x2 := ExtVisPara.ParaTextscheme.no);            
    if pString = NIL then
      if (IsCon_coSystemLogging = True) then    // KaiAnd
        coSystemLogging.LogEventText("TitleLine::DrawHeader(): Keinen Text (Beschreibung) gefunden");
      end_if;
    else
      // Koordinaten bestimmen
      tmpRoom.xy1.x := tmpRoom.xy2.x + 5;
      tmpRoom.xy2.x := tmpRoom.xy1.x + to_int(aColumnWidths[5]) - 5;
      
      // Text ausgeben
      OutTextAlign( p0 := pString, 
                    x1 := 0,
                    p1 := #tmpRoom, 
                    x2 := pio^.font, 
                    x3 := T_LEFTBOUND or T_SOLID or T_PROP or T_COPY or T_MIDBOUND, 
                    x9 := _DEFFRAME, 
                    x4 := pio^.coltxt, 
                    x5 := INVISIBLE, 
                    x6 := NIL$_COLOR, 
                    x7 := sizeof(_CHAR));
    end_if;
    
  end_if;


END_FUNCTION

//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION
#include "..\..\Class\SigCLib\CMathLib.h"
#include "..\..\Class\SigCLib\CCrcLib.h"

(*!
<Class
	Name               = "SigCLib"
	Revision           = "0.14"
	GUID               = "{69ACC408-CE36-4693-9B67-22204E53942F}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "true"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)"
	Comment            = "libraryfunctions like memcpy, memmove, memcmp, strcpy, strcmp, strcat, etc. are enclosed to this class...&#13;&#10;">
	<Channels>
		<Server Name="ClassSvr" GUID="{D6FE9918-64B5-4BE5-B9D4-B221DE25BB94}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Class\SigCLib\SigCLib.h" Include="false"/>
			<File Path=".\Class\SigCLib\CStrLib.cpp"/>
			<File Path=".\Class\SigCLib\CStrLib.h" Include="false"/>
			<File Path=".\Class\SigCLib\CTimeLib.cpp"/>
			<File Path=".\Class\SigCLib\CTimeLib.h" Include="false"/>
			<File Path=".\Class\SigCLib\CSortLib.cpp"/>
			<File Path=".\Class\SigCLib\CSortLib.h" Include="false"/>
			<File Path=".\Class\SigCLib\CFileLib.cpp"/>
			<File Path=".\Class\SigCLib\CFileLib.h" Include="false"/>
			<File Path=".\Class\SigCLib\CMemLib.cpp"/>
			<File Path=".\Class\SigCLib\CMemLib.h" Include="false"/>
			<File Path=".\Class\SigCLib\CNetworkLib.cpp"/>
			<File Path=".\Class\SigCLib\CNetworkLib.h" Include="false"/>
			<File Path=".\Source\code\OsiBaseNew.st"/>
			<File Path=".\Source\code\OsiBaseNew.h" Include="false"/>
			<File Path=".\Class\SigCLib\SigCLibNew.h" Include="false"/>
			<File Path=".\Class\SigCLib\DefineCompiler.h" Include="false"/>
			<File Path=".\Class\SigCLib\CStrLibIntern.h" Include="false"/>
			<File Path=".\Class\SigCLib\CStrLib16.cpp"/>
			<File Path=".\Class\SigCLib\CStrLib16.h" Include="false"/>
			<File Path=".\Class\SigCLib\CMathLib.cpp"/>
			<File Path=".\Class\SigCLib\CMathLib.h" Include="true"/>
			<File Path=".\Class\SigCLib\CCrcLib.cpp"/>
			<File Path=".\Class\SigCLib\CCrcLib.h" Include="true"/>
		</Files>
	</Dependencies>
	<RevDoku>
		<Owner Company="sigmatek" Author="kolott"/>
		<Dokumentation Revision="0.14" Date="2016-06-06" Author="kolott" Company="sigmatek" Description="* sa34041: new Method LREALtoStr() and REALtoStr() added"/>
		<Dokumentation Revision="0.13" Date="2016-01-15" Author="kolott" Company="sigmatek" Description="* new functions sigclib_atan2(), sigclib_ceil(), sigclib_floor(), sigclib_pow(), sigclib_exp(), sigclib_fmod(), sigclib_log(), sigclib_log10(), sigclib_sprintf(), sigclib_filecreate() added&#13;&#10;* SA33745: error in unixtimestamp with date 29.02.2016 fixed"/>
		<Dokumentation Revision="0.12" Date="2015-07-20" Author="kolott" Company="sigmatek" Description="New Method FToA() added&#13;&#10;CMatLib.cpp added (sigclib_sin, sigclib_cos, sigclib_tan, sigclib_asin, sigclib_acos, sigclib_atan, sigclib_sqrt)&#13;&#10;CCrcLib.cpp added (sigclib_crc32)&#13;&#10;CStrLib16 added (sigclib_tostr16, sigclib_tostr08, sigclib_strlen16, sigclib_strcpy16, sigclib_strcmp16, sigclib_strcat16, sigclib_strchr16, sigclib_strupr16, sigclib_strlwr16, sigclib_strstr16)"/>
		<Dokumentation Revision="0.11" Date="2015-07-20" Author="kolott" Company="sigmatek" Description="new method SetSysTime() and SetSysDate() added&#13;&#10;new function sigclib_setsysdate() and sigclib_setsystime() added"/>
		<Dokumentation Revision="0.10" Date="2014-08-25" Author="kolott" Company="sigmatek" Description="* sa28421: new method StrToREAL() and StrToLREAL() added&#13;&#10;new function sigclib_strtod() and sigclib_atod() added"/>
		<Dokumentation Revision="0.9" Date="2014-04-24" Author="kolott" Company="sigmatek" Description="New Methods added:&#13;&#10;* StrToUL(), StrToL()&#13;&#10;* Memory(), Random(), GetSysTime(), GetSysDate()&#13;&#10;* StrCaseCmp(), StrNCaseCmp()&#13;&#10;New Functions added:&#13;&#10;* sigclib_strtol(), sigclib_strtoul(), sigclib_strtod()&#13;&#10;* sigclib_strcasecmp(), sigclib_strncasecmp(), sigclib_inet_ntoa(), sigclib_strftime()&#13;&#10;* sigclib_inet_addr(), sigclib_tracemessage()&#13;&#10;* sigclib_time(), sigclib_gmtime(), sigclib_timegm(), sigclib_mktime(), sigclib_ftime()&#13;&#10;* sigclib_srand(), sigclib_rand(), sigclib_random()&#13;&#10;* sigclib_tabsolute(), sigclib_getmicrotime(), sigclib_getsystime(), sigclib_getsysdate()&#13;&#10;* sigclib_qsort(), sigclib_bsearch()&#13;&#10;* sigclib_fopen(), sigclib_fclose(), sigclib_fread(), sigclib_fwrite(), sigclib_fseek(), sigclib_ftell()&#13;&#10;* sigclib_fgets(),  sigclib_flength(), sigclib_remove(), sigclib_rename()&#13;&#10;* sigclib_findfirst(), sigclib_findnext(), sigclib_findclose(), sigclib_mkdir(), sigclib_rmdir()&#13;&#10;* sigclib_malloc(), sigclib_realloc(), sigclib_free(), sigclib_memory() &#13;&#10;* sigclib_htonl(), sigclib_htons(), sigclib_ntohl(), sigclib_ntohs()"/>
		<Dokumentation Revision="0.8" Date="2013-04-04" Author="kolott" Company="sigmatek" Description="ARM-Ready"/>
		<Dokumentation Revision="0.7" Date="2012-10-17" Author="kolott" Company="sigmatek" Description="Changed the input parameter &quot;anz&quot; of the methods HFind and HSort to UDINT;"/>
		<Dokumentation Revision="0.6" Date="2012-07-20" Author="kolott" Company="sigmatek" Description="Added methods HSort and HFind;&#13;&#10;Fixed a bug in the function ItoA;"/>
		<Dokumentation Revision="0.5" Date="2012-07-16" Author="spimar" Company="sigmatek" Description="Fixed a bug in function memcpyrev;"/>
		<Dokumentation Revision="0.4" Date="2012-02-06" Author="hötant" Company="sigmatek" Description="prepare class for library"/>
		<Dokumentation Revision="0.3" Date="2012-01-19" Author="kolott" Company="sigmatek" Description="function memset will work with len = 0"/>
		<Dokumentation Revision="0.2" Date="2011-11-03" Author="kolott" Company="sigmatek" Description="function atof is added"/>
	</RevDoku>
</Class>
*)
SigCLib : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
  //Clients:
  //Variables:
  //Functions:
	
	FUNCTION SigCLib
		VAR_OUTPUT
			ret_code 	: ConfStates;
		END_VAR;
				//! <Function Comment="copy the string from the source&#13;&#10;to the destination array" Name="StrCpy"/>
	FUNCTION GLOBAL StrCpy
		VAR_INPUT
			dst0 	: ^CHAR;			//! <Variable Comment="pointer to the destination array" Name="StrCpy.dst0"/>
			src0 	: ^CHAR;			//! <Variable Comment="pointer to the source array" Name="StrCpy.src0"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: ^CHAR;			//! <Variable Comment="pointer to the destination array" Name="StrCpy.retcode"/>
		END_VAR;
				//! <Function Comment="concatenate two strings&#13;&#10;" Name="StrCat"/>
	FUNCTION GLOBAL StrCat
		VAR_INPUT
			ps1 	: ^CHAR;			//! <Variable Comment="Pointer to the destination array&#13;&#10;(large enough to contain the &#13;&#10;complete concatenated string)" Name="StrCat.ps1"/>
			ps2 	: ^CHAR;			//! <Variable Comment="Pointer to the source array &#13;&#10;which is appended" Name="StrCat.ps2"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: ^CHAR;			//! <Variable Comment="Pointer to the destination array" Name="StrCat.retcode"/>
		END_VAR;
				//! <Function Comment="Get string length" Name="StrLen"/>
	FUNCTION GLOBAL StrLen
		VAR_INPUT
			str 	: ^CHAR;			//! <Variable Comment="Pointer to the string" Name="StrLen.str"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: UDINT;			//! <Variable Comment="Length of the string" Name="StrLen.retcode"/>
		END_VAR;
				//! <Function Comment="Locate first occurrence of &#13;&#10;character in string" Name="StrChr"/>
	FUNCTION GLOBAL StrChr
		VAR_INPUT
			ps1 	: ^CHAR;			//! <Variable Comment="Pointer to the string" Name="StrChr.ps1"/>
			i 	: DINT;			//! <Variable Comment="Character to be located" Name="StrChr.i"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: ^CHAR;			//! <Variable Comment="Pointer to the first &#13;&#10;occurrence of character in str.&#13;&#10;If the value is not found, &#13;&#10;the function returns a &#13;&#10;null pointer.&#13;&#10;&#13;&#10;" Name="StrChr.retcode"/>
		END_VAR;
				//! <Function Comment="Compare two strings" Name="StrCmp"/>
	FUNCTION GLOBAL StrCmp
		VAR_INPUT
			ps1 	: ^CHAR;			//! <Variable Comment="Pointer to the first string" Name="StrCmp.ps1"/>
			ps2 	: ^CHAR;			//! <Variable Comment="Pointer to the second string" Name="StrCmp.ps2"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="A zero value indicates that &#13;&#10;both strings are equal.&#13;&#10;A value greater than zero &#13;&#10;indicates that the first &#13;&#10;character that does not match &#13;&#10;has a greater value in &#13;&#10;str1 than in str2; And a value &#13;&#10;less than zero indicates the &#13;&#10;opposite.&#13;&#10;&#13;&#10;" Name="StrCmp.retcode"/>
		END_VAR;
				//! <Function Comment="Converting a sting to upper-case" Name="StrUpr"/>
	FUNCTION GLOBAL StrUpr
		VAR_INPUT
			ps1 	: ^CHAR;			//! <Variable Comment="Pointer to the string &#13;&#10;to be converted" Name="StrUpr.ps1"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: ^CHAR;			//! <Variable Comment="Pointer to the converted string" Name="StrUpr.retcode"/>
		END_VAR;
				//! <Function Comment="Converting a sting to lower-case" Name="StrLwr"/>
	FUNCTION GLOBAL StrLwr
		VAR_INPUT
			ps1 	: ^CHAR;			//! <Variable Comment="Pointer to the string &#13;&#10;to be converted" Name="StrLwr.ps1"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: ^CHAR;			//! <Variable Comment="Pointer to the converted string" Name="StrLwr.retcode"/>
		END_VAR;
				//! <Function Comment="Returns a pointer to the &#13;&#10;first occurrence of &#13;&#10;str2 in str1, or a null &#13;&#10;pointer if str2 is not &#13;&#10;part of str1." Name="StrStr"/>
	FUNCTION GLOBAL StrStr
		VAR_INPUT
			searchee 	: ^CHAR;			//! <Variable Comment="Pointer to the string &#13;&#10;to be scanned" Name="StrStr.searchee"/>
			lookfor 	: ^CHAR;			//! <Variable Comment="Pointer to the string &#13;&#10;containing the sequence of &#13;&#10;characters to match." Name="StrStr.lookfor"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: ^CHAR;			//! <Variable Comment="A pointer to the first &#13;&#10;occurrence in str1 of any of &#13;&#10;the entire sequence of &#13;&#10;characters specified in str2, &#13;&#10;or a null pointer if the &#13;&#10;sequence is not present in str1." Name="StrStr.retcode"/>
		END_VAR;
				//! <Function Comment="Returns the length of the &#13;&#10;initial portion of str1 which &#13;&#10;consists only of characters &#13;&#10;that are part of str2.&#13;&#10;" Name="StrSpn"/>
	FUNCTION GLOBAL StrSpn
		VAR_INPUT
			ps1 	: ^CHAR;			//! <Variable Comment="Pointer to the string to be &#13;&#10;scanned. &#13;&#10;" Name="StrSpn.ps1"/>
			ps2 	: ^CHAR;			//! <Variable Comment="Pointer to the string &#13;&#10;containing the characters &#13;&#10;to match." Name="StrSpn.ps2"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="The length of the initial &#13;&#10;portion of str1 containing only &#13;&#10;characters that appear in str2." Name="StrSpn.retcode"/>
		END_VAR;
				//! <Function Comment="Copy characters from string" Name="StrNCpy"/>
	FUNCTION GLOBAL StrNCpy
		VAR_INPUT
			dst0 	: ^CHAR;			//! <Variable Comment="Pointer to the destination &#13;&#10;array where the content is to &#13;&#10;be copied. &#13;&#10;" Name="StrNCpy.dst0"/>
			src0 	: ^CHAR;			//! <Variable Comment="Pointer to the string to be copied" Name="StrNCpy.src0"/>
			count 	: UDINT;			//! <Variable Comment="Maximum number of characters to be copied from source. &#13;&#10;&#13;&#10;" Name="StrNCpy.count"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: ^CHAR;			//! <Variable Comment="Pointer to destination array." Name="StrNCpy.retcode"/>
		END_VAR;
				//! <Function Comment="Append characters from string&#13;&#10;&#13;&#10;" Name="StrNCat"/>
	FUNCTION GLOBAL StrNCat
		VAR_INPUT
			ps1 	: ^CHAR;			//! <Variable Comment="Pointer to the destination array, which have to contain a C string, &#13;&#10;and be large enough to contain the concatenated resulting string, &#13;&#10;including the additional null-character. &#13;&#10;" Name="StrNCat.ps1"/>
			ps2 	: ^CHAR;			//! <Variable Comment="Pointer to the string to be appended" Name="StrNCat.ps2"/>
			len 	: UDINT;			//! <Variable Comment="Maximum number of characters to be appeded" Name="StrNCat.len"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: ^CHAR;			//! <Variable Comment="Pointer to the destination array" Name="StrNCat.retcode"/>
		END_VAR;
				//! <Function Comment="Compare characters of two strings&#13;&#10;&#13;&#10;" Name="StrNCmp"/>
	FUNCTION GLOBAL StrNCmp
		VAR_INPUT
			ps1 	: ^CHAR;			//! <Variable Comment="Pointer to the first string to be compared" Name="StrNCmp.ps1"/>
			ps2 	: ^CHAR;			//! <Variable Comment="Pointer to the second string to be compared" Name="StrNCmp.ps2"/>
			count 	: UDINT;			//! <Variable Comment="Maximum number of characters to compare" Name="StrNCmp.count"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="Returns an integral value indicating the relationship &#13;&#10;between the strings:&#13;&#10;A zero value indicates that the characters compared &#13;&#10;in both strings are all equal.&#13;&#10;A value greater than zero indicates that the first &#13;&#10;character that does not match has a greater &#13;&#10;value in str1 than in str2; And a value less than zero indicates the opposite." Name="StrNCmp.retcode"/>
		END_VAR;
				//! <Function Comment="This function compares the two strings str1 and str2, ignoring the case of the characters.&#13;&#10;It returns an integer less than, equal to, or greater than zero if str1 is found, respectively, to be less than, to match, or be greater than str2." Name="StrCaseCmp"/>
	FUNCTION GLOBAL StrCaseCmp
		VAR_INPUT
			str1 	: ^CHAR;
			str2 	: ^CHAR;
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;
		END_VAR;
				//! <Function Comment="This function compares the first n characters of strings str1 and str2, ignoring the case of the characters.&#13;&#10;It returns an integer less than, equal to, or greater than zero if str1 is found, respectively, to be less than, to match, or be greater than str2" Name="StrNCaseCmp"/>
	FUNCTION GLOBAL StrNCaseCmp
		VAR_INPUT
			str1 	: ^CHAR;
			str2 	: ^CHAR;
			count 	: UDINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;
		END_VAR;
				//! <Function Comment="This function converts the initial part of the given string to a DINT value according to the given base,&#13;&#10;which must be between 2 and 36 inclusive, or be the special value 0." Name="StrToL"/>
	FUNCTION GLOBAL StrToL
		VAR_INPUT
			nptr 	: ^CHAR;
			endptr 	: ^pVoid;
			base 	: DINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;
		END_VAR;
				//! <Function Comment="This function converts the initial part of the given string to an UDINT value according to the given base,&#13;&#10;which must be between 2 and 36 inclusive, or be the special value 0.&#13;&#10;" Name="StrToUL"/>
	FUNCTION GLOBAL StrToUL
		VAR_INPUT
			nptr 	: ^CHAR;
			endptr 	: ^pVoid;
			base 	: DINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: UDINT;
		END_VAR;
	
	FUNCTION GLOBAL StrToREAL
		VAR_INPUT
			nptr 	: ^CHAR;
			endptr 	: ^pVoid;
		END_VAR
		VAR_OUTPUT
			retcode 	: REAL;
		END_VAR;
	
	FUNCTION GLOBAL StrToLREAL
		VAR_INPUT
			nptr 	: ^CHAR;
			endptr 	: ^pVoid;
		END_VAR
		VAR_OUTPUT
			retcode 	: LREAL;
		END_VAR;
				//! <Function Comment="Fill block of memory" Name="MemSet"/>
	FUNCTION GLOBAL MemSet
		VAR_INPUT
			dst 	: ^void;			//! <Variable Comment="Pointer to the block of memory to fill" Name="MemSet.dst"/>
			c 	: DINT;			//! <Variable Comment="Value to be set" Name="MemSet.c"/>
			len 	: UDINT;			//! <Variable Comment="Number of bytes to be set to the value" Name="MemSet.len"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: ^void;			//! <Variable Comment="Pointer to the destination is returned." Name="MemSet.retcode"/>
		END_VAR;
				//! <Function Comment="Copy block of memory" Name="MemCpy"/>
	FUNCTION GLOBAL MemCpy
		VAR_INPUT
			dst0 	: ^void;			//! <Variable Comment="Pointer to the destination array where the content is to be copied" Name="MemCpy.dst0"/>
			src0 	: ^void;			//! <Variable Comment="Pointer to the source of data to be copied" Name="MemCpy.src0"/>
			len0 	: UDINT;			//! <Variable Comment="Number of bytes to copy. " Name="MemCpy.len0"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: ^void;			//! <Variable Comment="Pointer to the destination is returned" Name="MemCpy.retcode"/>
		END_VAR;
				//! <Function Comment="Move block of memory" Name="MemMove"/>
	FUNCTION GLOBAL MemMove
		VAR_INPUT
			dst0 	: ^void;			//! <Variable Comment="Pointer to the destination array where the content is to be copied" Name="MemMove.dst0"/>
			src0 	: ^void;			//! <Variable Comment="Pointer to the source of data to be copied" Name="MemMove.src0"/>
			len0 	: UDINT;			//! <Variable Comment="Number of bytes to copy" Name="MemMove.len0"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: ^void;			//! <Variable Comment="Pointer to the destination is returned" Name="MemMove.retcode"/>
		END_VAR;
				//! <Function Comment="Compare two blocks of memory" Name="MemCmp"/>
	FUNCTION GLOBAL MemCmp
		VAR_INPUT
			m1 	: ^void;			//! <Variable Comment="Pointer to the first block of memory" Name="MemCmp.m1"/>
			m2 	: ^void;			//! <Variable Comment="Pointer to the second block of memory" Name="MemCmp.m2"/>
			len 	: UDINT;			//! <Variable Comment="Number of bytes to compare. " Name="MemCmp.len"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="Returns an integral value indicating the relationship between the content of &#13;&#10;the memory blocks:&#13;&#10;A zero value indicates that the contents of both memory blocks are equal.&#13;&#10;A value greater than zero indicates that the first byte that does not match &#13;&#10;in both memory blocks has a greater value in ptr1 than in ptr2 as if evaluated &#13;&#10;as unsigned char values; And a value less than zero indicates the opposite." Name="MemCmp.retcode"/>
		END_VAR;
				//! <Function Comment="Locate character in block of memory&#13;&#10;&#13;&#10;" Name="MemChr"/>
	FUNCTION GLOBAL MemChr
		VAR_INPUT
			src 	: ^void;			//! <Variable Comment="Pointer to the block of memory where the search is performed." Name="MemChr.src"/>
			c 	: DINT;			//! <Variable Comment="Character to be located" Name="MemChr.c"/>
			length 	: UDINT;			//! <Variable Comment="Number of bytes to be analyzed" Name="MemChr.length"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: ^void;			//! <Variable Comment="A pointer to the first occurrence of value in the block of memory pointed by ptr.&#13;&#10;If the value is not found, the function returns NULL." Name="MemChr.retcode"/>
		END_VAR;
				//! <Function Comment="Compare two blocks of memory&#13;&#10;(not case sensitive)" Name="MemICmp"/>
	FUNCTION GLOBAL MemICmp
		VAR_INPUT
			ps1 	: ^void;			//! <Variable Comment="Pointer to the first block of memory" Name="MemICmp.ps1"/>
			ps2 	: ^void;			//! <Variable Comment="Pointer to the second block of memory" Name="MemICmp.ps2"/>
			length 	: UDINT;			//! <Variable Comment="Number of bytes to compare." Name="MemICmp.length"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="Returns an integral value indicating the relationship between &#13;&#10;the content of the memory blocks:&#13;&#10;A zero value indicates that the contents of both memory &#13;&#10;blocks are equal.&#13;&#10;A value greater than zero indicates that the first byte that &#13;&#10;does not match in both memory blocks has a greater value &#13;&#10;in ptr1 than in ptr2 as if evaluated as unsigned char values; &#13;&#10;And a value less than zero indicates the opposite." Name="MemICmp.retcode"/>
		END_VAR;
				//! <Function Comment="Check if the given value is a decimal number" Name="IsDigit"/>
	FUNCTION GLOBAL IsDigit
		VAR_INPUT
			c 	: DINT;			//! <Variable Comment="Character to be checked" Name="IsDigit.c"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="Returns &lt;&gt; 0 if character is a decimal number;&#13;&#10;Returns 0 if character is not a decimal number;" Name="IsDigit.retcode"/>
		END_VAR;
				//! <Function Comment="Checks a character if it is lower-case" Name="IsLower"/>
	FUNCTION GLOBAL IsLower
		VAR_INPUT
			c 	: DINT;			//! <Variable Comment="Character to be checked" Name="IsLower.c"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="Returns &lt;&gt; 0 if character is lower-case;&#13;&#10;Returns 0 if character is not lower-case;" Name="IsLower.retcode"/>
		END_VAR;
				//! <Function Comment="Checks a character if it is upper-case" Name="IsUpper"/>
	FUNCTION GLOBAL IsUpper
		VAR_INPUT
			c 	: DINT;			//! <Variable Comment="Character to be checked" Name="IsUpper.c"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="Returns &lt;&gt; 0 if character is upper-case;&#13;&#10;Returns 0 if character is not upper-case;" Name="IsUpper.retcode"/>
		END_VAR;
				//! <Function Comment="Converts a character to lower-case" Name="ToLower"/>
	FUNCTION GLOBAL ToLower
		VAR_INPUT
			c 	: DINT;			//! <Variable Comment="Character to be converted" Name="ToLower.c"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: CHAR;			//! <Variable Comment="Converted character" Name="ToLower.retcode"/>
		END_VAR;
				//! <Function Comment="Converts a character to upper-case" Name="ToUpper"/>
	FUNCTION GLOBAL ToUpper
		VAR_INPUT
			c 	: DINT;			//! <Variable Comment="Character to be converted" Name="ToUpper.c"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: CHAR;			//! <Variable Comment="Converted character" Name="ToUpper.retcode"/>
		END_VAR;
				//! <Function Comment="Convert string to value(INT)" Name="AToI"/>
	FUNCTION GLOBAL AToI
		VAR_INPUT
			ps1 	: ^CHAR;			//! <Variable Comment="Pointer to the string" Name="AToI.ps1"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="Converted value" Name="AToI.retcode"/>
		END_VAR;
				//! <Function Comment="Convert string to value" Name="AToL"/>
	FUNCTION GLOBAL AToL
		VAR_INPUT
			ps1 	: ^CHAR;			//! <Variable Comment="Pointer to the string" Name="AToL.ps1"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="Converted value" Name="AToL.retcode"/>
		END_VAR;
				//! <Function Comment="Convert string to float(REAL)" Name="AToF"/>
	FUNCTION GLOBAL AToF
		VAR_INPUT
			ps1 	: ^CHAR;			//! <Variable Comment="Pointer to the string" Name="AToF.ps1"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: REAL;			//! <Variable Comment="Converted value" Name="AToF.retcode"/>
		END_VAR;
				//! <Function Comment="Convert value to string" Name="IToA"/>
	FUNCTION GLOBAL IToA
		VAR_INPUT
			val 	: DINT;			//! <Variable Comment="Value to be converted" Name="IToA.val"/>
			dst 	: ^CHAR;			//! <Variable Comment="Pointer to the destination array" Name="IToA.dst"/>
			base 	: DINT;			//! <Variable Comment="Numerical base to represent the value as string" Name="IToA.base"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: ^CHAR;			//! <Variable Comment="Pointer to the destination array" Name="IToA.retcode"/>
		END_VAR;
				//! <Function Comment="sorts arbitrary array with userdefined length" Name="HSort"/>
	FUNCTION GLOBAL HSort
		VAR_INPUT
			src0 	: ^void;			//! <Variable Comment="pointer to first element of array to be sorted" Name="HSort.src0"/>
			anz 	: UDINT;			//! <Variable Comment="Number of elements in array pointed by src0" Name="HSort.anz"/>
			size 	: UDINT;			//! <Variable Comment="Size in bytes of each element in array" Name="HSort.size"/>
			pfunct 	: ^void;			//! <Variable Comment="Function that compares two elements. This function must be declared as global __cdecl and has to accept two parameters, each a pointer of type arrayelement and &#13;&#10;a signed 32bit returnvalue (dint) which determines the order of pointed elements. The return value of this function should represent whether element1 is considered less than, equal to, or greater than element2 by returning, respectively, a negative value, zero or a positive value.&#13;&#10;&#13;&#10;NOTE:&#13;&#10;It is not allowed to use other class variables in the give function than the input and output parameters!" Name="HSort.pfunct"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="greater 0 if array is sucessfully sorted" Name="HSort.retcode"/>
		END_VAR;
				//! <Function Comment="find index of element in arbitrary array sorted by HSort" Name="HFind"/>
	FUNCTION GLOBAL HFind
		VAR_INPUT
			src0 	: ^void;			//! <Variable Comment="pointer to the first element of the array to search" Name="HFind.src0"/>
			anz 	: UDINT;			//! <Variable Comment="Number of elements in the array pointed by src0" Name="HFind.anz"/>
			size 	: UDINT;			//! <Variable Comment="Size in bytes of each element in the array" Name="HFind.size"/>
			pfunct 	: ^void;			//! <Variable Comment="Function that compares two elements. This function must be declared as global __cdecl and has to accept two parameters, each a pointer of type arrayelement and a signed 32bit returnvalue (dint)&#13;&#10;which determines the order of pointed elements. The return value of this function should represent whether element1 is considered less than, equal to, or greater than element2 by returning, respectively, a negative value, zero or a positive value.&#13;&#10;this function is used to be the same than for function sort.&#13;&#10;&#13;&#10;NOTE:&#13;&#10;It is not allowed to use other class variables in the give function than the input and output parameters!" Name="HFind.pfunct"/>
			pvgl 	: ^void;			//! <Variable Comment="pointer to referenceelement, is used as parameter element1 in comparatorfunction" Name="HFind.pvgl"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="a negative value if element not found in array, on the other hand the respectively index of element used to be found" Name="HFind.retcode"/>
		END_VAR;
				//! <Function Comment="function is used to alloc, realloc or free memory.&#13;&#10;the given pointer has to be initialized once by NIL otherwise you&apos;ll crash the system." Name="Memory"/>
	FUNCTION GLOBAL Memory
		VAR_INPUT
			pptr 	: ^pVoid;
			size 	: UDINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: BOOL;
		END_VAR;
				//! <Function Comment="will generate a random value between 0 and max-1" Name="Random"/>
	FUNCTION GLOBAL Random
		VAR_INPUT
			max 	: UDINT;			//! <Variable Comment="range of randomvalue: returned value can be from 0 to max-1" Name="Random.max"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: UDINT;			//! <Variable Comment="random value can be from 0 to max-1" Name="Random.retcode"/>
		END_VAR;
				//! <Function Comment="get systemtime" Name="GetSysTime"/>
	FUNCTION GLOBAL GetSysTime
		VAR_INPUT
			ptime 	: ^SYSTIME;
		END_VAR;
				//! <Function Comment="get systemdate" Name="GetSysDate"/>
	FUNCTION GLOBAL GetSysDate
		VAR_INPUT
			pdate 	: ^SYSDATE;
		END_VAR;
				//! <Function Comment="set systemtime" Name="SetSysTime"/>
	FUNCTION GLOBAL SetSysTime
		VAR_INPUT
			ptime 	: ^SYSTIME;
		END_VAR;
				//! <Function Comment="set systemdate" Name="SetSysDate"/>
	FUNCTION GLOBAL SetSysDate
		VAR_INPUT
			pdate 	: ^SYSDATE;
		END_VAR;
				//! <Function Comment="Format REAL value to ascii-0-string&#13;&#10;value ....... value&#13;&#10;dst ......... destination&#13;&#10;decimals .... number of decimals" Name="FToA"/>
	FUNCTION GLOBAL FToA
		VAR_INPUT
			value 	: REAL;			//! <Variable Comment="value to be converted" Name="FToA.value"/>
			dst 	: ^CHAR;			//! <Variable Comment="pointer to destination array" Name="FToA.dst"/>
			decimals 	: UDINT;			//! <Variable Comment="number of decimals" Name="FToA.decimals"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: ^CHAR;			//! <Variable Comment="pointer to destiantion array" Name="FToA.retcode"/>
		END_VAR;
				//! <Function Comment="Format REAL value to ascii-0-string&#13;&#10;dst ......... destination&#13;&#10;value ....... value&#13;&#10;decimals .... number of decimals" Name="REALtoStr"/>
	FUNCTION GLOBAL REALtoStr
		VAR_INPUT
			dst 	: ^CHAR;			//! <Variable Comment="pointer to destination array" Name="REALtoStr.dst"/>
			value 	: REAL;			//! <Variable Comment="value to be converted" Name="REALtoStr.value"/>
			decimals 	: UDINT;			//! <Variable Comment="number of decimals" Name="REALtoStr.decimals"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: ^CHAR;			//! <Variable Comment="pointer to destiantion array" Name="REALtoStr.retcode"/>
		END_VAR;
				//! <Function Comment="Format LREAL value to ascii-0-string&#13;&#10;dst ......... destination&#13;&#10;value ....... value&#13;&#10;decimals .... number of decimals" Name="LREALtoStr"/>
	FUNCTION GLOBAL LREALtoStr
		VAR_INPUT
			dst 	: ^CHAR;			//! <Variable Comment="pointer to destination array" Name="LREALtoStr.dst"/>
			value 	: LREAL;			//! <Variable Comment="value to be converted" Name="LREALtoStr.value"/>
			decimals 	: UDINT;			//! <Variable Comment="number of decimals" Name="LREALtoStr.decimals"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: ^CHAR;			//! <Variable Comment="pointer to destiantion array" Name="LREALtoStr.retcode"/>
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB SigCLib::@CT_
0$UINT,
2#0100000000001000$UINT, //TY_SIGCLIB
0$UINT, 14$UINT, (SIZEOF(::SigCLib))$UINT, 
1$UINT, 0$UINT, 0$UINT, 
TO_UDINT(77440046), "SigCLib", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::SigCLib.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
//Clients:
END_FUNCTION


#define USER_CNT_SigCLib 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_SigCLib] OF ^Void;
	END_STRUCT;
END_TYPE



//{{LSL_IMPLEMENTATION
//{{LSL_ENCRYPTION 16#800
A42DD0ABF342212FF2412A957A14F995E71D0AADD569E59B97A4A786EC05DECA00D35B31E9F71549C9A26A1347AB9621FE27E84041B8ADF3135E62DB2B8CBB101D9753C538B45B8045DDA98C4203E6498AB9D2323BA4166A5DD2E8C85FE292FBE38570D6
65A2607F95E36A0DD93EE008F652E0483768D6AD3828161662DE1E248E59F8FBECA189A594ED7ADEAEEECEA3CAAAA22BE6CB03FD678C2A4BDF8584F714B539BA5F55708F5553234F0EC79BA8B8CC9AA00FEF2F04BEEB0ADA087D83A9B1FD1891D6D26665
D04DEC3AEE93BDA1616529E312D2D3217F1127CC935366652EEE9332943E68F84CFB2EB43ED3EFF390DB5CAC1C7E9F94F5D5E3DC0E6DBB8F5FDCF7BC5CFF857D6EECD16C02432D8A019501E9B4B133C3853164AFA6DD31F35F3319E12933C23E6E6BAD6A
89EAF38ACB5418231ECB3DA3F9C91F3D03EE08C4C492DE416F8BCDFF60A93E0BC97D874D9CBBA10C6C2D238E6460EFEAC6934C420275CDAE73913C45E03E7C339ECB8E73979AF1A45ACDB59D6775EF9093EDEDB903338199924C73F5D68D3FC71C0E4B3E
98282613AB7F1ABA6E8BEE1543FDDDDA3271A6A4D53AFF2F3FF804E7EAB24C77A26AD96ADEC4ED06DA83286EF713051CEA8B8AC166A840BC7215C12A3D085F5F2BC93913AAA3BC65D8CD52FE96875EBAD3B430EB8ABF6BF3E42BC8119C67481F075BAA12
261DC48284D471386C0F7607E13784100DFDCCC7263C4023D8717E2CB765AF244DD262B10D09B7E6B0B6371C7BEF470BCC3C253A5D47C1DD6D596161C88194D0C7FD032A1C1D90B523C97FDCBA34CF151B36B2BF6B86B6F7DB3D6253A52F4E1A178B7DFC
4F92CB8BD8BF2607068CCE3AD074F4A286B7B44CF6C877378F8830544336D27DEAB9A00FEF04E7A5DCA7F22A96EFD49F3C0F4AB9B4DDBC094D020ED8AC67082D2254B4AE5A0FAAD117AD2FD70F9324C044E9762FB7D568A81D902CFE9A58654DBC7FECCA
A62BB6F88983D28EB30BA4DD35361E8AECD8EE5A0C450515A579C0D0CB00DDC30B0160C1DFA11E396461ADE30DDAC328B017929C9D68FDDE90BB25DE32F364A736E3D80F93B1AAA34DEF3B2BDE08327AA47675419645399D61E98C81667C024396BC4E89
0A417FAF5DDD570490760DB83338DA9C33EBC2C8814BDD1DC815069C14B4970C4200E5CFF5186DB85694F2A0DA886AA115A75A5D47BE4805BE14A4E67C49C8F3F58D920CCFB4572324880BC0491B44AEBF6925C3F2798D704F74FCDE2630914BB70536D6
081536294726AFEE95307A20D63DED973E3998E0E8AF23E6A7030F83A07F95929D3C88748237BF55A64941F3B9C7AE9DAFA0D57728394D1A64D7EA8DD6CAC67BEE2A8E9412848EF2C836701D24A79C0116E5D37E32416AD15ADFF2FDA31FF729FF05C319
1D2C5D104623C75C51BDB05726B4AA8B774A3EC9FAD6B82E53876FF09CDD72E66D486BDE12E9B538E9617FCB1DA3372CB79C22EF65269BA672F2B770D10FF7C253A2D19439F8041DA066158ADD8626CBE306F5F2B93C53E23A787BFD0832BA7520ECFC6C
2953D28FFAEA8334E4BBA0D97EA80CEF47AEE0FD0D8EF83D19E842F8B39A724D1CA66847749AAC81B5E9ECF2B6DDBE381024629449EE4B3A960A5ADF9FE3BB9891E323E0C2EC515A2239F65C7ADBF71129B20B31B95B2200B6D1349BE6598F549E5503E6
CC86FDA2948F64C531C634596A033540B2E320C24A397D19D83A187C10D3F06F70B65B6ACC075189E0A2D41619E8AF68745E47015079DC929BF2524D5D87B4E14943F11E6AEED6C703F15E86F1B43FD212BBA88E76A0A3D16D7D85EAAFE0B6E27F11C170
77DC42907BF60817D195C3C85FFCD5B46E399929A3FA10B7703F84FE27BD4C62C50E2EFF8E8826FCCD54BDC7966BE5446F66D4CACE14D5EB4384D7C3D8247B67BD9EDE47F972BD75222DC2865E21A7E34CF2DB6523C11C5CD86209C85825760BFB238875
7E2759E7F4331451F76C3D36094152869B637E2E4704532F375B56CE00ED208270317EB9A410644F89A688CCB6F1CDAA07AB96E7405D66DE1633801B5E53E5C8AD4BCC6CC00AA8E7BF62A8ACBCBE86AB4892B8C6A767ECB6C7798FB43E319D4BE742B64A
EDABF8034D7F731664B7D2ABA07F2B51D2DBF682DE723B56B045BA10C5363E9E674039A40AEF6345A781D7944C5DD7A1F7F5EC60EE4D23FCB7875D9154542E76A139E4FA7F7235D35591E30B9B4A5EB3BC640CB2E658F3171FE44D2969BD0B071A8F1990
8AC1DDA0E13CFAE9067072733FD4460D3352773FFB54C3E8EC711F0B5148CDC0F792EE774D7CC0A6AD8A74AEA9453A41FE3FA52614C81F7100EAFB859755B892863174B3BC0A57C977003653D6356A8C1B23EC64EE198B96CE8FABCBE0B0148B58B3BBD9
14C5AFBB9511CE84F9C62BDCF1615886BDAD275267F50221AF48B395AC81D6D5482819B4BF990A2869D13CAEBD2A78585637E22044AB0CF486F98C635032BF0892E40347F2BE11D7A82C59FDD18D9376D2B1D6DDE61573E77701250D5200410E91E152C8
6B829198ADED7DCD9744328011872BE7827F3A324889123E2837E0DE7535310951023DE314425650C4CE14B82B3CEAFF2F9751728806337FB6AFD306106AD93CFD2F2863883F359F4240A9C54279A964A46238C9659E96B9CE28B2D9B284BE3BB6F8206F
02F8C5ED203ADE123A35799E1CC722BDF08935F2471C120BD72A5CC8D6DD5A4DF374A933AFCB7F3C3EAB09872CDA16D16345C3591B28D30743529BD833CD4B4553D251FC882CAF8016BD4967A936293A40FB2566EAF918B555758EAB99B2DDB3256FB792
C6BC82ACF9826BE3E33E0D49BDC5B8A19F5D393B934EC9BAD74F9A54C702694C9D1778664193BF77225E531E52C931C6006AFFAE1F79DE8241237BC7B91E8AC5E34658CB535475D4571E1E7C485A8B1D939C52BBCC8869E5067F9DC05E14F78DB68FD26A
2617749F5D29920030560E7598B87D03829CAE26CC485DCD632326772D9B31F14E14D68878B765ABF1572676EFE63662E17CA0BC8E2D0B2A3E7393EECB1C76DFE2DF472D709E7BC1EFCDB2902559F03B0AE07E4327DF2FB59EADA756F8530A00E900767A
2DC4A85CB97ABC837A2B95B58AD9C32E306BDC38637A48C3A82DD1025CFE19FFD03D2C0C7069943926D9971FAE92E643122D2CC1D34E7B20FDB79850FFF35D3942EEFB653F910F3611D3A3809666F89E3F18065E5B1620F5C9E14D98BB013199B83D9D10
FD6B707EF2DEAC961619CDE5C1D5EF0187627FAB919DB51AE72ABD57F1E49531B1B4A15BC6A7C17D36C88447A446D57FA5F03A520FEBC2DA7EEB4169C9CF0BA7C47788AEC8E3FC2FFB151E030F9B182FC9B4496C4FC9257C486F01143119B7A1AA1404A5
366BDD38B267D98A1064ACFBA0E18B135CC39787F0EE66094DC127814710705C19A00A788FC6B393925A183DB5AF8CF99B02F7C3076B80EC14667A602D577C59BB869722830451A4E8FA687AF7C4D6ECCD26CBF94D6CF7CD141DCB1D53B8FAC2657BE644
140E53A7D52AC4DA82E1CBEA81418BF6FFB091C8B33F5F67D652E3A199D890B13DC10FE801505FA82979FF52301C0B74D2E6B44CC208BC91F44A35E9DA6CBACE99F8867803438718F2E473C891A27CAD6511A62655EEB42284833CA46DE8660E053D2C37
36EBD59FA041442F034564300C26CAA58E7684F84DD9EFAEE85BAA48B7FC44A85F152C64FAC18C5AFCF4B7AD0B45AD33A752367735BCCD8E4C310CA7FE2A5C4E8D277FDFB51B8AFB81F45722B839FA579809C9BDAA222E353F0D7D318B2591FB9AAA1CF9
38DD4E03CBB6360DAE89A8FFCFC292201807D69B6B6F2922C856CAFBC15B93C55E519CD5E2DF6E6F8D921CFD371B815E39BEB1D0F5C339A471994D10B0F585741551A7ECBC4061AFF46257008941C832591DD0557B7DE7B2D49AD6C8DA7EC4383106C97F
888275EF61AB11CD421C999FB324F6CC85F4CB473CE1EF067A9E79970D78C9FC09716A6997F6D643FBCAE84270CCA24B3912042B49B93F9D87A46DFF9E7D14375C6FE24F5B270911158ACBAAB62F673E982756BD47C54C2DC0D3E868335F988EEBD18DDE
6D5BD566C292D233AB1A37FEA286755BABCFDE8603277336EC5BB8E662CED383F69D89937ABFD42DC4E15ADF99ED0EA6FDBE67CB37F96F2E54254861F55C3A9C286404A76D281C799CBC51872BF6A56ACCE9D0F2D3AD3670D0D08524ED7E35EBA82366E3
4645B87DBA08BEA36E7797F5B6FFAF8CE409B36279F68A6F3F17640A0B459E1E7D36821005FA8AE7DA0227CACBEE75C6E2CED2B84C84EFC7930CA626D74E7BDDCFA2ACC49C97E00942297F688D4DBCF88314E369AEF50EC4F1A4284829DB926A04F4D051
C3E9FCA8C26C1B81CF66B251D2FA7FA1F088D20F6965314B150F9474B416DC783591840F2640A21C55CBC1D8CE35E1F13E68CF4F93FAAF5308D8633B3B5376E4C911D603A9FAA028D621C998C346A3FB43CC31711D61F42343B251BC2EA6B893D10BF3FB
376DB1D426AC328CEA2A616CFFD7A5C4F39668F4C48F7EC95F3C7C0B4C5431E1C9884B5F805D29639853072FB04BC84F4E635E938CD1AAE349892E9DE4C2248692DC9EFBA8A40287B47E4654FE2ED0A86297D4F79A58A38C22862BB0FC0A230B3354BE1A
201E01989B857DE4B96E53FF290441951798FA02A0FA06EFFDFCBF2422286CE48712DB0302E25EC7D9EC49BC7ABFB323A0C5D1E7641D8DE739D7C1FC39F72EF8DD04137695B9134379E82B6EF6C293B41F4618C7BF25B4DDEF38B2CF7F9087900C8279EB
3DA428CDB3183E2BAF2BD5874C40DE21877C006DF73E06F65C525EEB84DCBFCB7A5E1FFDFBDF0FD792B5DA629C1FCA819FF827F356E80D643E83C7A56D23975E815FFB435224108BA011B417A048493F17934C7D1B4B26A94C907B6D535B8B21F136300B
DC15BB87F07B4DAFC54DE22C3909C8BF47E5C28E6ECB40C819343E349C075EC691619A82AD08371A2611E9263A1F963959F822FCF410B6EE53DC215457C22B3FC5F734D4FAE6EF223BA80B38B75AF0A4A7F8E67E45E9A1FAE54C374E838A399F32FCBAD6
E461C52ACD4E37E4D00CAE671D54F523609094C87F3C1821317EBEAC3F945CF13A666EDA201AE33FE34890EAD9EC2E58210353D459E14DD58D2206092FEEB476D7CBC7F79279B28683FCD2B1AFF024B73273488E6F4A6895F34E368A45D486A25435AD48
7078F0B60CF06451BDAD8971185954E47C7F0CB759B5C3DB6899E0AACA5970F53263E89C04277BFCE2F9CBA55D619D0CB7E8388E6501B76F88B3876CB29FE40961DB2E2C5CF8DBF9EC3202CF47A665365BA44449112BDEF52F974CBE98D9327451C466B4
6B8F2829278F95CD6C549080FFE846E307457B938D1E62AB0E29E7D2A31C12142425E099BDF55A1F6CF01B94DB33485A77D36A385F0F9F1D8569E1F626A637BA4F9A5D6D6615046F61258B83D137B60B7A559C8AF2CD4416F700B2808DB0ED1C6C1BDD3B
855ECF946BF2D30A8F785C2C89AD6C8B15C150C09392913F8F25F899AC0664EC166F87AFD695992659530BD26284B7C9091946E1432C5E8D08E6C76EEECABB4702E783AF22D2A644EA6729596DA2F7FFF88BE96E5ACFBBCB5ECECEC13346158A19F5CFC5
110AEBD6E2E1DF3FCDC30EEABFE35C486A032F7798D9E9F0952D7DA91B04AC76845EB842346BDF88AA935C5E0F6CE76C19AA7D4826DE7964A0D63FC3AE6F89C1FCA67BAEB3AA5A9284FE4B6665677191F110EE049E82AF372590C128969D7C50391312C1
4B24B99AACF97BE74F60DAE9F82468E3E0C7AFD318F57090489ADCC7928FB0BD050C448E49D7F0D32BFC1C6463A4A16AFEDC418C816343E2DFD0789AB4FE49634D5779D8E040BAA36BD9A82B0853460ABB4AD703972DDA2F42C13A3519451CD71578EF5D
DE088695A09DB8255CFE94682BC7DBBEFDBD3325174D45BE6F8DC14AD244243CA3AFFF9D2B53E31380DBC2438C16FDC5EF51EABF06FE45420C77D15FD4645A01DFE6C118DC0E6FD268B4A39CF76CA700531D292DC75E48288C419EE460E20DDFFBFCF0B8
4F9FDF652E25064C39A3FB4BF9AD752F2539083AA1D95A3FD1F169F8E2D85CAD550E1B9351A2DD1ED4C978C628E2C355B52AA9A027AD0E889AC4359EA48AC622B639630327B50A41E220566F80503DA2C5CFCB92CC1E84E0D6EFA118C6889EABAA1C1676
D4A345CB9A602550EF025039D8D551CA227F74144A12F294201D85F734F9CE13C1D9A7AA2CEC6DC399F3F17A27FA59881B30C9C19D3754D296987178FCD7C381E9516E5DC128274845BA08708318D40F426C36AB8F6645D527719DF361E292A07AA48B7F
2FBB4BF15F1787F325AE7BC07425B404967B6669E332F487AA20556CCD3B1A395391F64E925E671684B8E01141A7601782B732CBF8D629ACAAF89580B51673230D055B6A37A05F01A977290E3904AA2BC2748CA0F260F89CE4628A5A7F498BBC7D5A67B0
BAD9EB907841674C695B25311494CA76D0A2657E71D8B792B65FA70F701F86B6468186EE5237D759C8793258F90050C3DFA8C82EE9CFE389386168299AC073535454F69FC1BB8C55EB9B2CECEDB0F9CBF11975F93B323A223745C7E1CF58B84AC82A09EC
D660026F1A13AFC5ADB8749318501FEC35A3D5DECC85886594FBE4EFE92BC587D2BFDADF8050FACD5FB2514F30EC5C211132C09517F4B448193C2F7FC8BA959D482427C8D0459FA08306043B1A7EC7CF414789FDF22BB71CDDBE81A86A75B0DAB26FBB96
A9BD8DD45E1E3206D43F68173F410F0004B1EE623F891E8371A1A128EA13782EBBCC6E043D3F2E5BB46926C75BA2754C7C63A259C42446B2CF36CC2B4D2BF17FC068FBD6C93DB4DA0DBC8EA4094806FB768AE22B4071C23BA2037054F3544487A43BDE52
F65A52A971723A5D7AE4159919130ECA90732443528E12DCB227A3D307840B7B5FD14146DD5B30C509F71D52167EAD17E66C9D494E54F4257D8A59A2E95F9A0208F4EDD22F63E9D84AAF2FFF269733B5D2DFB00AEEDC0369354B639452A6CC7BECD0D0EA
1F0C234C204E203443174620C9BBFA79548A12F67DD1D03B7870DC90F35A4567A896DBA17E0188ECC53C0C3C78E6AD3B2E99DAF82BAB3F7F2246626DDF55A28B73CB922A345AD44C042DFF7D9A108307B40E3E837C7633291CEB6F977898A593D1949099
650EBE48A3E4196A3ADFEEB68BA5B6372F77B7D313EEF2AF76046D4523F91548BAF2CC60E09CCFE5FE224C502D8218AA15573570C7C436A2B38263D2BFD36203ECF87EE9E6D1940C8701CC04A4D13EE9F8B765F23DF94418BAC58B0734A378FCE8443439
D79BF6A943312BD487656E761E6C28AE8BA2A68A8D398DB2B818F06EFE569EC53187FE486AD4B470FAA931CBFB6F49BA5DF46D8B8745401EB2DE0C17C3C7C25C78084C6EBCA49F95EA77E779679CE45A90DDFA9511E194217D7E6B5DC741EB20B045BF90
C3E299C21721F90A29301CE856B3BF2E469D023833AF41A59E687B4E342203A9BCFAA021AE1F451661FDBF4A277E360A81C92224FD1F377B03DCB412E2E72EAE3F8F4E212CFE161452083A705520FA333658F306367B815A4F7A0020E98EF181E644C177
5E1BD5B962BE924E2FBC334B935DF7ADF10B621AA33FB2B8B75BF9C1A4D36A6F70057D0006209FD1C730D9287C914141AFECB678D69F01FDCF21CCA38DFE02E896E748FF15456DEBC6367E9EB2466CFB9813E78281DF942D8334700A815CFD11729BED95
875FA875C95115299D50507EDD50E9C64DB16F4D6B74795D5568F63515D8A24B49784E130473C6234D12E3D7FE302599A88B4C2EA95BFB7AD478A4D443E62E7999868F75EB3A282A620F8F49192ED0258183562BB6D6A3BD9ADE65F248DF941C11AF4EFF
82ACACBF940D4648F77132ECE3CC733C22F8310145CC0D55B5F4E8A72FF1E070DB1812F33E99A0674BA86750D1A0301D5D089473C5FB49E8BB94FC6EFDC24E257FC0DA0E2A085C084F57EEC254505B687EFA596E4C617FA232FC4A0BDCAB356CE94574CD
BEF7288F36D9345B72BCEE28F73E2A32FF7219F266F3C3DC19484196A7675D214B25331805614FEB70A40BF1F02AC9E3D54F6993AC42AF8B826BCBF85EE609E2AB123122BB7007A9B419D793117334779F2E7E1CFE80ACCCAEE0638ACDD4D1C45ACEB5E9
08EC1DA523B6BB010BC725CBA2CA9FE8B23349529D77A439B70ACA97ED8FB7B98E415163CB81225245F295B9E1E456D99335CFEE79EB43294C893D9F722B89D02F5FA2A3FB6934168C1449A5BAF1D4CC8C12557CC41AB8272D43A38091889F042F57F8E4
E28D5893904009DAA0FD440C72726681EF6D5DE191CDF20E23AA6991438AC522A65CC6495A13972F90738D983503DF2CA90B5B1FB5FA350D9C96F44940B4CD812B48F601FDCD84BBA513DFF98623D3ABB20DB3B26FA537633BB0833B31B899D4913A47DF
86AD93B12F8260418354CF8E4AD72D61EECA6BDB3DFED98352E7CAD45FD358349FF8661BB3AD4070817E22A37C02D7DC40996E948E8231F4D19B38421A24DD0B1685DFBEA62BE4EF105947EEF89C22AAC40FB361A99C90AAEBD533DC5C858BA46F976EFD
3338DB90CF53AB907CE1B515A8C038E686FCC4E5C12D2136F2B52B91B066B1E90380069E17AC796C65A002794B3D15C408CFF142EF62E42ECB9D9E9E38B68D8C5CA063A681029EBEE775B18613EBE5EFEAC6E146BE5E6071F82BD2FC2B1EF413EAB80284
23AF86050A158B5CD9CA5FA8AB4146650AB35848632A59DDFC5ECA802605D8ECA2196E8BA630F2F1537A26D1DF052B943E73FA4C32F1F0CAD2E424814C2D971D37CE12D444BCCA0A5AAEDEEA901B76605A6025116339CD08703903A1427F24173525D204
8B996CA59C5833DC6BAAD316FFE5DC78E2E2233E52449A31DCC0C4D901BA90E28740AE42B4B87774856AC086C7BC619CB7B00AB129B509B8A8D96527FCB0CA01DEFC0011282A06E787562E39E2DEFE645D7D998684FE809CFD9F693698666A4A3D9B5B52
5C042FDF2107E4FCB47BD82B7BE6D245E74C5F278A3DFEB5F6E52E00D7A142F3D028CFF08EEBCB7A572D155078F17ED37A941795531C317D2E364968DECA1CD8096006F8DCCD3909A42A76B1DC5059575FDB852EAF65B22F9198F280564C4DFBF75F65A9
E5C930D0A0D5DCCFE69FA28BB2B3EA227CA15A6CB4E41CE0D409D81C4E0CF8B36A51E6402F805D33D68DAB6A34A877AEF7ADB895E04E3D39532DA656D08656B0495C2C184EBB10A15B23EEAF229EA69805BF9F77A49D1FDFBF87C03DE1F4094E60C092C0
00A2191BFB77A553CCEC924885A1D61EA192BE1672AD0B5820BA32ECB846890EFA676981142D385682C9FC3CF032D7C080FCB92D0068C8443770FE7DF3E531E59A920F5C6170926308BF771E2720B4A4B580FACD7CCE38E76580C9A6CFBA94226B94F290
ECE17D716FFE6052940D91290533EE0BA14E118CB8C4BF90D1CDB8643D2F2D82CAD4D132BB8171907FC6BF98962922A8D542F15B60213CEB678774DBC380F5CD6933063B0783DD5ADCEDFF2B05D7FD3CBEC7DAB0B49E054511A2248CCD6007E058B833CB
FC66094E1E53CA289BCEF2C94F90F7959451768D88759818C29FCDA5D0587B1A6AC61F288A0EFE9D070C6D304B275C805B56E6BE4D49FB9EE2CE4A1F725E900850342B80C9B36D71E57F6E260D1FBD1B9B886D84DCCCE98CD8930A19814CC0B8D916D5C4
2CFE13AF85B48404BD8F1F995483F2C3029DF772CB6B51B7C7AC3DF0DC90DF667A0BFEAF5E3AFE9F06AF5376E0CCC2A1A02815CA28CA8FECA39C93BB1D1B019C80ED70DE3B06CD8302A848D8942D965B6DE1FF3A595EFD04FFCBF1A926ECE1A234C92107
994BC07CDCFB333EA12B4EDCCBA17CDE1CF410DFFAA55152569AAA1FCA87E0D0E208E9A0670BC0912CFE198F686B2E58119738A8074F6DA26B0F8652644F4389CBB89FFA7FF8DF559CE660ABF95B0F369E3E1263AEE36E0B2B71F7E973FEE8F264523CE5
52B9BC212C31259807F48337E4E2B86D00479AD5CB35CA0E3B6AFFF1249025F383E77437BEDE649471BFE2BFC65576C48984EB4EC34BC058D2066A5115FC6404DCED681EABD76EFD55AE69CBCFD2B1ED25275BF425E363CDF54132CDAD459B89BCC596C6
76FC685A5AB7D8ED77ECE668F0A172B833BC1C5390C68AB7E94AD540903DD7C14E6643463402E2754FD1CE89E2B8F2D8257D0AD38DCADB605ACFB4FE19B715C03D2255151FFCD5D9E700F0B130E283ABA115C2FBA80A6CCCE6DD07FDA82307F1E9E9AE8B
3A533C1CACC629CFC96E026DB8FAB0EB9F09D322131A62BC28628152E518E96FA28BB0A9BF7EA43976E86E10323961B4DBBF6C46030F6140E008BCB12E3504E314B8DAA5717C360E9F686A9B71D638F9DD18B95783E8E5FCA7156CE58C1B5C6784B574FD
A621F58B781679ADB2DC25D9689D082F305534F713F958EC1778B6150BD08F12871EA48D5BCE6935BD117E3FD301AAEDD93FCA01C2DA24DD0670B745E215565FDB452C27BB57A6DD36EE61315B662C0E43E516D09163A92B4CF1B426A8B4F0C1AD712508
0A2D1C504E58465E38D1AAC57A5210635AC55063DC21D884E4A122E5D0513CB830ABAE63E4DD3BCA7D6DF5869A2FB451DD190379D41ABDCC7394D563C777D0005A27FA25B1348B5B4A4520ABF5B3CD3B88E358598F059081EFACDDB2F4CDC32B30E36955
36029AF40D984456C331EA3FF3BF839FACB97C58417FC66BAB5062AC1CB801B4E1E48864E60A2FC29FEABD2C356682E0B2314DDC1C7777D786BF5916A0284BD1EE89000C90F7ADE87EAC47A78CCBE0D11C7ACDAB672F865733DF2A50052FF33E13ACB741
4520E99F875BA9AC580C9EBF548DB3B9F180448BC645B0621FA4ED54648DD41F0323846ADAF90AD2A72363026A7455A8AB5B6033BDE54DCF539B0FB4E159CE59868F2947C2273A9E78727C9BF27B993363C78487DDCAAF15E3D3579D553CF7CAF4752D6A
007D620E3880DFADD7A62DE27520452720C735C9E93E03BF81B63DD1ECC11FAD74219EEA1316DF30317295B2DD5A030674AD62CA61C50D72B27FD2502BBA55EAB4E2EC1BFE20A24F20FBDDE3A5927F898FC54BAA093D643565D3229B7AC93E2E6EA3A4FD
D702D3E240822A715DC4D02C197A660411609AA13523D2338D985828EDBAD43FC6E44AF9C916FE157F261959A3923736C5C0CE6F3E686D38417004074528CE8BD3FCED00740C92807ACBB76F48EA4B267C96431CF6290C7682A82AC8DFCFD292B0D06D39
D8DD5D23BCB7E087E9D45D02EB398641DA215504D1F73411258F9B45F16382A6E0281B7B16F7C9940DC8D85EBF187D52584DF4BEDE852538E78204AD967AC4C14811D0C7C5E8BDCD0E93D67DC6699F4F51B6CC49800D33892314E0C3C50EA77CCC85908F
5B5FBF376B6E783D4A7DBFF47045C1439E01C2DA40AF878CA6F23016792664EB0EA2D34D1D5264600D4DF68F3354B37A74D1D0C3C769721019A3FCCC59DD147CF59951440075010B6BDD682F1CC2462015B2406235B398D29803F1DA2864BA6DE8EA92EB
6F2DA1954692109D008D6B5EC518BAC0993EF38580C2EE0D5DEC0212AA51B9F68DAD04023DCCB36EE46EAE8A49F9DBDBB7B2F8FA0FEB662711CDE0B4550C3759A53100D997FFD48B282880EF55CA71635692A9FD8F4F5CA42B2B43C1A407262846891431
D6CCC032002CF024EAD61E5A94E57B8E441D72C481A3CA0F0ABDF0E1B7DFB3D5CA6334128663EF7A8BC635EE7DB7D128E1619FC0D61207B0CC6BE1050B712FAA7C2695EC9318DE5A490DB8BE493F8A76D85FB1D195A69A8E5A2CB6B140E44DBD59CE2BC0
C475F67CE8100E313348597B86804EFB9CC3E248EF0AAC2017EDB7DE01EA2B0B2A0882A51A8B4637653F7BC715AB046634B442683A612B81D1E24683CF49182B11F2F67D23719F9A3040CB29472F2270CDCEC5054BCC0B4D0E20C0F57AE2E072EE0730C6
C54DFB02BED5C7E64719113C17448DB3CF2EF6026D5786704BE436301EA5A8AAC9BBFB367E8B41861E513648AAC6A835331E2C0C85EFA60C4970BD10FAA37938CA49C14C2DCA830FE2932E3A2E54E899D72E980762D5484DDCD52D230EB1EA47B7DA7A95
1EC11B35C1DEF230ACB97900848C57E9AA1F752977D16842007ED94672C20FAA3191D4E4A7D70286DDF2741FA076D71E4781C469ED938D2423205884B1584D1CEC8CAE4C1D0180DD923A078B4FA68AEA3B727FB02C2BBEC46C71E504AE9E54D49B03F40F
DB25AFBCF829CDC88E4172F70DB132981866C32818B2F6596F6C2FC47C6EC4C212C4275A23A5538F82AA3462604AD6D2029CF2D8336873C5809CE021695029E70551CBF315E83A00EA4D39DCAD4717BB80176D452D58CAA35E2D37EF90B217FB0C98AEF0
54710E3A888C1B8423D471BB6F44EA9124843E3A41DF2DFF6633991F9D79DA5FB83878C922AE42C592AAF76D03EA30B53875A9A5CE6C07D3C465807F5B11E5D425B3094348282CE7FF26AB6D261985D90AD288C30E8DD2650C5EE1FB2D7175C65F556822
022E85009D38AFB669E646D502EC1C74088D5C52A0216D85EB6E447B78883A84049C7855C6CAC643C72696A4F43291CA8F39B29F7CFC5DAF1F6CFDE91DA3F2DCAAAD3D50A0EF82556E280282254FA0138E6E1BCB75C73E5367A94FBA2DD82D02559E9546
599166D218308CB3B15488C803C3B268F99F2BD5B97396289357AB225D102DBB7D8E6A2C3A58F95882EBA25F169259D4429C3F19070B76AFB35A88A4124FCE11FD82C3FF989D1DC541FFA65029F0CFBE6ECC788F34F4A48CBBCDD5F1AF65B100D418D7A2
27623B1A5881F670AA4D0D8A9F0B5E01440D7A5A7D0828F899C781DC89A7C3440EB7F4A6704F422D403461501D4EDA836EADD43E8016B2CBC8B9968A6E86771570E83BBEC79853F04A34C18D920B1A6C92017ECF58278D59C27B5F0D5686D4D1600F7E16
CDB67D2CB8465FF486C19A3EE30E5CD5CA3AE78DA1B425B19C4615B236239B4FBCBC6EE59E324A00154A9FCBFDB0EAA74A00C86AE29774F09E950BED16DD2D289CAC5CB5E146F5FE794366E31A2FE196584735F3126970D4CDEC4FB71E2D8270865B8B09
045DF7C9C3584A33469D4A5EEB3995342B3B6A8C685374A0F0FF3A89C40ADAA46B0DA996729F246EB21CF2ABEDAEB71CDCA4963513C7B4C51AC75BA37A11DB1769F49AAEEB08ACE746C8646309F69E745EF0E5B928F17A4D26D94D27F9DC5C40A9DD882B
7641673110CE2E900261347233F0E6C0C7428FB4CA27A9FD3EAFB2665BB3D9455D9DFE1611A685C0B5FFED8BA0FFE5F7A7DE55CC12FFC59B282FED5C1588CAF60BF1B82B39678A00A81A53B60EF055D2DBD53A4D1398B2B5F7161EF6D949661A92CB57A4
9C8AD8D474A4A0BC36AE81F5AFE5E3524862D42A71778A1C2AFD22A25ABC856054AD3319484A87A3CBFCF0E07523158905F3076735E1101BE01B5167469F693B26277883D17FE7F38DC9935A65D64FA6396D53FF5080CB19CFEC1D7F9B0E2877B738E281
A54FE22E65B19F10F19794CE0EA84EFE8C8DE2527C7286071BA4008E65A27E19E673865F3A5D46782E4BF83F96C46A810A4265A6D150033C1C81807C110A615185B07ED27F34503FB1B64EE11A28960DC711DE373576DD3D1D145612E5B0E4CF53F322AF
60B931F87033B3D42DE94A9FF592923C022A812752372334E381FAE198AB2A275647DB89F9814E446B1E2B06D85A2DC0C7E0AB3F0B298FBA4B38C8160DC8A0A78CED32657B756D3943F45D3D3B19856E23AEB755C982CEAED9A0DDA6ECF882F120284572
83920A6A0A035E126738C4B68DCA0FBA9D71A54E3C3F36D67894841C995B8080355713524AB73018C6334C3807643D8B4A8D6A56E49266A90D32E64A76110ECB69216FF80D704B1C0A7F627883F3E065A2E2C96D0C051AA5E38A62004BC4E4717553213B
B3BED45BD7601DF257D35B21717B8FDBA441EF0D409DF06A10FF2A1D30B56751EA188DFEF18FE440045DFA2387C2D7331555708F1B1123BB6E641A72C1F214C9BF093B4968C48649BF47471B83ED079A4E3F591B44AAA5A22F73B5020D107D86A10D1007
B1F119FA7418DF9EEE3896CDE08E86335512482597EA0B34E58259AD27A36C27E4195E55E8613CB0078FFF8BD1A33F6400D11BB72A8E394164315F7FA12C3AD594D7DBD7CFA306C90840E087F80E2BBD3FB829C14EB4171A132EDEAD5B07718A7CC72CFC
CA91E5743EF9741DDEEFE3E7CCDC0A2902C1D25DB02D9B26D87D5AD4DDE3C2F235A236EDEA5BAD45A552DFA1AAEC088A6956F285914C3A860E9269ABC1490C113A6EC141A90976D3D9FB57208AA1C6BDFA56A5D4D51A8877AAC8748EAE2E664E1E86126E
CFCA59334A55A777FE9365F8C96CC80AF3CAC323A40299A1F90EB2DA83C47E29C0E44C1E51DB5EABFE854FBC7D17C37761015DF5EAD5BA0B01EFFCD0320F5F62424DCBD66AD771DD69F87F336E995A3B60C1324141F0B7A74F614BCE746C45E939771E2F
E5D8D9311AECD69391A79E3EB31BD8FF50C98748D15D7E070B615226DF12D76975B969153D8EBEA0E9B169C9D540E8FD5AFACEB452FD54655694A0B23EB274CA2B992314059449CBABE4EA583CF64CC0688CEE17F879E89DA5F7EAEC892DA3D127465062
47F1ADA2B7D5D3C2BFED008C7C734D0CDF0B8B7E3458EA6284F140699387AC618041DC6D2D526D04A13F8783A5E8545293EC30E9F89D0532837CB47EB0214827685601A189717CDFD6B748062B18F24F2C7CB734CA5A1C00AF73B4002D273F431FB042E8
DCEB948AAB947899A41D5A34E7F5DADAB1DFB3C42A8CF8660772FACFF611B255A3531B85F1B301BF88552F923F5211DC6BD7316C1C6BFBBDD8E2E232093D221812EA74423212BAE531DC5DD5EBBF387726D36AB20DE63847E0CA43051689705056EEC6D4
A07FA331592A8AAB01B45A1B000827FC59FEDEA5DAAA083082F4EF37C7A6DB67564FE306E180AC2AC3D8D9CAD4F85304170F5B8AE633D9F18C538CE0D3D4DD146055690F33DB1FBD8655516279CEC0C383B13A731111D07C8AE0C023E6925BEC0D9BDD45
9C3D0237388B44947381ED0150C6B8A048C074D613987ED2548C615C7C5A79735ABF2EB9802FED4A0A715B30134640206D1EED5377103747756472293FBF116D73FCBBA763A61F2E7CE4692EC0AC785E616D807E8AD12D9E11C66536500413A947CD4257
A01FA53817C683DAEBA3349C42D07CB2515B76EC690DCC4A128BCC200285F366E72E2831774FCD78E361CF0202E592FB22EDEA202303842FF05CDD4E101B864D0902D7BD96E73432A2905909EA4B7389A076087D07683A4EA511744E8F4440532D39BF41
B660D83DB0345E365BCB1EDFE8509FB572B320E81486B5032F54983B1323A6EC4861DE27465892B38736A9DA621F3F46AA4A6A3E7E6D64469C3922FAB013FB3D18963FD171B84BC03C6FE41C71B890579BA51ED4F080C647A55CDCDDE5B6475BC71EE3BE
FEE459241AAEB83BCC18F746242CC48A89067B18181C50C48B23954A49EAC7DFFE00A8AD0E8359C9616049D41BA93156064A3849990395E783D8E8B4AB96A70039F9CCA47F312BD9CAED0C86260DD96F15F5DCA5B478B4CF4F3CF7CDCAE1FB7285EE0815
40463D9B2B65EA5EC1B8818FC05C005B2B641C76C545BF563086553B9A7B5F724D955D4BACCE13BC8F931781EFC4D7295C469DA61D8AF08E086A153D92AE58340DAE32BACE6290CB72D3C39003B01866C15EE5DE4D6BFBAC2E781DB20DEB083C163F0E0B
A39F93370543A8D3BFF24297D390511043C3B5B2D05E07952966BC631A8BAED2967E0098B572672D5609174008D71E3D1FE234EAA4C5ED18A425AED2ECF9B5EA55364CA867DD2C25ED942D6C2E66ECBF556D5416670FF2B5191B3F2DA0EBB7C3A89A6115
D8B918D279C1BC43BB734166B701701B2CBC365C8EA9294010AC8B503C03E49D41D494B488C45E592F6F82BAAC3D6DE6900A59B37A3871C2FB624C759E83AACD59587F4DB501610EA93B48410F19F322F4E7489CF60E719991CD320246845A5B5AC1B6E2
6AD0AE5151355C37E5152AD885C55179B664C3402949B8A21DE115CF20DD58D3286F6879E3B83BF5818847DD40F48B94FA2463A0656994D40561631434A4AEA1A8F7BD84189CB0342CBA545F5C8EFE1FE46E2CEB08021BC9BF176B423470C171B937D32C
84FF286F8A94AC518FFA8E875E5C91BB53F5BC8102DA8C521CABD1E4D07E93ACB98246D2937B07E5822D2F81E4CD265FC2392277CF817F00957BA480E6D7FB1D6BB723F7D745D145D460C2F77E4F53120B171880D5FC7329FE4432A9710F2E7E46B3BFD0
41766028067200FF8B75AC4CCE7ED7D2B47F4D7C58D9EE46DCD7295B08D971B4EC233F34ACDBBFEB5E61E5B591648E7F35F90E9D5199BE141A53C29CD12FD8F8D88C840A599B3A837EDD3005821F9C9BA97FA05925A64008380315C9BA68495BA1D867B2
6502E2621E934385712F22C837A7268EEACBF968F0978EB6E149A7C6087CA12AFEE398D211320F270FA3A2D9CB218BBC876208B5CF89A6FF612B772CC2A83C5C7BE87B8F0A319A4844A39A08D54D47DDB5207E49736593A1914B116749CCDF19AC752D1C
9A818FD4E5D2CBCF15AFF2838A3547B0BC3DA60AC43D6A16A48D4D38FB9D565E55170BA35EBD985D042C931D187D25268AB74828C9120D1CD58E05FA6EAA5749B88C33FCD7D00F9453BE5924A2D8B3025242BD79B4E777490F6A650E5090FB5CF05D8472
132A81A68CB7B6C1EAC358A2111C8D664C5C8F003649FA60B4697C505AFFB5AE76E99D2EF9E8863A4F45E5B7F4E08F94744333339568367C58DB3B49E8EE0D1F380379D06352BE380CE5C36C36E0AF43B3335E3A60EADCDD79681065DBD419626276E78D
32CC608FD48914C6DFE4AD689913AFC62E5B6D5B0407C82C1FE3728AF3509A3E8619AEF8584E4277154F20A202C944626BE5EF847A673FD38824BBA993DCF1E0467728BC731D2E22AADF5F7EA02B7CE53C22C2443152714384FE4705C178A1FB1281BF1E
A31A84DE739F50499D2ED0EEA4D6D5C906CBD85A523965D1729F9907A1C2B85012358604087DC9D4FB14F71DF62224E2A17A513131972B3C6DB8171FE13E176301DFFEC99193755B90615F146533841230CA0C730D05446FD78620D885D3261CE8AF3292
A190FC392A8E0EDFAAD3A9B008A7CBD8D088BBB73398043F7ECA309D66C8B1DE43D9975B85F73AA63C4EA0C0DC53C7660FCEC7BD4EFC3A0DB0FBDEE8E8CC2F66F24199795A106AA4518E980FED5818A16316A4E5FEEE6416A2CC813DF9F90E4307CEF207
DD82C0689B204771AD458695B7C4EF546D0CEEC5C814690BDC7BF521EE5EA7040D13A8F3D147F33D0E6DF3B3F472B009043E30972517604E44B431C13CB514A753BB39FD94122B2EDC2D9062F3DC61305BD9BE91E9240384B76A9EF2E07E9204C0CFA39A
46E551FCDC55E73FEC0C9D2897BD805665B1714581089F04CFA2B9F90685FE5724E2BC799CFBF6B2938826ED7C6B2ADC644CD63BD2E2114039338AE38381D011C6DBB7431267D79911C74231D38184D5401F28B1A752F8FA8ACE51DF738141F54A900D65
6121AA6BB79D293B23616135514C3EFDD0A7A1598F5333E9A17260E479D1BCC745096A5E45BE32DC55BEB71B76B40722A537FB97990A0DD46BE6030756F0BC444A5D214F8507AD821E8E66AE78F3B98E56C24614334A39C389C972FBC27047CB107E2BD3
81C8FCE1386DC11270E3EBD45807A78B88BBDBF1CD07A52F130E47DC440E35E93F3350C2AF6E0E1B6689D1BF74260652DF44834A4510522BD444C643F60C0B695F8F56B6D4BEE3201FE2614F1ABC3A0B13CE077B22D8DB6E54203734E46C1963C1181B99
222FA4D588B4F8CAEE32FA8910532FD09B50484A5765DE07BDA17655974F3751D3A4D3D30AC7F4C0B90BA28790F47323BF813D79BFC7180934EDF27EA0EE0AE448E606AE60899F48517340AA87459AF950AAB9F9D1334701E3BDA58C82F5B3689A2A147B
5A29F9EE09FCE98F7219DEAF100129638AA968B8F5EE734B41229B8F34A2793A4056F4B839D08C0B71D9C929B9E7C2F7A93386E9ECCA99EC274E34DBC3FD80834FA83E1A70246AC9E6D08AD99DE665A001DEF4FBD647FD03A458A84BB3BE4AE59E7BDC73
30EE98A4BF0C9BA5C72AF635FC676D02A7088E14C124B04676353E74DDCE7DEB0BC67252929B5ED6C00471EA9C17EEF54F5B795770E4E781DCDC8AE2FCC71E1DE80D9FA91C4E6B98DB5C85F650DC71B83931A0864C14F5772FD4D2A2508F6529A8F02381
44411993A088358973CC6E777C8696D6BA3DF57C89FCFB95703A3A09CB2AE2B8EA8B6B40E7402F41D4DD98EC26F053927E2CBE88F8D4E4BD1E36A62C2863BE0CE17A02B9FCD571268A0A560D2301182C8487A076EE2778F34B4C32297C6EDF18D34F468A
B4D32EA3C631A391A1357F359FEBEF863508E8AB83AD412E1F8E7027DA59D2099E78C33D54EF184B90E37E6E399D6F182DC46FA100FAC0AD75DDB044DD3712BD695E7E888D15521FE5C9B4041AA666DEBDD697CEF3FA44D7B15B4C2CCECCA012863776FA
6F0ED44BE26CA877EF40396BB1DD9BA88489775CAFE632BD230519168512440B3F3AE39C38D4A5EE58AF2224CD21992C1E8514D489A73DB0287F50357A05447EDFEEBD1EF21692D67EB77B99B258AEB107A039CA0D5BBB33BBAC7EC504725254CD2B72B0
89063BB74B03223E08615BE875D8FC7EA4C853E7FA5626DF7AD3B34681EFF8DAA4F562D2D349489F59741E8ED5AF9AAF0962B4DB9BC945AD118CA0B2CEEADB6B9CCBBFED93085C5E4AAD9828BE5A382C7B11B18482294F72543E10561C8DC51C4D3EAE31
5DFAECF31A8136387E2A327E5CBC792BBD54FBF86B02D2F84E088E53187C2EBD0A62FACF8F1BA9A0499854EAA11DFD118FEECF53C8BB18C80BFCFEED4F9E6983CF0F1F1AB26F07BE1EE281858A437D5E1E9D7899FD70F90BD6164FEB813EB1E9700BC218
DF184A629D2A2CE3397444D47D8435B4491936AA9691FC9ED8AB3E2E4639A084CF258299FC1B67743576032F62DDCB29299CE8A7FD81C2382DD7242D3BB3DFF1F12D4930393FD6D38292DE6FF78BD414635F47896B5903EE02FA972B7F24049C7C6D2311
5654DF5A2F00574599B85C4ABABB74902554AEB145583E40141DD4937B7E756937BAA87EB8AAC9C13A83BFC01D0DF568E29290D4E654ADCC9E1D584492E5BBC3A8BDE46FAFB4355E344C1CE6BFD62183BC00E10E89FC952032C3D5C47B694F9CE7E6CEFD
5F41447E8C3407F409EFDC8ED512A933EFC915D8F8BFE25B27E3D4BEC9306CB446B65F94405918BBFD4DDFE02811C16E77AD65552EA5CF74FBB1727BFC35E028F9A1DDEFD76B1F5ADEDB589875873919F6579669F661673DB2E41CAC37F09DFB97A4F6C2
7288E456FBE71F8CA364C96E05CB35029FCF36656891F2E226D69FC841FF4E12078A6513814F32E6FECB6F76652E501430B36D6F05AE5DAD36CDC8CC14983A3EEBFFD1BDA73C2CD0A738AA5BBC74618ED47B02024A0D23C8F255A44DEC8EA12E44B1D8C0
706F3ADE2E33D40ECFD183609E32E447D82C60E1F25A20C985E6AF2FC8B48EF7EDB38827AAFC7075F8EA50EE4290284C714A8CDC1BA9E517474BAF386CEE5069E8382AF2
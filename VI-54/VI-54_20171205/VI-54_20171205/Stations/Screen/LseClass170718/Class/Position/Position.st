//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "Position"
	Revision           = "0.0"
	GUID               = "{44664A78-A9B0-4FF8-B99F-F84247D9D789}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(540,120)">
	<Channels>
		<Server Name="Nbr" GUID="{A552B991-A3B8-4C4C-9CB2-84DF98DA7A54}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="Rpos" GUID="{448B0D7A-291A-4B24-BDB8-3D16A65E7BC1}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Xpos" GUID="{4F497005-EACF-4461-A6FC-A605E1124A9B}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Ypos" GUID="{8963CC5D-08AE-4D39-A49C-73AD94910317}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Zpos" GUID="{AF43AE41-E156-48B3-9F63-5A875BE8DA69}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Client Name="Next" Required="false" Internal="false"/>
	</Channels>
</Class>
*)
Position : CLASS
  //Servers:
	Nbr 	: SvrChCmd_DINT;
	Xpos 	: SvrCh_DINT;
	Zpos 	: SvrCh_DINT;
	Rpos 	: SvrCh_DINT;
	Ypos 	: SvrCh_DINT;
  //Clients:
	Next 	: CltChCmd_Position;
  //Variables:
		ReceptPtr 	: ^RecipeStr;
  //Functions:
	
	FUNCTION GLOBAL PosNbr
		VAR_INPUT
			inpNbr 	: DINT;
		END_VAR;
	
	FUNCTION GLOBAL PosData
		VAR_INPUT
			inpData 	: RobotPosStr;
			inpNbr 	: DINT;
		END_VAR;
	
	FUNCTION GLOBAL SetRecipePtr
		VAR_INPUT
			Ptr 	: ^RecipeStr;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Xpos::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Zpos::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Rpos::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Ypos::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB Position::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_POSITION
0$UINT, 0$UINT, (SIZEOF(::Position))$UINT, 
5$UINT, 1$UINT, 0$UINT, 
TO_UDINT(2149546169), "Position", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::Position.Nbr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(3262080135), "Nbr", 
(::Position.Xpos.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3334636901), "Xpos", 
(::Position.Zpos.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1825263086), "Zpos", 
(::Position.Rpos.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2843698433), "Rpos", 
(::Position.Ypos.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2122244608), "Ypos", 
//Clients:
(::Position.Next.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(851115400), "Next", TO_UDINT(2149546169), "Position", 0$UINT, 0$UINT, 
END_FUNCTION


#define USER_CNT_Position 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_Position] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION Position::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_Position, pCmd := #vmt.CmdTable);
	Nbr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF Nbr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Xpos.pMeth			:= StoreMethod( #M_RD_DIRECT(), #Xpos::Write() );
	IF Xpos.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Zpos.pMeth			:= StoreMethod( #M_RD_DIRECT(), #Zpos::Write() );
	IF Zpos.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Rpos.pMeth			:= StoreMethod( #M_RD_DIRECT(), #Rpos::Write() );
	IF Rpos.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Ypos.pMeth			:= StoreMethod( #M_RD_DIRECT(), #Ypos::Write() );
	IF Ypos.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION GLOBAL Position::PosNbr
	VAR_INPUT
		inpNbr 	: DINT;
	END_VAR
  
  Nbr := inpNbr;
  
  if IsClientConnected(#Next) then
    Next.PosNbr(inpNbr:= inpNbr + 1);
  end_if;

END_FUNCTION

FUNCTION GLOBAL Position::SetRecipePtr
	VAR_INPUT
		Ptr 	: ^RecipeStr;
	END_VAR
  
  ReceptPtr := Ptr; 
  if IsClientConnected(#Next) then
    Next.SetRecipePtr(Ptr:= ReceptPtr);
  end_if;

END_FUNCTION


FUNCTION GLOBAL Position::PosData
	VAR_INPUT
		inpData 	: RobotPosStr;
		inpNbr 	: DINT;
	END_VAR
  
  if inpNbr = Nbr then
    Xpos    := inpData.Xpos;
    Ypos    := inpData.Ypos;
    Zpos    := inpData.Zpos;
    Rpos    := inpData.Rpos;
  elsif IsClientConnected(#Next) then
    Next.PosData(inpData:= inpData, inpNbr:= inpNbr);
  end_if;

END_FUNCTION

FUNCTION VIRTUAL GLOBAL Position::Xpos::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	Xpos := input;
  ReceptPtr^.RobotPositions[Nbr].Xpos := Xpos;
	result := Xpos;

END_FUNCTION

FUNCTION VIRTUAL GLOBAL Position::Zpos::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	Zpos := input;
  ReceptPtr^.RobotPositions[Nbr].Zpos := Zpos;
	result := Zpos;

END_FUNCTION

FUNCTION VIRTUAL GLOBAL Position::Rpos::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	Rpos := input;
  ReceptPtr^.RobotPositions[Nbr].Rpos := Rpos;
	result := Rpos;

END_FUNCTION

FUNCTION VIRTUAL GLOBAL Position::Ypos::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	Ypos := input;
  ReceptPtr^.RobotPositions[Nbr].Ypos := Ypos;
	result := Ypos;

END_FUNCTION

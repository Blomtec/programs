//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "WindowEnd"
	Revision           = "0.0"
	GUID               = "{7C023859-14E0-4AB9-9222-25B09DC5D435}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)">
	<Channels>
	</Channels>
	<Network Name="WindowEnd">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{A8CE6F98-68DC-4E1F-9230-E41E373A2A56}"
				Class      = "_Global"
				Position   = "(218,120)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Server0">
						<OPCSettings WriteProtected="false"/>
					</Server>
					<Client Name="Lse"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.Server0" Destination="_base.Server0" Vertices="(690,210),(518,210),"/>
			<Connection Source="_base.Lse" Destination="this.Lse" Vertices="(218,210),(38,210),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using _Global

WindowEnd : CLASS
: _Global
  //Servers:
  //Clients:
  //Variables:
		WindowClose 	: DINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL IF_WindowEnd
		VAR_INPUT
			whoami 	: ^_WHOAMI;
			pic 	: ^void;
		END_VAR;
	
	FUNCTION GLOBAL Read_WindowEnd
		VAR_INPUT
			Reset 	: DINT;
		END_VAR
		VAR_OUTPUT
			End 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB WindowEnd::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_WINDOWEND
0$UINT, 0$UINT, (SIZEOF(::WindowEnd))$UINT, 
0$UINT, 0$UINT, 0$UINT, 
TO_UDINT(2742482723), "WindowEnd", //Class
TO_UDINT(3788417926), "_Global", 0$UINT, 14$UINT, //Baseclass
//Servers:
//Clients:
END_FUNCTION


#define USER_CNT_WindowEnd 44

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_WindowEnd] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION WindowEnd::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= _Global::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= _Global::Server0.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, _Global::Server0.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_WindowEnd;
#pragma warning (disable : 74)
	vmt.UserFcts[3]		:= #IF_WindowEnd();

#pragma warning (default : 74)
	_Global::Server0.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF _Global::Server0.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL WindowEnd::IF_WindowEnd
	VAR_INPUT
		whoami 	: ^_WHOAMI;
		pic 	: ^void;
	END_VAR
  
  WindowClose := 1;

END_FUNCTION

FUNCTION GLOBAL WindowEnd::Read_WindowEnd
	VAR_INPUT
		Reset 	: DINT;
	END_VAR
	VAR_OUTPUT
		End 	: DINT;
	END_VAR
  
  if Reset = 1 then
    WindowClose := 0;
  else
    End := WindowClose;
  end_if;

END_FUNCTION

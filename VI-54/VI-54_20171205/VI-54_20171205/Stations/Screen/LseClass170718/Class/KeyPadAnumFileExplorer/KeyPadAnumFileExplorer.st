//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "KeyPadAnumFileExplorer"
	Revision           = "0.3"
	GUID               = "{D353A9DE-268B-4B0D-83B9-8A1905C0174A}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	IconPath           = ".\Class\KeyPadAnumFileExplorer\KeyPad.ico"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)"
	Comment            = "class is used to get defaultimplementation of QWERTZ, QWERTY or AZERTY keyboard.&#13;&#10;keyboard offers just ASCII-code and differs on different languages&#13;&#10;set client &quot;Ima&quot; to IMA_WINDOW&#13;&#10;set client &quot;No&quot; to _WIN_EDITOR_ANUMFILEX">
	<Channels>
		<Client Name="CapitalLetter" Required="false" Internal="false" DefValue="1" Comment="set client to 1 if capital letters are used without activated shift mode&#13;&#10;on the other hand set 0 to get capital letters when shift mode is activated"/>
		<Client Name="KeyPadImg" Required="true" Internal="true"/>
	</Channels>
	<RevDoku>
		<Owner Company="sigmatek" Author="kolott"/>
		<Dokumentation Revision="0.3" Date="2015-11-06" Author="kolott" Company="sigmatek" Description="sa32226, color of titlebar will work at several frames"/>
		<Dokumentation Revision="0.2" Date="2015-09-24" Author="kolott" Company="sigmatek" Description="betterment when using different frames"/>
		<Dokumentation Revision="0.1" Date="2014-02-07" Author="kolott" Company="sigmatek" Description="innovation titlelinepositioning"/>
		<Dokumentation Revision="0.0" Date="2013-10-07" Author="kolott" Company="sigmatek" Description="release"/>
	</RevDoku>
	<Network Name="KeyPadAnumFileExplorer">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{B4F9FD1E-60A1-4C96-8BF4-75A48B2E7356}"
				Class      = "_Screen"
				Position   = "(218,120)"
				Visualized = "true">
				<Channels>
					<Server Name="Screen"/>
					<Client Name="ImA" Value="IMA_WINDOW"/>
					<Client Name="Lse"/>
					<Client Name="No" Value="_WIN_EDITOR_ANUMFILEX"/>
				</Channels>
			</Object>
			<Object
				Name       = "KeyPadImg"
				GUID       = "{EA24FAB0-81EC-4217-A702-F1D97DBDC85A}"
				Class      = "KeyPadImages"
				Position   = "(210,420)"
				Visualized = "false">
				<Channels>
					<Server Name="ClassSvr"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.Screen" Destination="_base.Screen" Vertices="(690,210),(518,210),"/>
			<Connection Source="_base.Lse" Destination="this.Lse" Vertices="(218,210),(38,210),"/>
			<Connection Source="_base.No" Destination="this.No" Vertices="(218,270),(38,270),"/>
			<Connection Source="_base.ImA" Destination="this.ImA" Vertices="(218,330),(38,330),"/>
			<Connection Source="this.KeyPadImg" Destination="KeyPadImg.ClassSvr"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using _Screen

KeyPadAnumFileExplorer : CLASS
: _Screen
  //Servers:
  //Clients:
	KeyPadImg 	: CltChCmd_KeyPadImages;
	CapitalLetter 	: CltCh_DINT;
  //Variables:
		KeyButton_XOff 	: INT;
		KeyButton_YOff 	: INT;
		KeyButton_Width 	: INT;
		KeyButton_Height 	: INT;
		DoneByProgram 	: BOOL;
		YOff 	: INT;
  //Functions:
	
	FUNCTION KeyPadAnumFileExplorer
		VAR_OUTPUT
			ret_code 	: ConfStates;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL S_Start
		VAR_INPUT
			pic 	: ^void;
			firsttime 	: BOOL;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL S_CreateNew
		VAR_INPUT
			psetup 	: ^_NEWSCREENPROP;
		END_VAR
		VAR_OUTPUT
			retcode 	: BOOL;
		END_VAR;
	
	FUNCTION TAB KeyTab_QUERTZ;
	
	FUNCTION TAB KeyTab_QUERTY;
	
	FUNCTION VIRTUAL SelectKeyboard
		VAR_OUTPUT
			retcode 	: ^USINT;
		END_VAR;
	
	FUNCTION TAB KeyTab_AZERTY;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using KeyPadImages


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB KeyPadAnumFileExplorer::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_KEYPADANUMFILEEXPLORER
0$UINT, 3$UINT, (SIZEOF(::KeyPadAnumFileExplorer))$UINT, 
0$UINT, 2$UINT, 0$UINT, 
TO_UDINT(1264995709), "KeyPadAnumFileExplorer", //Class
TO_UDINT(3599188277), "_Screen", 0$UINT, 3$UINT, //Baseclass
//Servers:
//Clients:
(::KeyPadAnumFileExplorer.KeyPadImg.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3266383049), "KeyPadImg", TO_UDINT(1581172638), "KeyPadImages", 0$UINT, 1$UINT, 
(::KeyPadAnumFileExplorer.CapitalLetter.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(956232733), "CapitalLetter", 
END_FUNCTION


#define USER_CNT_KeyPadAnumFileExplorer 7

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_KeyPadAnumFileExplorer] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION KeyPadAnumFileExplorer::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= _Screen::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= _Screen::Screen.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, _Screen::Screen.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_KeyPadAnumFileExplorer;
#pragma warning (disable : 74)
	vmt.UserFcts[3]		:= #S_Start();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[4]		:= #S_CreateNew();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[6]		:= #SelectKeyboard();

#pragma warning (default : 74)
	_Screen::Screen.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF _Screen::Screen.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ret_code	:= KeyPadAnumFileExplorer();

END_FUNCTION

//{{LSL_IMPLEMENTATION

FUNCTION TAB KeyPadAnumFileExplorer::KeyTab_QUERTZ
  '1','1', '2','2', '3','3', '4','4', '5','5', '6','6', '7','7', '8','8', '9','9', '0','0',
  'q','Q', 'w','W', 'e','E', 'r','R', 't','T', 'z','Z', 'u','U', 'i','I', 'o','O', 'p','P',
  'a','A', 's','S', 'd','D', 'f','F', 'g','G', 'h','H', 'j','J', 'k','K', 'l','L',  0 , 0 ,
  'y','Y', 'x','X', 'c','C', 'v','V', 'b','B', 'n','N', 'm','M', '_','_', '.','.',  0 , 0 ,
END_FUNCTION

FUNCTION TAB KeyPadAnumFileExplorer::KeyTab_QUERTY
  '1','1', '2','2', '3','3', '4','4', '5','5', '6','6', '7','7', '8','8', '9','9', '0','0',
  'q','Q', 'w','W', 'e','E', 'r','R', 't','T', 'y','Y', 'u','U', 'i','I', 'o','O', 'p','P',
  'a','A', 's','S', 'd','D', 'f','F', 'g','G', 'h','H', 'j','J', 'k','K', 'l','L',  0,  0,
  'z','Z', 'x','X', 'c','C', 'v','V', 'b','B', 'n','N', 'm','M', '_','_', '.','.',  0,  0,
END_FUNCTION

FUNCTION TAB KeyPadAnumFileExplorer::KeyTab_AZERTY
  '1','1', '2','2', '3','3', '4','4', '5','5', '6','6', '7','7', '8','8', '9','9', '0','0',
  'a','A', 'z','Z', 'e','E', 'r','R', 't','T', 'y','Y', 'u','U', 'i','I', 'o','O', 'p','P',
  'q','Q', 's','S', 'd','D', 'f','F', 'g','G', 'h','H', 'j','J', 'k','K', 'l','L',  0 , 0,
  'w','W', 'x','X', 'c','C', 'v','V', 'b','B', 'n','N', 'm','M', '_','_', '.','.',  0 , 0,
END_FUNCTION

FUNCTION VIRTUAL KeyPadAnumFileExplorer::SelectKeyboard
	VAR_OUTPUT
		retcode 	: ^USINT;
	END_VAR

  retcode := #KeyTab_QUERTY()$^usint;
  case Language_GetActualLocal() of 
    LOCAL_GERMAN : retcode := #KeyTab_QUERTZ()$^usint;
    LOCAL_FRENCH : retcode := #KeyTab_AZERTY()$^usint;
  end_case;
  retcode += 4;
  
END_FUNCTION

FUNCTION KeyPadAnumFileExplorer::KeyPadAnumFileExplorer
	VAR_OUTPUT
		ret_code 	: ConfStates;
	END_VAR

	ret_code         := C_OK;
  KeyButton_XOff   := 5;
  KeyButton_YOff   := 37;
  KeyButton_Width  := 50;
  KeyButton_Height := 50;

END_FUNCTION

FUNCTION VIRTUAL GLOBAL KeyPadAnumFileExplorer::S_CreateNew
	VAR_INPUT
		psetup 	: ^_NEWSCREENPROP;
	END_VAR
	VAR_OUTPUT
		retcode 	: BOOL;
	END_VAR
  VAR
  	room : _ROOM;
    tmp, xx, yy : int;
    pdkp : ^_DEFKEYPAD;
  END_VAR
  
  retcode       := true;
  DoneByProgram := true;
  
  MyGetScreenSize(#room);
  xx := 590; // keypad width
  yy := 342; // keypad height

//  room.xy2.x := 479; // test small display
  if(room.xy2.x < 639) then
    KeyButton_XOff   := 4;
    KeyButton_Width  := 40;
    KeyButton_Height := 44;
    xx               := 477;
    yy               := 304;
  end_if;
  
  pdkp := Get_DEFKEYPAD();
  tmp  := KeyPadImg.GetTitleLineHeight(pdkp^.WindowFrame) - KeyPadImg.GetTitleLineHeight(FRAME_NONE);
  YOff := KeyButton_YOff + tmp;
  yy   += tmp;
  
  psetup^.Position.xy1.x     := (room.xy2.x - room.xy1.x + 1 - xx) / 2;
  psetup^.Position.xy1.y     := (room.xy2.y - room.xy1.y + 1 - yy) / 2;
  psetup^.Position.xy2.x     := psetup^.Position.xy1.x + xx - 1;
  psetup^.Position.xy2.y     := psetup^.Position.xy1.y + yy - 1;
  psetup^.FrameId            := pdkp^.WindowFrame;
  psetup^.TouchEditorAscii   := false;
  psetup^.TouchEditorNumeric := false;
  psetup^.ColorBack          := pdkp^.WindowColorBack;
  psetup^.ColorHatch         := pdkp^.TitleBarColor;  // sa32226
  
END_FUNCTION

FUNCTION VIRTUAL GLOBAL KeyPadAnumFileExplorer::S_Start
	VAR_INPUT
		pic 	: ^void;
		firsttime 	: BOOL;
	END_VAR
  VAR
    room : _ROOM;
  	style : _STYLESHEET;
    x, y : _KOORD;
    any : _ANYPARA;
    pkey : ^usint;
    code : array[0..1] of usint;
    str : array[0..5] of char;
    ino, jno : udint;
    pdkp : ^_DEFKEYPAD;
    sal : bool;
  END_VAR

  if(DoneByProgram = true) & (firsttime = true) then
    
    CapitalLetter := 0;
    sal           := IsSalamander();
    if(sal = false) then // keine grossbuchstaben bei salamander
      CapitalLetter := CapitalLetter.Read();
    end_if;
    pdkp          := Get_DEFKEYPAD();
    
    init_STYLESHEET(#style);
    setup_STYLESHEET(#style, #pdkp^.StandardFontSchemeName[0], pdkp^.ButtonFrame, T_CENTERBOUND or T_MIDBOUND, pdkp^.ButtonColorReleased, pdkp^.ButtonColorText, pdkp^.ButtonColorPressed, WHITE, DARKGRAY, NIL, NIL, NIL, NIL, NIL);
    
    pkey := SelectKeyboard();
    for y:=0 to 3 do
      for x:=0 to 9 do
        room.xy1.x := Keybutton_XOff + y * 10 + x * KeyButton_Width;
        room.xy1.y := YOff + y * KeyButton_Height + KeyButton_Height;
        room.xy2.x := room.xy1.x + (KeyButton_Width - 2);
        room.xy2.y := room.xy1.y + (KeyButton_Height - 2);

        code$uint := pkey$^uint^;
        if(CapitalLetter = 1) then
          code[0] := code[1];
          code[1] := pkey^;
        end_if;
        pkey += 2;
        
        str[0] := code[1];
        str[1] := 0;

        if(code[0] <> 0) then
          add_key(pic$^_MY_PICTURE, #style, #room, DEFSCOPE, #str[0], sizeof(_ASCII), T_CENTERBOUND or T_MIDBOUND, code[0], code[1], _NOKEY);
        end_if;
      end_for;
    end_for;
    
    // key backspace
    room.xy1.x := Keybutton_XOff + 10 + KeyButton_Width * 10;
    room.xy1.y := YOff + KeyButton_Height;
    room.xy2.x := room.xy1.x + (KeyButton_Width + 20 - 2);
    room.xy2.y := room.xy1.y + (KeyButton_Height - 2);
    ino := KeyPadImg.GetImage(0);
    add_key(pic$^_MY_PICTURE, #style, #room, ino, NIL, sizeof(_ASCII), T_CENTERBOUND or T_MIDBOUND, _BCKSPC, _BCKSPC);
  
    // key insert
    room.xy1.x := room.xy2.x - (KeyButton_Width - 2);
    room.xy1.y := room.xy2.y + 2;
    room.xy2.y := room.xy1.y + (KeyButton_Height - 2);
    add_button(pic$^_MY_PICTURE, #style, #room, DEFSCOPE, DEFSCOPE, DEFSCOPE, VARNO_INSERTFLAG, DEFSCOPE, DEFSCOPE, "Ins", "Ins", sizeof(_ASCII), false, 0, 0, DEFSCOPE, 1, 0, T_CENTERBOUND or T_MIDBOUND);
    
    // key enter
    room.xy1.y := room.xy2.y + 2;
    room.xy2.y := room.xy1.y + (2 * KeyButton_Height - 2);
    ino := KeyPadImg.GetImage(1);
    //add_button(pic$^_MY_PICTURE, #style, #room, DEFSCOPE, DEFSCOPE, DEFSCOPE, DEFSCOPE, ino, ino, NIL, NIL, sizeof(_ASCII), true, 0, 0, DEFSCOPE, 1, 0, T_CENTERBOUND or T_MIDBOUND);
    add_key(pic$^_MY_PICTURE, #style, #room, ino, NIL, sizeof(_ASCII), T_CENTERBOUND or T_MIDBOUND, _ENTER, _ENTER);

    // key right
    room.xy1.y := room.xy2.y + 2;
    room.xy2.y := room.xy1.y + KeyButton_Height - 2;
    ino := KeyPadImg.GetImage(2);
    add_key(pic$^_MY_PICTURE, #style, #room, ino, NIL, sizeof(_ASCII), T_CENTERBOUND or T_MIDBOUND, _RIGHT, _RIGHT);

    // key left
    room.xy1.x := room.xy1.x - KeyButton_Width;
    room.xy2.x := room.xy2.x - KeyButton_Width;
    ino := KeyPadImg.GetImage(3);
    add_key(pic$^_MY_PICTURE, #style, #room, ino, NIL, sizeof(_ASCII), T_CENTERBOUND or T_MIDBOUND, _LEFT, _LEFT);

    ino := 5;
    jno := 4;
    if(CapitalLetter = 1) then
      ino := 4;
      jno := 5;
    end_if;
    ino := KeyPadImg.GetImage(ino);
    jno := KeyPadImg.GetImage(jno);
    
    if(sal = false) then
      // key shift (right)
      room.xy2.x := room.xy1.x - 2;
      room.xy1.x := room.xy2.x - (KeyButton_Width + 20 - 2);
      add_button(pic$^_MY_PICTURE, #style, #room, DEFSCOPE, DEFSCOPE, DEFSCOPE, VARNO_SHIFTFLAG, ino, jno, NIL, NIL, sizeof(_ASCII), false, 0, 0, DEFSCOPE, 1, 0, T_CENTERBOUND or T_MIDBOUND);

      // key shift (left)
      room.xy1.x := Keybutton_XOff;
      room.xy2.x := room.xy1.x + (KeyButton_Width + 20 - 2);
      add_button(pic$^_MY_PICTURE, #style, #room, DEFSCOPE, DEFSCOPE, DEFSCOPE, VARNO_SHIFTFLAG, ino, jno, NIL, NIL, sizeof(_ASCII), false, 0, 0, DEFSCOPE, 1, 0, T_CENTERBOUND or T_MIDBOUND);
      
      // key space
      room.xy1.x := Keybutton_XOff + (KeyButton_Width + 20);
      room.xy2.x := Keybutton_XOff + 8 * KeyButton_Width - 2 + 10;
      add_key(pic$^_MY_PICTURE, #style, #room, DEFSCOPE, NIL, sizeof(_ASCII), T_CENTERBOUND or T_MIDBOUND, ' ', ' ');
    else
      // key space
      room.xy2.x := room.xy1.x - 2;
      room.xy1.x := Keybutton_XOff;
      add_key(pic$^_MY_PICTURE, #style, #room, DEFSCOPE, NIL, sizeof(_ASCII), T_CENTERBOUND or T_MIDBOUND, ' ', ' ');
    end_if;

    // input
    setup_STYLESHEET(#style, #pdkp^.StandardFontSchemeName[0], FRAME_STEALTH, T_CENTERBOUND or T_MIDBOUND or T_INVERTTHEME, LIGHTGRAY, WHITE, LIGHTGRAY, WHITE, DARKGRAY, NIL, NIL, NIL, NIL, NIL);
    room.xy1.x := Keybutton_XOff;
    room.xy1.y := YOff;
    room.xy2.x := room.xy1.x + 10 + (KeyButton_Width * 11 + 20 - 2);
    room.xy2.y := room.xy1.y + KeyButton_Height - 6;
    add_input(pic$^_MY_PICTURE, #style, #room, DEFSCOPE, VARNO_EDITORDUMMY, AS_ASCII, DEFSCOPE);

    // titletext
    if(pdkp^.TitleColorText$UINT <> INVISIBLE) then
      setup_STYLESHEET(#style, #pdkp^.StandardFontSchemeName[0], FRAME_NONE, T_LEFTBOUND or T_MIDBOUND, INVISIBLE, pdkp^.TitleColorText, INVISIBLE, INVISIBLE, INVISIBLE, NIL, NIL, NIL, NIL, NIL);
      room.xy1.x := Keybutton_XOff;
      room.xy1.y := 2;
      room.xy2.x := room.xy1.x + (KeyButton_Width * 11);
      room.xy2.y := 2 + KeyPadImg.GetTitleLineHeight(pdkp^.WindowFrame);
      init_ANYPARA(#any);
      any.anything.list := VARTXT1;
      any.anything.no   := VARNO_EDITORDUMMY;
      add_text(pic$^_MY_PICTURE, #style, #room, DEFSCOPE, #any, NIL, sizeof(_ASCII), DEFSCOPE);
    end_if;
    
    if(has_theme_cancel(pdkp^.WindowFrame) = false) then
      // cancel button
      setup_STYLESHEET(#style, #pdkp^.StandardFontSchemeName[0], pdkp^.ButtonFrame, T_CENTERBOUND or T_MIDBOUND, 16#F800, pdkp^.ButtonColorText, RED, WHITE, DARKGRAY, NIL, NIL, NIL, NIL, NIL);
      room.xy1.x := Keybutton_XOff + (KeyButton_Width * 11) + 2;
      room.xy1.y := 5;
      room.xy2.x := room.xy1.x + 26;
      room.xy2.y := 31;
      ino := KeyPadImg.GetImage(6);
      add_key(pic$^_MY_PICTURE, #style, #room, ino, NIL, sizeof(_ASCII), T_CENTERBOUND or T_MIDBOUND, _ESC, _ESC);
    end_if;
     
    free_ANYPARA(#any);
    free_STYLESHEET(#style);
  end_if;

END_FUNCTION

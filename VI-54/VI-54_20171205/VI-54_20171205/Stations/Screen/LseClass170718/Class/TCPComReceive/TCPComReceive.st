//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "TCPComReceive"
	Revision           = "1.0"
	GUID               = "{0CAAECDB-D1C2-4C65-B80B-37A166FACA56}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(600,240)"
	Comment            = "Receiving data via communication class.">
	<Channels>
		<Server Name="ClassSvr" GUID="{98A339DA-AD8F-4B1C-9418-3202A0ECED5D}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="ID_Source" GUID="{31FBB33B-3E76-42E4-82D2-3589DC3E5205}" Visualized="false" Initialize="true" WriteProtected="true" Retentive="false" Comment="Source communication id number."/>
		<Server Name="sRecvCnt" GUID="{33768690-FB79-4ADE-B67D-CC3A5D499D8E}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false" Comment="Counter for received data blocks."/>
		<Client Name="toDataManager" Required="true" Internal="false" Comment="Connection to communication data manager."/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek GmbH &amp; Co KG" Author="LeiChr"/>
		<Dokumentation Revision="1.0" Date="2015-07-30" Author="LeiChr" Company="Sigmatek GmbH &amp; Co KG" Description="Initial library version"/>
	</RevDoku>
</Class>
*)
TCPComReceive : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	ID_Source 	: SvrCh_DINT;
	sRecvCnt 	: SvrCh_DINT;
  //Clients:
	toDataManager 	: CltChCmd_DataManager;
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
				//! <Function Comment="Is called whenever data is received. Overwrite this method to process data. &#13;&#10;NOTE: I the optional CMD parameter is used when sending, the method CallBackReciverCMD() has to be used for receiving in order to correctly receive the CMD parameter." Name="CallBackReceiver"/>
	FUNCTION VIRTUAL GLOBAL CallBackReceiver
		VAR_INPUT
			DestinationID 	: DINT;
			SourceID 	: DINT;
			size 	: UDINT;
			pdata 	: ^USINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: BOOL;			//! <Variable Comment="TRUE .. erfolgreich Empfangen .._MNG_Recived &#13;&#10;FALSE.. Fehler beim Empfangen .._MNG_GlobalReciveError" Name="CallBackReceiver.retcode"/>
		END_VAR;
				//! <Function Comment="Overwrite this method in order to receive messages including the optional CMD parameter." Name="CallBackReciverCMD"/>
	FUNCTION VIRTUAL GLOBAL CallBackReciverCMD
		VAR_INPUT
			DestinationID 	: DINT;
			SourceID 	: DINT;
			size 	: UDINT;
			pdata 	: ^USINT;
			OptCMD 	: USINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: BOOL;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd DataManager


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB TCPComReceive::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_TCPCOMRECEIVE
1$UINT, 0$UINT, (SIZEOF(::TCPComReceive))$UINT, 
3$UINT, 1$UINT, 0$UINT, 
TO_UDINT(4066382941), "TCPComReceive", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::TCPComReceive.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::TCPComReceive.ID_Source.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4072861165), "ID_Source", 
(::TCPComReceive.sRecvCnt.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3561094677), "sRecvCnt", 
//Clients:
(::TCPComReceive.toDataManager.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(31318979), "toDataManager", TO_UDINT(4008337867), "DataManager", 1$UINT, 0$UINT, 
END_FUNCTION


#define USER_CNT_TCPComReceive 2

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_TCPComReceive] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION TCPComReceive::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_TCPComReceive, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #CallBackReceiver();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #CallBackReciverCMD();

#pragma warning (default : 74)
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sRecvCnt.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF sRecvCnt.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

// ********************************************************************
// Prototype of callbackmethod
// ********************************************************************
// ********************************************************************
FUNCTION GLOBAL CallBackReceiverFnc_TCPComReceive
	VAR_INPUT
		pthis 	: ^void;
		DestinationID 	: DINT;
		SourceID 	: DINT;
		size 	: UDINT;
		pdata 	: ^USINT;
	END_VAR
  var_output
    retcode : bool;
  end_var

  retcode := pthis$^TCPComReceive^.CallBackReceiver(DestinationID, SourceID, size, pdata);
  pthis$^TCPComReceive^.sRecvCnt +=1;
  
END_FUNCTION

// ********************************************************************
// init method
// connect the receiver do datamanager
// ********************************************************************
// ********************************************************************
FUNCTION VIRTUAL GLOBAL TCPComReceive::Init

  if _FirstScan then
     // Als Empfangsklasse anmelden
    if toDataManager.ConnectReciver(udID      := ID_Source, 
                                    pThis     := this, 
                                    pCallback := #CallBackReceiverFnc_TCPComReceive()) <> 1 then
                                    
      TRACE("TCPComSend_Data::Init(): Fehler beim Anmelden als Empfangsklasse");
      ClassSvr := ERROR;
    end_if;
      
  end_if;

END_FUNCTION

// ********************************************************************
// callbackmethod of receiver
// ********************************************************************
// ********************************************************************
FUNCTION VIRTUAL GLOBAL TCPComReceive::CallBackReceiver
	VAR_INPUT
		DestinationID 	: DINT;
		SourceID 	: DINT;
		size 	: UDINT;
		pdata 	: ^USINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: BOOL;
	END_VAR
  
  
  retcode := CallBackReciverCMD(DestinationID:=(DestinationID AND 16#00FFFFFF), 
                                SourceID:=SourceID, 
                                size:=size, 
                                pdata:=pdata, 
                                OptCMD:= to_usint((DestinationID$udint AND 16#FF000000) shr 24)  );
  
END_FUNCTION


// ********************************************************************
// callbackmethod to handle the data
// ********************************************************************
// ********************************************************************
FUNCTION VIRTUAL GLOBAL TCPComReceive::CallBackReciverCMD
#pragma warning(disable:73);
  VAR_INPUT
		DestinationID 	: DINT;
		SourceID 	: DINT;
		size 	: UDINT;
		pdata 	: ^USINT;
		OptCMD 	: USINT;
	END_VAR
#pragma warning(default:73);
  
	VAR_OUTPUT
		retcode 	: BOOL;
	END_VAR
  
  // received data 
  retcode := TRUE;
  
END_FUNCTION


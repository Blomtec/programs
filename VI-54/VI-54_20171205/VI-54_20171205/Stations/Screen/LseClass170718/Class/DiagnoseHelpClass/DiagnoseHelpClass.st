//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "DiagnoseHelpClass"
	Revision           = "1.0"
	GUID               = "{3F3B54D4-CAD0-47BB-AB13-7E6B9C2592A2}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(540,360)"
	Comment            = "helping class for working with the PLC">
	<Channels>
		<Server Name="ClassSvr" GUID="{23FED6BE-FD09-49B0-B949-9A7DF31B6FF9}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="class server"/>
		<Server Name="OpenDiagnose" GUID="{1DB70E6D-3C2B-4D8C-A749-B8509E3B3ED5}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="write() will open the diagnosis"/>
		<Server Name="Reboot" GUID="{A4FE9AF0-8B24-448B-BF9D-DD589AEE53A6}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="write() will cause a plc REBOOT"/>
		<Server Name="Reset" GUID="{B99368D5-5A0D-4EAC-A1C7-8E9BA2946789}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="write() will cause a plc RESET"/>
		<Server Name="ResetRun" GUID="{2E1B1EEF-6E66-413D-8167-861482E02A51}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="write() will cause ResetRunApp"/>
		<Client Name="toOsKernel" Required="false" Internal="false" Comment="object channel to toOsKernel (don&apos;t connect)"/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek"/>
		<Dokumentation Revision="1.0" Date="2015-09-22" Company="Sigmatek" Description="Creation."/>
	</RevDoku>
</Class>
*)
DiagnoseHelpClass : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	Reset 	: SvrCh_DINT;
	Reboot 	: SvrCh_DINT;
	ResetRun 	: SvrCh_DINT;
	OpenDiagnose 	: SvrCh_DINT;
  //Clients:
	toOsKernel 	: CltChCmd__OSKernel;
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Reset::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Reboot::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ResetRun::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL OpenDiagnose::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd _OSKernel


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB DiagnoseHelpClass::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_DIAGNOSEHELPCLASS
1$UINT, 0$UINT, (SIZEOF(::DiagnoseHelpClass))$UINT, 
5$UINT, 1$UINT, 0$UINT, 
TO_UDINT(2292982275), "DiagnoseHelpClass", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::DiagnoseHelpClass.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::DiagnoseHelpClass.Reset.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2815000061), "Reset", 
(::DiagnoseHelpClass.Reboot.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(833307402), "Reboot", 
(::DiagnoseHelpClass.ResetRun.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(65305537), "ResetRun", 
(::DiagnoseHelpClass.OpenDiagnose.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3940669677), "OpenDiagnose", 
//Clients:
(::DiagnoseHelpClass.toOsKernel.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(2889244023), "toOsKernel", TO_UDINT(3045737964), "_OSKernel", 0$UINT, 4$UINT, 
END_FUNCTION


#define USER_CNT_DiagnoseHelpClass 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_DiagnoseHelpClass] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION DiagnoseHelpClass::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_DiagnoseHelpClass, pCmd := #vmt.CmdTable);
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Reset.pMeth			:= StoreMethod( #M_RD_DIRECT(), #Reset::Write() );
	IF Reset.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Reboot.pMeth			:= StoreMethod( #M_RD_DIRECT(), #Reboot::Write() );
	IF Reboot.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ResetRun.pMeth			:= StoreMethod( #M_RD_DIRECT(), #ResetRun::Write() );
	IF ResetRun.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	OpenDiagnose.pMeth			:= StoreMethod( #M_RD_DIRECT(), #OpenDiagnose::Write() );
	IF OpenDiagnose.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL DiagnoseHelpClass::Reset::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	Reset := input;
  
  toOsKernel.Reset();
  
	result := Reset;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL DiagnoseHelpClass::Reboot::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	Reboot := input;
  
  toOsKernel.Reboot();
  
	result := Reboot;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL DiagnoseHelpClass::ResetRun::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	ResetRun := input;
  toOsKernel.ResetRunApp();
	result := ResetRun;
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL DiagnoseHelpClass::OpenDiagnose::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	OpenDiagnose := input;
  InsertCmd(CMD_DIAGNOSTIC, 0, 0);
	result := OpenDiagnose;

END_FUNCTION
